<?xml version="1.0" encoding="UTF-8"?>
<!-- The XML Schema definition for a configuration file that provides
     necessary information regarding a job to be run for a genomic
     assembler
-->

<!--
	
	This DECAGON file is part of PEACE.
	
	PEACE is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	PEACE is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.
 
	You should have received a copy of the GNU General Public License
	along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
	
	Miami University makes no representations or warranties about the
	suitability of the software, either express or implied, including
	but not limited to the implied warranties of merchantability,
	fitness for a particular purpose, or non-infringement.  Miami
	University shall not be liable for any damages suffered by
	licensee as a result of using, result of using, modifying or
	distributing this software or its derivatives.

	By using or copying this Software, Licensee agrees to abide by the
	intellectual property laws, and all other applicable laws of the
	U.S., and the terms of GNU General Public License (version 3).
	
	Authors:   Dhananjai M. Rao              raodm@muohio.edu

-->

<!--
    This XML file is used to generate the JAXB classes to marshal
    and unmarshal XML files that define the executables, jobs, and
    processes to be run for genomic-assemblers used by DECAGON. 
    
    NOTE: Each time this schema is changed new JAXB bindings
    must be generated using the following command from peace/gui/src
    directory:
    
    cd peace/gui/src
    xjc -d . -p "org.peace_tools.decagon.jaxb" -npa decagon/Assembler.xsd
    
    Edit the file AssemblerDetails.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="assemblerDetails", namespace="http://www.peace-tools.org/decagon/")
    
    Next, edit the file Parameter.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="parameterSet", namespace="http://www.peace-tools.org/decagon/")
 -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.peace-tools.org/decagon/"
	xmlns="http://www.peace-tools.org/decagon/"
	xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    jaxb:version="2.0" 
	elementFormDefault="qualified">

	<!-- Include the definition for parameters that are defined in
		 a separate schema file. Specifically the definition for
		 the complex type ParameterSet is user here. -->
	<xsd:include schemaLocation="ParameterSet.xsd"/>
	
	<xsd:complexType name="Argument">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	This is the element that encapsulates information about
	command-line arguments that are passed to an executable. The following
	important difference between an Argument and a Parameter must be noted:
	Parameters are used to obtain input from the user via GUI components 
	while Arguments do not have any GUI components associated with them. 
	Arguments can use conditions to determine if they are to be used. 
	Arguments can either refer to a parameter to be used or directly use 
	a string value involving bind-variables. 
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>
		
			<xsd:element name="condition" type="Condition" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	An optional list of conditions associated with this parameter. A
	parameter is used only if the condition evaluates to true. Conditions
	can have sub-conditions associated with them. Conditions are evaluated 
	in a recursive, depth-first manner. 
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:choice>
				<xsd:element name="cmdLineArg" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	A string to be passed as the command-line argument. This string can
	include variable references as well. Here is an example: 
	--estFile %INPUT_FILE_PATH% --output %OUTPUT_FILE_PATH% 
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="parameterRef" type="xsd:token">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	This element must refer to the name of a parameter that is defined in 
	the set of parameters. Parameters are used to obtain inputs from the
	user while arguments are used to pass information to executables on their
	command-line.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="ArgumentList">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	This is a convenience top-level element that is used to wrap a list of
	arguments.
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>
			<xsd:element name="argument" type="Argument" minOccurs="1" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
 	This is the element that encapsulates information about
	command-line arguments that are passed to an executable.
	Arguments can either refer to a parameter to be used or directly use 
	a string value involving bind-variables.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<!-- Schema definition for type of internal executable -->
	<xsd:simpleType name="InternalExeType">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
				This enumeration defines the different kinds of 
				internal executable types that are currently 
				supported. Internal executables are executables
				that are distributed with PEACE. This information
				is used to set the necessary path to the internal
				exectuable to correctly locate it on a server. 
				
				<table border="0">
				<tr><td>clustering</td><td>An internal clustering executable (typically peace)</td></tr>
				<tr><td>east</td><td>The internal EAST assembler.</td></tr>
				</table>
				]]>
			</xsd:documentation>
		</xsd:annotation>
  		<xsd:restriction base="xsd:string">
    		<xsd:enumeration value="peace_clustering"/>
    		<xsd:enumeration value="peace_assembly"/>
			<xsd:enumeration value="east"/>
			<xsd:enumeration value="decagon_analyzer"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="Executable">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	Information about an executable to be run as part of a genomic assembler
	or some other processing step in the pipeline.
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>

			<xsd:choice>
				<xsd:annotation><xsd:documentation>
					This element provides a choice between referring to an
					external (that is, not included as part of PEACE 
					distribution) or an internal executable (an executable
					that is distributed with PEACE and the system has 
					in-built/special knowledge about the executable). 
					External executables are exctuables from other 
					genomic assemblers (or even routines OS commands) 
					that are referred to with just their executable name
					(such as: ls, find etc) with the path to the executable
					appropriately setup.
				</xsd:documentation></xsd:annotation>
				<xsd:element name="fileName" type="xsd:string">
					<xsd:annotation><xsd:appinfo>
						<jaxb:property><jaxb:javadoc>
							<![CDATA[
	The file-name of the actual executable-file that is associated
	with this entry. The executable name should not include
	any path information. It should simply be the file name of
	the executable. Path information is added as needed by DECAGON
	depending on how the platform on which DECAGON is being run.
	<b>NOTE: For internal executables (when the internal attribute
	is specified in the XML) this element is actually ignored.
							]]>
						</jaxb:javadoc></jaxb:property>
					</xsd:appinfo></xsd:annotation>
				</xsd:element>
				<xsd:element name="internal" type="InternalExeType">
					<xsd:annotation><xsd:appinfo>
						<jaxb:property><jaxb:javadoc>
	Element to indicate that the executable referred to is an executable that
	is internal to PEACE or DECAGON and is distributed as part of PEACE.
	This element is typically used when running the peace backend clustering/
	assembly engine or when running EAST assembler. This information is
	used to decide on the final path and name of the executable.
						</jaxb:javadoc></jaxb:property>
					</xsd:appinfo></xsd:annotation>
				</xsd:element>
			</xsd:choice>
			
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This is a generic description about the executable
	that may be presented to the user to provide additional
	information about the assembler. If this description
	contains HTML presentation tags then they must be 
	represented as corresponding XML entities.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
			<xsd:element name="detectArgsList" type="ArgumentList">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This element defines the set of arguments that need to be passed
	to the genomic assembler exectuable to verify that it is operational.
	The arguments are typically set to generate the version information
	about the assembler or provide brief help about the assember. This
	parameter-set is not meant to perform assembly. Instead it is used to
	run the assembler and provide feedback to the user so that the user
	can verify that the assembler is available and is ready for assembly.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="detectOutputCheck" type="OutputCheckData" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This element can be used to provide additional information to 
	automatically perform some basic verification about the
	expected output from running the process using the arguments in
	detectArgsList element. The value specified here is	treated as a 
	regular expression and not just a simple string to provide additional
	flexibility to perform more robust checks. The output can be from 
	either standard output and/or standard error. 
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="detectExitCode" type="xsd:integer" default="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	The expected exit code from running the command to detect operational
	status of the this executable of some server. Typically the exit
	code from successfully running a command is always zero. However, if
	certain command are expected to provide a non-zero exit code that 
	actually indicates a successful operation, then this value can be
	used to specify a non-zero value.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>			
		</xsd:sequence>
		
		<xsd:attribute name="name" type="xsd:token" use="required" >
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	A unique name/identifier used to refer to this executable entry when
	defining processes associated with a given assembly job. The value 
	set for this attribute is also used as the value for the executable
	attribute associated with a process. 
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<xsd:complexType name="OutputCheckData">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	This type is used to provide additional information about the
	expected output from running a process using a given set of
	command-line arguments. The output information is used to 
	determine if the process completed successfully. The value 
	specified here is treated as a regular expression and not just
	a simple string to provide additional flexibility to perform 
	more robust checks. The output can be from either standard output 
	or standard error. 
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="stdout" type="xsd:boolean" default="true">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	If this attribute is set to true then data written to standard output
	stream is used to perform the necessary checks. Otherwise the standard
	output is ignored.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="stderr" type="xsd:boolean" default="true">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	If this attribute is set to true then data written to standard error
	stream is used to perform the necessary checks. Otherwise the standard
	error is ignored.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

	<xsd:complexType name="Process">
		<xsd:sequence>
			<xsd:element name="cmdLineArgs" type="ArgumentList">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This element defines the set of command-line arguments that must be passed
	to the process-exectuable to perform genomic-assembly operation or a step
	in the DECAGON pipeline.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="outputCheck" type="OutputCheckData" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This element can be used to provide additional information to 
	automatically perform some basic verification about the
	expected output from running the process using the given arguments.
	The value specified here is	treated as a regular expression and not
	just a simple string to provide additional flexibility to perform 
	more robust checks. The output can be from either standard output 
	and/or standard error. 
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="exitCode" type="xsd:integer" default="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	The expected exit code from running the command. Typically the exit
	code from successfully running a command is always zero. However, if
	certain command are expected to provide a non-zero exit code that 
	actually indicates a successful operation, then this value can be
	used to specify a non-zero value.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="executable" type="xsd:token" use="required" >
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	The name of the executable to be run for this process. The value for
	this attribute must match the name specified for an Executable entry
	associated with a given genomic-assembler/DECAGON pipeline entry.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>	

</xsd:schema>
