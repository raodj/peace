//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

package org.peace_tools.workspace;

import java.io.PrintWriter;
import java.util.ArrayList;

import org.peace_tools.core.SummaryWriter;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * <p>This class encapsulates a list of data files and artifacts that
 * were generated as a result of running a job using this data set
 * (or an underlying artifact).  This mechanism provides a logical 
 * organization of the files generated using a single job. In
 * addition, it enables consolidation of related meta data into a single
 * node.</p>
 * 
 * <p><b>Note:</b> Each file entry in a given generated file list must
 * have a distinct FileEntry.FileEntryType. This check is enforced by
 * the {@link #add(FileEntry)} method in this class.</p>
 * 
 * <p>In addition to encapsulating the data this class also provides
 * convenient interfaces for marshaling and un-marshaling XML data compatible
 * with the PEACE GUI configuration XML file format. </p>
 */
public class GeneratedFileList {
	/**
	 * Helper method to utilize data from a DOM tree to create a suitable
	 * GeneratedFilceList entry. This method is typically  used to create
	 * a suitable entry when loading a Work space into the GUI.
	 * 
	 * @param fileList The DOM element that represents a "GeneratedFileList"
	 * DOM entry from where entries are to be used for creating a new node.
	 * 
	 * @return The newly created generated artifact list based on the DOM data.
	 * 
	 * @throws Exception This method throws an exception when errors occur
	 * during reading and processing elements from the DOM node.
	 */
	public static GeneratedFileList create(Element fileList) throws Exception {
		// load up the job summary information.
		Element jobData    = DOMHelper.getElement(fileList, "JobSummary");
		JobSummary summary = JobSummary.create(jobData);
		// Create a new file list to add entries to
		GeneratedFileList gfl = new GeneratedFileList(summary);
		// Parse out the file-list chain...
		NodeList chain = fileList.getElementsByTagName("FileEntry"); 
		for(int idx = 0; (idx < chain.getLength()); idx++) {
			Element node = (Element) chain.item(idx);
			// Create a heuristic entry using the DOM data
			FileEntry entry = FileEntry.create(node);
			gfl.add(entry);
		}
		// Now we have all the data in the object
		return gfl;
	}

	/**
	 * Constructor to create an empty file list.
	 * 
	 * This constructor is used to create an empty file list, given 
	 * the summary of the job. Once an entry is created the file
	 * entries associated with this entry can be manipulated via
	 * the getEntries() method.
	 * 
	 * @param summary The summary of the job that is being used
	 * to create the files associated with this file list.
	 */
	public GeneratedFileList(JobSummary summary) {
		this.jobSummary = summary;
		this.entryList  = new ArrayList<FileEntry>(3);
	}

	/**
	 * Add a new FileEntry object to this GFL. The file entry being added
	 * must correspond to a data file or artifact generated by the
	 * job associated with this GeneratedFileList.
	 *  
	 * <p><b>Note:</b> This method reports the newly added entry to
	 * all workspace listeners by firing a suitable event (assuming
	 * this has been added to a data set).</p>
	 * 
	 * @param entry The new GeneratedFileList entry to be added to this 
	 * data set. The entry is added only if this list does not have
	 * an existing entry of the same type.
	 */
	public synchronized boolean add(FileEntry entry) {
		if ((entry != null) && (findEntry(entry.getType()) == null)){
			entryList.add(entry);
			entry.setGFL(this);
			// Fire a suitable notification event.
			Workspace ws = Workspace.get();
			if ((ws != null) && (dataSet != null)) {
				WorkspaceEvent wse = new WorkspaceEvent(entry,
						WorkspaceEvent.Operation.INSERT);
				ws.fireWorkspaceChanged(wse);
			}
			// Entry added
			return true;
		}
		// Entry not added
		return false;
	}

	/**
	 * Remove an existing file entry from this GFL class. 
	 *  
	 * <p><b>Note:</b> This method reports the removed entry to
	 * all workspace listeners by firing a suitable event.</p>
	 * 
	 * @param entry The MSTData entry to be removed from this data set. 
	 */
	public synchronized void remove(FileEntry entry) {
		if (entry != null) {
			entryList.remove(entry);
			Workspace ws = Workspace.get();
			if (dataSet != null) {
				WorkspaceEvent wse = new WorkspaceEvent(entry,
						WorkspaceEvent.Operation.DELETE);
				ws.fireWorkspaceChanged(wse);
			}
		}
	}

	/**
	 * Obtain meta data about the job that was run to generate the MST.
	 * The JobID in the job summary can be used to look up additional
	 * information about the job. Similarly, the serverID value in the
	 * job summary can be used to look up information about the server
	 * on which the job was run.
	 * 
	 * @return This method returns information about the job that was
	 * run to generate the MST. 
	 */
	public JobSummary getJobSummary() { return jobSummary; }

	/**
	 * Obtain the list of entries associated with this object.
	 * 
	 * @return The list of entries associated with this object. The
	 * return value is never null but the list maybe empty.
	 */
	public ArrayList<FileEntry> getEntries() {
		return entryList;
	}
	
	/**
	 * Method to locate a file entry of a given type. 
	 * 
	 * This method searches the list of files associated with this 
	 * file list to locate a given type of file entry.
	 * 
	 * @param type The type of file entry to be located in this list.
	 * 
	 * @return The file entry whose types matches the given type.
	 * Otherwise this method returns null.
	 */
	public FileEntry findEntry(FileEntry.FileEntryType type) {
		for(FileEntry fe: entryList) {
			if (fe.getType().equals(type)) {
				return fe;
			}
		}
		return null;
	}
	
	/**
	 * Method to marshal the data stored in this object to become part of
	 * a DOM tree element passed in. This method assumes that the element
	 * passed in corresponds to the parent DataSet node in the DOM tree.
	 * 
	 * @param dataset The DOM element corresponding to the "DataSet"
	 * node that contains this entry.
	 */
	public final void marshall(Element dataset) {
		// Create a top-level entry for this "GeneratedFileList"
		Element fileList = DOMHelper.addElement(dataset, "GeneratedFileList", null);
		// Marshal the job summary information.
		jobSummary.marshall(fileList);
		// Add new sub-elements for each file entry.
		for(FileEntry fe: entryList) {
			fe.marshall(fileList);
		}
	}

	/**
	 * Method to marshal the data stored in this object directly to a
	 * XML fragment. The XML fragment is guaranteed to be compatible
	 * with the PEACE work space configuration data. 
	 * 
	 * @param out The stream to which the XML must be serialized.
	 */
	public final void marshall(PrintWriter out) {
		final String Indent = "\t\t";		
		// Create a top-level server entry for this server
		out.printf("%s<GeneratedFileList>\n", Indent); 
		// Marshal the job summary out.
		jobSummary.marshall(out);
		// Add new sub-elements for each file entry
		for(FileEntry fe: entryList) {
			fe.marshall(out);
		}
		// Close the GeneratedFileList tag
		out.printf("%s</GeneratedFileList>\n", Indent);
	}

	/**
	 * Provides a textual multi-line summary for this element.
	 * 
	 * This method is typically used by GUI to display a simple 
	 * representation of the data stored in this element.
	 * 
	 * @param indent The leading spaces to be used for indenting each
	 * line. This parameter cannot be null.
	 * 
	 * @return A textual multi-line summary of the data in this element.
	 */
	public String getSummary(String indent) {
		StringBuilder sb = new StringBuilder(256);
		for(int index = 0; (index < entryList.size()); index++) {
			sb.append("Summary of output #" + index + ":\n");
			sb.append(entryList.get(index).getSummary(indent + "  "));
		}
		return sb.toString();
	}

	/**
	 * Method to write summary information about this file list
	 * 
	 * This method is a convenience method that is used by various 
	 * wizards to display summary information about the generated data.
	 * 
	 * @param sw The summary writer to which the data is to be written.
	 */
	public void summarize(SummaryWriter sw) {
		sw.addSection("Generated output files/artifacts");
		for(FileEntry fe: entryList) {
			fe.summarize(sw);
		}
	}

	/**
	 * Set the data set that this object logically belongs to. 
	 * 
	 * <p><b>Note:</b>  This method is used by the DataSet. Use 
	 * {@link DataSet#add(GeneratedFileList)} method to add a object 
	 * to a data set.</p>
	 * 
	 * @param dataSet The data set to which this object has been added.
	 */
	protected void setDataSet(DataSet dataSet) {
		this.dataSet = dataSet;
	}

	/**
	 * Obtain the data set that logically contains this file list.
	 * 
	 * @return The data set that logically contains this object. This value
	 * is set only after this object has been added to a data set.
	 * Until such time the return value is null.
	 */
	public DataSet getDataSet() { return dataSet; }

	/**
	 * Set revised updated information about the job associated with
	 * the set of artifacts associated with this entry.
	 * 
	 * @param job The job from where the necessary information is
	 * to be copied.
	 */
	public void updateJobSummary(Job job) {
		jobSummary = new JobSummary(job);
		// Notify all listeners about the change.
		Workspace ws = Workspace.get();
		ws.fireWorkspaceChanged(new WorkspaceEvent(this, 
				WorkspaceEvent.Operation.INSERT));
	}

	/**
	 * Overrides the default implementation in the base class to 
	 * return a bit more meaningful information about this
	 * object. 
	 * 
	 * @return A short string representation that is easy to display
	 * primarily in a tree view of the work space.
	 */
	@Override
	public String toString() {
		return "Generated Files [Job ID: " + jobSummary.getJobID() + "]";
	}
	
	/**
	 * Helper method to get a tool-tip text for GUI components to use.
	 * 
	 * This is a helper method that provides an HTML formatted tool-tip
	 * text that can be readily displayed by the GUI. The tool-tip
	 * is a multi-line HTML fragment that includes some summary 
	 * information about the job that generated the files.
	 * 
	 * @return A HTML document that contains a HTML-formatted tool-tip
	 * text. This string is never null.
	 */
	public String getToolTipText() {
		return jobSummary.getToolTipText();
	}
	
	/**
	 * The list of file entry objects logically associated with this
	 * generated/output file list. The entries in this list are
	 * typically added via the {@link #add(FileEntry)} method. 
	 */
	private ArrayList<FileEntry> entryList;

	/**
	 * Reference to the data set that logically contains this MSTData 
	 * element. This element is not serialized to XML format 
	 * (and consequently is flagged transient).
	 */
	private transient DataSet dataSet;

	/**
	 * The core/useful information about the job that was run to compute
	 * the MST.
	 */
	private JobSummary jobSummary;
}
