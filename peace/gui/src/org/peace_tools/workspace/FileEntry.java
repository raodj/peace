package org.peace_tools.workspace;

import java.io.File;
import java.io.PrintWriter;

import org.peace_tools.core.SummaryWriter;
import org.peace_tools.generic.Utilities;
import org.peace_tools.workspace.DataSet.DataFileType;
import org.w3c.dom.Element;

/**
 * <p>This class represents a single logical file that was generated as
 * the output of a Job run via this GUI. This class is used encapsulate
 * all the necessary information about the generated file entry. The
 * information contained in this class (along with various helper methods)
 * is used by various GUI classes as well.</p>
 * 
 * <p>In addition to encapsulating the data this class also provides
 * convenient interfaces for marshaling and un-marshaling XML data compatible
 * with the PEACE GUI configuration XML file format. </p>
 */
public class FileEntry {
	/**
	 * Enumeration of the type of output file represented
	 * by this entry.
	 * 
	 * The following enumerations are used to indicate the type of
	 * output file represented by this entry.
	 */
	public enum FileEntryType {
		/**
		 * This enumeration is used to indicate a Minimum Spanning Tree
		 * (MST) text file. This type of file is generated through a 
		 * clustering job.
		 */
		MST,
		/**
		 * This enumeration is used to indicate a Clustering (CLS)
		 * text file. This type of file is generated through a 
		 * clustering job.
		 */
		CLS,
		/**
		 * Assembly output file that contains contigs/consensus
		 * sequences. This file is typically generated through an 
		 * assembly job. 
		 */
		ASM,
		/**
		 * A simple text file that contains human-readable statistics
		 * generated by various tools.
		 */
		STATS,
		/**
		 * A generic text output file that contains some general 
		 * output/error messages generated by various tools.  
		 */
		OUTPUT,
		/**
		 * An output file that contains singleton entries in FASTA
		 * (or other) file formats.
		 */
		SINGLETONS
	};

	/**
	 * Helper method to utilize data from a DOM tree to create a suitable
	 * GeneratedFileEntry entry. This method is typically  used to create
	 * a suitable entry when loading a Work space into the GUI.
	 * 
	 * @param entryData The DOM element to be used for creating the 
	 * GeneratedFileEntry object and populating with the needed data.
	 * 
	 * @return The newly created file entry based on the DOM data.
	 * 
	 * @throws Exception This method throws an exception when errors occur
	 * during reading and processing elements from the DOM node.
	 */
	public static FileEntry create(Element entryData) throws Exception {
		// First extract the necessary information from the DOM tree.
		String id      = DOMHelper.getStringValue(entryData, "ID");
		String typeStr = DOMHelper.getStringValue(entryData, "EntryType");
		String mimeStr = DOMHelper.getStringValue(entryData, "MimeType");
		String path    = DOMHelper.getStringValue(entryData, "Path");
		String desc    = DOMHelper.getStringValue(entryData, "Description", true);
		// Convert strings to enumeration objects.
		FileEntryType type = FileEntryType.valueOf(typeStr.toUpperCase());
		DataFileType  mimeType = DataFileType.valueOf(mimeStr.toUpperCase());
		// Now that we have all the information create the actual entry
		return new FileEntry(id, type, mimeType, path, desc);
	}
	
	/**
	 * The constructor to create a fully populated GeneratedFileList
	 * object that contains all the meta data regarding a file that 
	 * has been generated (through a job).
	 * 
	 * @param id The unique generated data set ID value for this entry.
	 * 
	 * @param type The type of file that this entry represents.
	 * 
	 * @param mimeType The physical file format of the data. This is 
	 * equivalent to the file format of this file.
	 * 
	 * @param path The path to the actual MST file (on the local machine) 
	 * that is referred by this entry.
	 * 
	 * @param description A user defined description for this file.
	 */
	public FileEntry(String id, FileEntryType type, 
			DataSet.DataFileType mimeType, String path, String description) {
		this.id          = id;
		this.type        = type;
		this.mimeType    = mimeType;
		this.path        = path;
		this.description = description;
	}
	
	/**
	 * Obtain the work space wide unique identifier set for this data set. The
	 * ID value is created when new jobs are scheduled to create MST data. These
	 * IDs are persisted in the work space configuration file and loaded when a
	 * work space is opened in the GUI.
	 * 
	 * @return This method returns the unique identifier set for this data set.
	 */
	public String getID() { return id; }
	
	/**
	 * The type of logical file entry represented by this object. This
	 * value is typically used to identify files for processing, display
	 * meaningful icons, and other operations in the GUI.
	 * 
	 * @return The type of generated/output file (or artifact) represented
	 * by this object.
	 */
	public FileEntryType getType() { return type; }
	
	/**
	 * The format of the physical file represented by this entry.
	 * 
	 * This value is typically used to appropriately read and display
	 * the physical contents of the file represented by this entry.
	 * 
	 * @return The mime type (or physical file format) of generated/output
	 * file (or artifact) represented by this object.
	 */
	public DataFileType getMimeType() { return mimeType; }
	
	/**
	 * Obtain the complete file name and path where the actual file is
	 * located. 
	 * 
	 * This value is set when a new job to generate this artifact is
	 * scheduled. The path for the artifact is persisted in the work space
	 * configuration file and loaded when a work space is opened in the GUI.
	 * 
	 * @return This method returns the path to the physical file represented
	 * by this entry.
	 */
	public String getPath() { return path; }
	
	/**
	 * Obtain just the name of the file (without path) for this file entry.
	 * 
	 * This is a helper method that can be used to obtain just the
	 * name of the file, without any leading path information. For
	 * example, given the path: <code>/home/user/PEACE/workspace1/test.fa</code>,
	 * this method returns <code>test.fa</code>
	 * 
	 * @return The name of the file associated with this file entry.
	 */
	public String getName() {
		File tmpFile = new File(path);
		return tmpFile.getName();
	}
	
	/**
	 * Obtain the user supplied description for this this entry. 
	 * 
	 * This value is set  when new jobs are scheduled. The description is
	 * persisted in the work space configuration file and loaded when a 
	 * work space is opened in the GUI.
	 * 
	 * @return This method returns the user supplied description set for this
	 *         job. This value is never null but can be an empty string.
	 */
	public String getDescription() { return description; }
	
	/**
	 * Method to marshal the data stored in this object to become part of
	 * a DOM tree element passed in. This method assumes that the element
	 * passed in corresponds to the parent GeneratedFileList node in a DOM tree.
	 * 
	 * @param fileList The DOM element corresponding to the "GeneratedFileList"
	 * node that logically contains this entry.
	 */
	public final void marshall(Element fileList) {
		// Create a top-level entry for this "Job"
		Element mstData = DOMHelper.addElement(fileList, "FileEntry", null);
		// Add new sub-elements for each sub-element
		DOMHelper.addElement(mstData, "ID", id);
		DOMHelper.addElement(mstData, "EntryType", type.toString().toLowerCase());
		DOMHelper.addElement(mstData, "MimeType", mimeType.toString().toLowerCase());
		DOMHelper.addElement(mstData, "Path", path);
		DOMHelper.addElement(mstData, "Description", 
				(description != null) ? description : "");
	}
	
	/**
	 * Method to marshal the data stored in this object directly to a
	 * XML fragment. The XML fragment is guaranteed to be compatible
	 * with the PEACE work space configuration data. 
	 * 
	 * @param out The stream to which the XML must be serialized.
	 */
	public final void marshall(PrintWriter out) {
		final String Indent = "\t\t\t";
		final String STR_ELEMENT = Indent + "\t" + "<%1$s>%2$s</%1$s>\n";
		
		// Create a top-level server entry for this server
		out.printf("%s<FileEntry>\n", Indent); 
		// Add new sub-elements for each value.
		out.printf(STR_ELEMENT, "ID", id);
		out.printf(STR_ELEMENT, "EntryType", type.toString().toLowerCase());
		out.printf(STR_ELEMENT, "MimeType", mimeType.toString().toLowerCase());
		out.printf(STR_ELEMENT, "Path", path);
		out.printf(STR_ELEMENT, "Description", 
				(description != null) ? DOMHelper.xmlEncode(description) : "");
		// Close the MSTData tag
		out.printf("%s</FileEntry>\n", Indent);
	}
	
	/**
	 * Provides a textual multi-line summary for this element.
	 * 
	 * This method is typically used by GUI to display a simple 
	 * representation of the data stored in this element.
	 * 
	 * @param indent The leading spaces to be used for indenting each
	 * line. This parameter cannot be null.
	 * 
	 * @return A textual multi-line summary of the data in this element.
	 */
	public String getSummary(String indent) {
		StringBuilder sb = new StringBuilder(256);
		// First append standard information.
		sb.append(indent + "ID: " + id + "\n");
		sb.append(indent + "Type: " + type.toString() + "\n");
		sb.append(indent + "Mime Type: " + mimeType.toString() + "\n");
		sb.append(indent + "Path: " + path + "\n");
		sb.append(indent + "Description: " + description + "\n");
		return sb.toString();
	}
	
	/**
	 * Overrides the default implementation in the base class to 
	 * simply return the last part of the file name associated
	 * with this entry.
	 * 
	 * @return A short string representation that is easy to display
	 * primarily in a tree view of the work space.
	 */
	@Override
	public String toString() {
		File tmpData = new File(path);
		return type.toString() + " Data [File: " + tmpData.getName() + "]";
	}
	
	/**
	 * Helper method to check if the  file exists and is readable.
	 * 
	 * This is a convenience method that can be used to verify that
	 * the data file (associated with this entry) exists and is readable.
	 * 
	 * @return This method returns true if the data file exists and is
	 * readable. Otherwise this method returns false.
	 */
	public boolean isGood() {
		File f = new File(path);
		return (f.exists() && f.canRead());
	}
	
	/**
	 * Method to write summary information about this data entry.
	 * 
	 * This method is a convenience method that is used by various 
	 * wizards to display summary information about this file entry.
	 * 
	 * @param sw The summary writer to which the data is to be written.
	 */
	public void summarize(SummaryWriter sw) {
		File tempFile = new File(path);
		sw.addSubSection("File Name", tempFile.getName(), description);
		sw.addSubSummary("Local path", tempFile.getPath(), null);
		sw.addSubSummary("Type & Mime Type", type.toString(),  mimeType.toString());
	}
	
    /**
     * Set the generated file list (gfl) class that this object
     * logically belongs to. 
     * 
     * <p><b>Note:</b>  This method is used by the GenerateFileSet. Use 
     * GenerateFileList# method to add a object 
     * to a data set.</p>
     * 
     * @param dataSet The data set to which this object has been added.
     */
    protected void setGFL(GeneratedFileList gfl) {
    	this.gfl = gfl;
    }
    
    /**
     * obtain the GeneratedFileList (GFL) object that this object
     * logically belongs to.
     * 
     * 
     * @return The GFL object that logically contains this file entry.
     * The return value may be null, if this object has not been added
     * to a GFL yet.
     */
    public GeneratedFileList getGFL() {
    	return gfl;
    }
    
	/**
	 * Helper method to get a tool-tip text for GUI components to use.
	 * 
	 * This is a helper method that provides an HTML formatted tool-tip
	 * text that can be readily displayed by the GUI. The tool-tip
	 * is a multi-line HTML fragment that includes some summary 
	 * information about the file entry.
	 * 
	 * @return A HTML document that contains a HTML-formatted tool-tip
	 * text. This string is never null.
	 */
	public String getToolTipText() {
		File tmpFile = new File(path);
		final String htmlDesc = Utilities.wrapStringToHTML(description, 45);		
		// Create the formatted tool-tip
		final String toolTip  =
			String.format(TOOL_TIP_TEMPLATE, tmpFile.getName(), tmpFile.getPath(),
					type.toString(), mimeType.toString(), htmlDesc);  
		return toolTip;
	}

	/**
	 * The unique generated file entry ID value for this entry. This value is
	 * typically created when a new job is scheduled and generated/output
	 * file entries are created. This value is persisted in
	 * the work space configuration.
	 */
	protected final String id;
	
	/**
	 * The path to the actual data file (on the local machine) that is 
	 * referred by this entry.
	 */
	private final String path;

	/**
	 * The type of generated/output file that is logically represented
	 * by this object. 
	 */
	private final FileEntryType type;
	
	/**
	 * This type indicates the actual/physical format of the data
	 * file.
	 */
	private final DataFileType mimeType;
	
	/**
	 * A user defined description for this file. This description is set when
	 * a new job is scheduled and persisted in the work space configuration for
	 * future references. This description can be empty (but not null)
	 */
	private final String description;
	
	/**
	 * The generated file list object that logically owns this entry.
	 * This value is populated only after this entry is added to a 
	 * generated file list object.
	 */
	private transient GeneratedFileList gfl;
		
	/**
	 * A fixed string constant to ease generation of tool tip text
	 * for use/display by GUI components. This text string is
	 * suitably formatted (by the {@link #getToolTipText()} method)
	 * via printf to fill-in values for various parameters.
	 */
	private static final String TOOL_TIP_TEMPLATE = "<html>" +
		"<b>File Name:</b> %s<br/>" +
		"<b>File Path:</b> %s<br/>" +
		"<b>File Type:</b> %s (%s)<br/>" +
		"<b>Description:</b> %s" +
		"</html>";
}
