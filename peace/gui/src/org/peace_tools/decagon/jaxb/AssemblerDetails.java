//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.18 at 06:29:58 PM EDT 
//


package org.peace_tools.decagon.jaxb;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 	This is the top-level element that encapsulates all the necessary
 * 	information to run the software pipeline associated with a genomic
 * 	assembler. The software pipeline includes one or more executables to
 * 	be run in a serial manner to assemble a given data set. Each
 * 	executable may accept one or more command-line arguments. The value
 * 	for command-line arguments is either obtained from pre-defined DECAGON
 * 	bind variables or obtained fromn the user via command-line parameters.
 * 			
 * 
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AssemblerDetails", namespace = "http://www.peace-tools.org/decagon/", propOrder = {
    "name",
    "description",
    "icon",
    "executable",
    "assemblyParams",
    "job"
})
@XmlRootElement(name="assemblerDetails", namespace="http://www.peace-tools.org/decagon/")
public class AssemblerDetails {

    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected String name;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected String description;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected String icon;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected List<Executable> executable;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected ParameterSet assemblyParams;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected List<Job> job;

    /**
     * 
     * 						
     * 	This is a simple/short name for the genomic-assembler/pipeline.
     * 	Optional version numbers maybe included in the name if
     * 	multiple-versions exists. Examples would be: EAST-0.95,
     * 	or BATON-0.1 etc. This string should be really short 
     * 	(preferably no more than 16 characters) as
     * 	it is used in various spots in the GUI under this 
     * 	assumption. 
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * 
     * 						
     * 	This is a generic description about the assembler
     * 	that is presented to the user to provide additional
     * 	information about the assembler. If this description
     * 	contains HTML presentation tags then they must be 
     * 	represented as corresponding XML entities.
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * 
     * 						
     * 	An optional path to an image file (typically PNG) that serves
     * 	as an icon to be assoicated with this assembler in menus and
     * 	other locations. The given ICON is scaled to a 24x24 or 16x16
     * 	size as needed in the GUI. The file name is typically relative
     * 	to the location of the description XML file.
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIcon() {
        return icon;
    }

    /**
     * Sets the value of the icon property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIcon(String value) {
        this.icon = value;
    }

    /**
     * 
     * 						
     * 	Information regarding the list of executables that are associated
     * 	with this assembler/software-pipeline. Refer to the documentation on
     * 	each element in the Executable type for additional details on the
     * 	information to be supplied about each executable. 
     * 						
     * 					Gets the value of the executable property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the executable property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExecutable().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Executable }
     * 
     * 
     */
    public List<Executable> getExecutable() {
        if (executable == null) {
            executable = new ArrayList<Executable>();
        }
        return this.executable;
    }

    /**
     * 
     * 						
     * 	This element defines the set of parameters that need to be passed
     * 	to the genomic assembler exectuable(s) to to perform assembly. This
     * 	parameter list can uses various DECAGON-variables that are
     * 	defined by DECAGON. In addition, the parameters can be conditionally
     * 	defined to ensure appropriate parameters are used. The bind variables
     * 	must be used to address the cDNA file to be assembled, obtain information
     * 	about the type of reads in the cDNA file, the host operating system,
     * 	etc. Refer to ParameterSet.xsd file for details on the various bind 
     * 	variables that are defined by DECAGON for use as parameters. 
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link ParameterSet }
     *     
     */
    public ParameterSet getAssemblyParams() {
        return assemblyParams;
    }

    /**
     * Sets the value of the assemblyParams property.
     * 
     * @param value
     *     allowed object is
     *     {@link ParameterSet }
     *     
     */
    public void setAssemblyParams(ParameterSet value) {
        this.assemblyParams = value;
    }

    /**
     * 
     * 						
     * 	The actual work of genomic-assembly is performed by scheduling jobs. A
     * 	job is an unique, top-level element that encapsulates all the necessary
     * 	information to run a job associated with a genomic-assembler or a
     * 	DECAGON software pipeline. A job (synonymous with a PBS job) conists 
     * 	of one or process processes (usually one) that is run on a given 
     * 	server or supercomputing cluster. Refer to the definition in Job.xsd
     * 	file for details on the various information encapsulated by this element.
     * 						
     * 					Gets the value of the job property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the job property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getJob().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Job }
     * 
     * 
     */
    public List<Job> getJob() {
        if (job == null) {
            job = new ArrayList<Job>();
        }
        return this.job;
    }

}
