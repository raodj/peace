//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.18 at 06:29:58 PM EDT 
//


package org.peace_tools.decagon.jaxb;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 	A element/class to encapsulate information about suggested 
 * 	resources to be used for the job. This information is used
 * 	to suggest suitable scale factors for resources to be 
 * 	allocated to the job.
 * 			
 * 
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ResourceFactors", namespace = "http://www.peace-tools.org/decagon/", propOrder = {
    "ntMemScale",
    "cntMemScale",
    "ntTimeScale",
    "cntTimeScale"
})
public class ResourceFactors {

    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected double ntMemScale;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected double cntMemScale;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected double ntTimeScale;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected double cntTimeScale;

    /**
     * 
     * 						
     * 	These element is used to provide a scale factor for the 
     * 	amount of memory to be requested for the job. This scale
     * 	factor is multiplied with the number of nucleotides and
     * 	added to the base constant 256 MB of memory to compute 
     * 	the net	memory to be suggested to the user.
     * 						
     * 					
     * 
     */
    public double getNtMemScale() {
        return ntMemScale;
    }

    /**
     * Sets the value of the ntMemScale property.
     * 
     */
    public void setNtMemScale(double value) {
        this.ntMemScale = value;
    }

    /**
     * 
     * 						
     * 	These element is used to provide a scale factor for the 
     * 	amount of memory to be allocated for the job. This scale
     * 	factor is multiplied with the number of cDNA fragements to
     * 	be assembled and added to the memory requirement to compute
     * 	the net memory to be suggested to the user. The net memory
     * 	is the maximum memory to be rested to be reserved for the job
     * 	on a supercomputing cluster.
     * 						
     * 					
     * 
     */
    public double getCntMemScale() {
        return cntMemScale;
    }

    /**
     * Sets the value of the cntMemScale property.
     * 
     */
    public void setCntMemScale(double value) {
        this.cntMemScale = value;
    }

    /**
     * 
     * 						
     * 	These element is used to provide a scale factor for the 
     * 	amount of time to be allocated for the job. This scale
     * 	factor is multiplied with the number of nucleotides and
     * 	added to the base constant time of 1 minute to compute 
     * 	the maximum time to be requested for the job on a 
     * 	supercomputing cluster.
     * 						
     * 					
     * 
     */
    public double getNtTimeScale() {
        return ntTimeScale;
    }

    /**
     * Sets the value of the ntTimeScale property.
     * 
     */
    public void setNtTimeScale(double value) {
        this.ntTimeScale = value;
    }

    /**
     * 
     * 						
     * 	These element is used to provide a scale factor for the 
     * 	amount of time to be allocated for the job. This scale
     * 	factor is multiplied with the number of cDNA fragements to
     * 	be assembled and added to the time to be reserved. This
     * 	value is added to the base constant time to compute
     * 						
     * 					
     * 
     */
    public double getCntTimeScale() {
        return cntTimeScale;
    }

    /**
     * Sets the value of the cntTimeScale property.
     * 
     */
    public void setCntTimeScale(double value) {
        this.cntTimeScale = value;
    }

}
