//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.18 at 06:29:58 PM EDT 
//


package org.peace_tools.decagon.jaxb;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * 
 * 	An individual parameter that can be used to obtain a specific
 * 	input from the user. A parameter is typically never 
 * 	instantiated and directly used. Instead a Parameter Set
 * 	is created and parameters within the set are used.
 * 			
 * 
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Parameter", namespace = "http://www.peace-tools.org/decagon/", propOrder = {
    "condition",
    "kind",
    "cmdLine",
    "cmdLineKind",
    "value",
    "min",
    "max",
    "mutable",
    "hidden",
    "description",
    "summary"
})
public class Parameter {

    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected List<Condition> condition;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected ParameterKind kind;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected String cmdLine;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", defaultValue = "EXPLICIT_VALUE")
    protected CmdLineKind cmdLineKind;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected String value;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected Double min;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected Double max;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", defaultValue = "true")
    protected Boolean mutable;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", defaultValue = "false")
    protected boolean hidden;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected String description;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected String summary;
    @XmlAttribute
    protected Boolean controller;
    @XmlAttribute(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String name;

    /**
     * 
     * 	An optional list of conditions associated with this parameter. A
     * 	parameter is used only if the condition evaluates to true. Conditions
     * 	can have sub-conditions associated with them. Conditions are evaluated 
     * 	in a recursive, depth-first manner. 
     * 					Gets the value of the condition property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the condition property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCondition().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Condition }
     * 
     * 
     */
    public List<Condition> getCondition() {
        if (condition == null) {
            condition = new ArrayList<Condition>();
        }
        return this.condition;
    }

    /**
     * 
     * 						
     * 	The kind for this parameter that defines the type of
     * 	inputs to be obtained from the user.
     * 	This enumeration defines the different kinds of inputs
     * 	that can be associated with a parameter. The kind of
     * 	the parameter determines the type of input (the user
     * 	will be prompted for) GUI element that will be used
     * 	as shown in the list below:
     * 				
     * 	<table border="0">
     * 	<tr><td>BOOLEAN</td><td>A check-box for true/false input</td></tr>
     * 	<tr><td>INTEGER</td><td>A spinner to select integer values</td></tr>
     * 	<tr><td>DOUBLE</td><td>A text box for numeric inputs</td></tr>
     * 	<tr><td>STRING</td><td>A text field to enter a line of input</td></tr>
     * 	<tr><td>FILE</td><td>A text field + browse button to be used to select a file</td></tr>
     * 	<tr><td>DIRECTORY</td><td>A text field + browse button to be used to select a directory</td></tr>
     * 	<tr><td>DUMMY</td><td>A dummy component that does not require any input. This is useful
     * 	<tr><td>CHOICE</td><td>A fixed list of choices for the user to select.</td></tr>
     * 	for placing generic text providing additional information to user.</td></tr>
     * 	</table>
     * 						
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link ParameterKind }
     *     
     */
    public ParameterKind getKind() {
        return kind;
    }

    /**
     * Sets the value of the kind property.
     * 
     * @param value
     *     allowed object is
     *     {@link ParameterKind }
     *     
     */
    public void setKind(ParameterKind value) {
        this.kind = value;
    }

    /**
     * 
     * 	An optional command-line argument string (if any)
     * 	to be passed to the external program. 
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCmdLine() {
        return cmdLine;
    }

    /**
     * Sets the value of the cmdLine property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCmdLine(String value) {
        this.cmdLine = value;
    }

    /**
     * 
     * 						
     * 	This enumeration specifies how the command-line
     * 	argument for the target program must be generated.
     * 	Refer to the documentation on the type for
     * 	additional details about how the values are 
     * 	interpreted.
     * 	
     * 	This enumeration defines the different ways in which
     * 	the command-line argument and its values are to be
     * 	passed to the target program. 
     * 	
     * 	<table border="0">
     * 		<tr><td>IMPLICIT_VALUE</td><td>Only command-line argument is included
     * 				                 without its value. Used for boolean flags.
     * 				                 (example: <code>--turnDebugOn</code>). This
     * 				                 type is meant only to be used with BOOLEAN kind
     * 				                 parameters.</td></tr>
     * 		<tr><td>EXPLICIT_VALUE</td><td>Both command-line argument and value are
     * 				                 placed one after another. This is the
     * 				                 default value if no value is specified. 
     * 				                 (example: <code>--fastaFile test.fa</code>)</td></tr>
     * 		<tr><td>VALUE_ONLY</td><td>Only the value is included without the
     * 				                 actual command-line argument 
     * 				                 (example: <code>test.fa</code>)</td></tr>
     * 		<tr><td>IGNORE</td><td>The parameter is to be ignored when generating
     * 		                       command-line arguments.</td></tr>
     * 	</table>
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link CmdLineKind }
     *     
     */
    public CmdLineKind getCmdLineKind() {
        return cmdLineKind;
    }

    /**
     * Sets the value of the cmdLineKind property.
     * 
     * @param value
     *     allowed object is
     *     {@link CmdLineKind }
     *     
     */
    public void setCmdLineKind(CmdLineKind value) {
        this.cmdLineKind = value;
    }

    /**
     * 
     * 	Optional default value for the command-line argument.
     * 	This value must be appropriate for the type of the
     * 	argument. That is INTEGER kind parameters should 
     * 	have an integer value. For a DOUBLE kind parameter it should
     * 	have a double value. For CHOICE parameter the value is a
     * 	comma separated list of name:value pairs to be presented to the user
     * 	(example: 36BP:error_model_36, 80 BP:error_model_80). 
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * 
     * 	Optional value to limit the minimum value that the user can sepcify for
     * 	INTEGER and DOUBLE type parameters. For other data types this value
     * 	should not be present and if supplied it is ignored.
     * 					
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getMin() {
        return min;
    }

    /**
     * Sets the value of the min property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMin(Double value) {
        this.min = value;
    }

    /**
     * 
     * 	Optional value to limit the maximum value that the user can sepcify for
     * 	INTEGER and DOUBLE type parameters. For other data types this value
     * 	should not be present and if supplied it is ignored.
     * 					
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getMax() {
        return max;
    }

    /**
     * Sets the value of the max property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMax(Double value) {
        this.max = value;
    }

    /**
     * 
     * 	Flag to indicate if the user can change the default value.
     * 	If this parameter is set to false, then the value is 
     * 	displayed to the user but the user cannot edit it. This
     * 	is used to pass mandatory parameters to the application.
     * 					
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isMutable() {
        return mutable;
    }

    /**
     * Sets the value of the mutable property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMutable(Boolean value) {
        this.mutable = value;
    }

    /**
     * 
     * 	Flag to indicate if this parameter should be actually
     * 	shown to the user. Hidden parameters should be used
     * 	sparingly. On one hand side they do reduce clutter
     * 	and unnecessary parameters (that can cause confusion)
     * 	from being displayed to the user. On the other hand side
     * 	don't try to use this option in a sneaky manner as that
     * 	will cause the user to mistrust the program.
     * 					
     * 
     */
    public boolean isHidden() {
        return hidden;
    }

    /**
     * Sets the value of the hidden property.
     * 
     */
    public void setHidden(boolean value) {
        this.hidden = value;
    }

    /**
     * 
     * 	This is a generic description about this parameter.
     * 	If this description contains HTML presentation tags 
     * 	then they must be represented as corresponding XML 
     * 	entities.
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * 
     * 	A short (about 10 words) summary description of this parameter.
     * 	The summary information cannot contain HTML presentation tags.
     * 	The summary information is used to provide the users with 
     * 	succint information about the parameter.
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSummary() {
        return summary;
    }

    /**
     * Sets the value of the summary property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSummary(String value) {
        this.summary = value;
    }

    /**
     * 
     * 	If this attribute is set to true then this parameter is
     * 	interpreted as a top-level controller to enable/disable
     * 	subsequent parameters in the parameter set. Typically
     * 	the first parameter in a parameter set is the controller. 
     * 	Its kind should be BOOLEAN.
     * 				
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isController() {
        if (controller == null) {
            return false;
        } else {
            return controller;
        }
    }

    /**
     * Sets the value of the controller property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setController(Boolean value) {
        this.controller = value;
    }

    /**
     * 
     * 	Each parameter in a parameter set must have a unique name set
     * 	for it. DECAGON's generic parameter handling infrastructure
     * 	conunts on the parmaeter names being unique. If the parameter
     * 	names are not unique then the result of operations performed
     * 	by DECAGON is unsepecified.
     * 				
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

}
