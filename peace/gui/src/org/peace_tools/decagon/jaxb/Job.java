//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.18 at 06:29:58 PM EDT 
//


package org.peace_tools.decagon.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 	This is the top-level element that encapsulates all the necessary
 * 	information to run a job associated with a genomic-assembler or a
 * 	DECAGON software pipeline. A job (synonymous with a PBS job) conists 
 * 	of one or process processes (usually one) that is run on a given 
 * 	server or supercomputing cluster. 
 * 			
 * 
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Job", namespace = "http://www.peace-tools.org/decagon/", propOrder = {
    "resourceFactors",
    "name",
    "description",
    "process",
    "outputFile",
    "progressReporter"
})
public class Job {

    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected ResourceFactors resourceFactors;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected String name;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected String description;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected List<Process> process;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/", required = true)
    protected List<OutputFile> outputFile;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected String progressReporter;
    @XmlAttribute(required = true)
    protected JobKind type;

    /**
     * 
     * 						
     * 	Different genomic-assemblers require different runtimes and use 
     * 	different amounts of memory. This element provides scaling factors 
     * 	that can be used to suggest to the user the maximum amount of runtime
     * 	and memory to request for the job. This value is a suggestion and the
     * 	user can modify it appropriately. The suggestion is based on the 
     * 	the number of cDNA fragments to be assembled and the number of 
     * 	nucleotides to be assembled. The scale factors should be set
     * 	conservatively high -- that is it is it is better to set it to a 
     * 	higher value than a lower value. This information is used for
     * 	submitting jobs on a supercomputing platform that uses a PBS-type
     * 	system for job scheduling.
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link ResourceFactors }
     *     
     */
    public ResourceFactors getResourceFactors() {
        return resourceFactors;
    }

    /**
     * Sets the value of the resourceFactors property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceFactors }
     *     
     */
    public void setResourceFactors(ResourceFactors value) {
        this.resourceFactors = value;
    }

    /**
     * 
     * 						
     * 	A very short (no more than 10 to 12 characters long) name for the job
     * 	that is used when scheduling the job on supercomputing clusters. This
     * 	merely provides the user with convenient information from reviewing job
     * 	queue on a cluster.
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * 
     * 						
     * 	A description about the job to be displayed to the user. The description
     * 	typically provides information about the operations performed by the
     * 	job and the data generated from the job.
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * 
     * 						
     * 	This element provides full information about the sequence of processes
     * 	to be run as part of this job. Processes specified are run serially
     * 	(one after another) assuming each process in the step successfully completes.
     * 	Refer to the details associated with the Process element for additional 
     * 	details about the information associated with each process.
     * 						
     * 					Gets the value of the process property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the process property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProcess().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Process }
     * 
     * 
     */
    public List<Process> getProcess() {
        if (process == null) {
            process = new ArrayList<Process>();
        }
        return this.process;
    }

    /**
     * 
     * 						
     * 	Information about an signficiant output file generated by this 
     * 	process. Typically these files are meaningful to the user for 
     * 	further inspection/processing. Note that only one file in the
     * 	series of jobs/processes must have the isConfigFile attribute
     * 	set to true.
     * 						
     * 					Gets the value of the outputFile property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the outputFile property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOutputFile().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OutputFile }
     * 
     * 
     */
    public List<OutputFile> getOutputFile() {
        if (outputFile == null) {
            outputFile = new ArrayList<OutputFile>();
        }
        return this.outputFile;
    }

    /**
     * 
     * 						
     * 	This optional element can contain a shell script that will be periodically
     * 	(every 30 seconds or so) executed on the remote server (on which the job 
     * 	is running) to determine overall progress of the job. The output from the 
     * 	shell script should be the current progress information in the form:
     * 	<currProg>,<maxProgress>; for example: 5, 100 (indicating 5% of the work
     * 	has been completed). The script can use DECAGON bind variables
     * 	as needed.  An example of a script that reports progress could be
     * 	of the form:
     * 	
     * 	<code><pre>
     * 	#!/bin/bash
     * 	total=`grep -c "^>" src_dna.txt`
     * 	processed=`grep -i "processed: " debug_output.txt | tail -1 | cut -d':' -f2`
     * 	echo $processed, $total
     * 	</pre></code>
     * 						
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProgressReporter() {
        return progressReporter;
    }

    /**
     * Sets the value of the progressReporter property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProgressReporter(String value) {
        this.progressReporter = value;
    }

    /**
     * 
     * 					
     * 	This enumeration defines the different kinds of jobs
     * 	that can be used within a DECAGON pipeline as described
     * 	in the list below:
     * 	
     * 	<table border="0">
     * 	<tr><td>serial</td><td>A single process, single thread on a single compute-node</td></tr>
     * 	<tr><td>multithreaded</td><td>A single process, multiple threads on a compute-node with several cores</td></tr>
     * 	<tr><td>parallel</td><td>Multiple processes on multiple compute nodes</td></tr>
     * 	</table>
     * 	
     * 					
     * 				
     * 
     * @return
     *     possible object is
     *     {@link JobKind }
     *     
     */
    public JobKind getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link JobKind }
     *     
     */
    public void setType(JobKind value) {
        this.type = value;
    }

}
