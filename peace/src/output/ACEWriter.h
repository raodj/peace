#ifndef ACE_WRITER_H
#define ACE_WRITER_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "Component.h"
#include "ContigListener.h"
#include "Contig.h"
#include "EST.h"

#include <fstream>

// Forward declarations to keep the compiler happy
class ESTList;
class AlignmentInfo;

/** An output sub-system component to write contigs generated by a
	genome-assembler in ACE file format.

	<p>This class is a component of the output sub-system. Its
	responsibility is to serialize contigs generated by a
	genome-assembler (namely, any class that implements the Assembler
	interface) into ACE file format.  ACE is a text file format for
	storing genomic information.  The file format has been developed
	for use with the Consed genomic-assembler.  Some basic etails on
	the ACE Format Specification is available at:
	http://en.wikipedia.org/wiki/ACE_file_format</p>

    <p>In general there isn't a whole lot of informaiton available
    baout the ACE file format describing each entry to its full
    detail. The most comprehensive information about ACE format on the
    Internet is at
    http://www.animalgenome.org/bioinfo/resources/manuals/ace.filefmt.html. Consequently,
    we are currently generating a minimal set of entries in ACE file
    format. Here is brief summary of the various entries that is
    generated by this class:

    <ul style="list-style: none;">

    <li> \b AS <i>&lt;number of contigs&gt; &lt;total number of reads in ace file&gt;</i></li>
    <li> \b CO <i>&lt;contig name&gt; &lt;#bases&gt; &lt;#reads&gt;  &lt;#base segments&gt; &lt;U or C&gt;</i></li>
    <li><i>lines of sequence data</i></li>
    
    <li>\b BQ</li>
    <li><i>lines of sequence quality data</i></li>
    
    <li>\b AF <i>&lt;read name&gt; &lt;C or U&gt; &lt;padded start consensus position&gt;</i></li>
    <li>\b BS <i>&lt;start position&gt; &lt;end position&gt; &lt;read name&gt;</i></li>
    
    <li>\b RD <i>&lt;read name&gt; &lt;# of padded bases&gt; &lt;# of read  info items&gt; &lt;# of read tags&gt;</i></li>
    
    <li>\b QA <i>&lt;start&gt; &lt;end&gt; &lt;align start&gt; &lt;align end&gt;</i></li>
    
    <li>\b WA{ <i>&lt;tag type&gt; &lt;program&gt; &lt;YYMMDD:HHMMSS&gt;</i><br/>
    <i>1 or more lines of data</i><br/>
    \b }
    
    </ul>
    
    </p>

	\note This class can only be instantiated by the
	OutputSubSystem. See OutputSubSystem::getACEWriter() method.
*/
class ACEWriter : public Component, ContigListener {
    friend class OutputSubSystem;
public:
    /** The destructor.

        The destructor is merely present to adhere to coding
        conventions.  Currently, this does not have any special tasks
        to perform.
    */
    virtual ~ACEWriter();

    /** Add the set of command line parameters for this component.

        This method is typically invoked by the OutputSubSystem when
        it is being requested for command line arguments.  This method
        adds the \c --output-ace-file option to the set of command
        line arguments that can be used to specify the output file to
        which the ACE output is to be written.
        
        \param[out] argParser The argument parser to which the command
        line arguments for this component are to be added.
    */
    void addCommandLineArguments(ArgParser& argParser);

    /** Initialize the operations of this component by creating a ACE
        file stream to which the alignment information is to be
        written.

        This method is invoked when the OutputSubSystem (that
        logically owns this component) is initialized.  This method
        initializes the estList pointer in this class.  Next, if a
        valid ACE file has been specified then this method creates the
        aceFile output stream to write the the curren contig whenever
        the contigFormed() method is called. 
        
        \return This method returns \c true if initialization was
        successfully completed.  On errors (that is the aceFile or the
        tmpConfigFile streams could not be opened) it returns \c
        false.
    */
    bool initialize();
    
    /** Finish write contig data to a given ACE file.

        <p>This method is invoked after all the contigs have been
        written. Recollect that since the ACEWriter class acts as a
        contig listener it periodically writes the information for
        each contig formed to aceFile.  In order to generate the ACE
        \c AS header at the beginning of the ACE file, initially zeros
        are written to the ACE file (in initialize() method via the
        writeACEHeader() method) as we do not know the actual contig
        count until the end (when this method is called).  This method
        fixes-up this value to the actual contig count.</p>

        <p>Next, it writes the final \c WA entry to the ACE file. The
        \c WA entry merely has some details about PEACE such as:
        version, command-line used, and the timestamp when the file
        was created.</p>

		\note This method performs operations only on the manager
		process. No special operations are needed on worker processes
		as only the manager perform the actual file i/o.
		
		\param[in] context The runtime context from where the shared
		information can be obtained for generating the ACE file.  This
		method does not really use it.
		
        \return If the header is updated successfully, then this
        method returns \c true.  On errors it generates a suitable
        error message (on std::cerr) and returns \c false.
    */
    virtual bool write(RuntimeContext *context);
    
protected: 
    /** The constructor.

        This is the only constructor for this class. The
        constructor(s) are not public to ensure that this class is not
        instantiated directly but only by the friends of this
        component.  Currently, only the OutputSubSystem class can
        instantiate this component.  The constructor does not have any
        special tasks to perform and merely initializes instance
        variables to their default initial value.
    */
    ACEWriter();

    /** Method to intercept contig formation notifications and write
        contig data to file(s).

        This method is called on all parallel processes once a contig
        has been successfully formed by an assembler. The newly formed
        contig is passed in as the parameter. Note that not all
        genomic-assemblers collate all the information on all parallel
        processes.  Consequently, this method coordinates with all the
        parallel processes to obtain necessary contig information and
        write it to the ACE file. Once all the contigs have been
        formed the write() method updates overall counts in the ACE
        header (at the beginning of the file).

        \param[in] assembler The genomic-assembler that has formulated
        the contig. This object is not really used by this method.
        
        \param[in] contig The newly formed contig with partial
        information that is available on the process on which this
        method is invoked.

        \param[in] fullContig If this flag is \c true then the contig
        has full information.  If this flag is \c false then this
        contig has partial information and data from other
        parallel-processes must be fused together to obtain full
        contig information.
        
        \return This method is expected to return \c true if the
        contig has been processed successfully.  On errors this method
        must return \c false.
    */
    bool contigFormed(const Assembler& assembler,
                      const Contig& contig, const bool fullContig);
    
    /** Helper method to get the counts of number of per-cDNA
        alignments at each parallel process.

        This is a utility method that is called from the
        contigFormed() method.  It is used to determine the number of
        alignments objects in the contig at each parallel process.

        \param[in] localCount The local count of number of per-cDNA
        alignments available at this process.
        
        \param[out] globalEntryCounts This vector has a count of
        number of per-cDNA alignments at each parallel process.  The
        MPI-rank of the processes serves as the index into this vector.
        
        \return This method returns the MPI-rank of the process on
        which this method is invoked.
    */
    int getGlobalContigCounts(const int localCount,
                              std::vector<int>& globalEntryCounts);

    /** Helper method to write the top-level \c AS header in the ACE
        file.

        This method is a helper method that is invoked from the
        initialize() and write() method to write the top-level header
        in the ACE file. This method resets the file pointer (of
        aceFile iostream) to the beginning and writes out the values
        of contigCount and readCount instance variables in this class.
        Both of the values are written with a fixed size of 8
        characters so they behave as fixed size values. This makex is
        easier to fix-up the values as needed.

        \return This method returns true if the data was successfully
        written and the file stream is still in a good state after the
        file I/O operations.
    */
    bool writeACEHeader();

    /** Helper method to write the \c AF entries in the ACE file.

        This method is invoked on all parallel processes from the
        write() method. On all processes this method uses the entries
        in the given alignment information to create a large string
        with all the \c AF entries. Next, one of the following two
        operations are performed:

        <ul>

        <li>On manager process the \c AF entries are written to the
        aceFile. Next, the manager process receives \c AF entries from
        each worker-process and writes the data to disk.</li>

        <li>On worker-processes the \c AF entries are sent to the
        manager process.</li>

        </ul>

        \param[in] aiList The local alignment information on this
        local process.

        \param[in] aiCounts The counts of number of alignment entries
        on each parallel process.  This vector is used by the manager
        process to obtain information from various workers.

        \param[in] isManager If this flag is \c true then this process
        is being invoked on the manager process.  Otherwise this
        method is being invoked on a worker process.

        \return This method returns \c true if the entries were
        successfully written to the ACE file. On errors, this method
        returns \c false.        
    */
    bool writeAFEntries(const AlignmentInfoList& aiList,
                        const std::vector<int>& aiCounts,
                        const bool isManager);

    /** Helper method to write the \c BS entries in the ACE file.

        This method is invoked only on the manager processes from the
        write() method. This method uses the given base segment
        information to write \c BS entries in the ACE file.

        \note Currently, this method assumes that all the necessary
        information is assumed to be available on the manager
        process. This may not be the case and this method may have to
        coordinate with various worker processes to obtain the
        necessary information.

        \return This method returns \c true if the entries were
        successfully written to the ACE file. On errors, this method
        returns \c false.
    */
    bool writeBSEntries(const BaseSegmentInfoList& bsList);

    /** Helper method to write the \c RF entries in the ACE file.

        This method is invoked on all parallel processes from the
        contigFormed() method. On all processes this method uses the
        entries in the given alignment information to create
        individual \c RD entries for each read via the
        writeRDAlignedRead() method. For each read, one of the
        following two operations are performed:

        <ul>

        <li>On manager process the entries are written to the
        aceFile.

        <li>On worker processes the \c RD entries are sent to the
        manager process.</li>

        </ul>

        Next, the manager process receives \c RD entries from each
        worker process and writes the data to disk.</li>

        \note The order in which \c RD entries are written to the ACE
        file is not deterministic to ensure good performance.
        
        \param[in] aiList The local alignment information on this
        local process.

        \param[in] readCount The total number of alignment entries
        summed up across all the parallel process.  This number is
        used by the manager to determine the number of \c RD entries
        to expect from various parallel processes.

        \param[in] isManager If this flag is \c true then this process
        is being invoked on the manager process.  Otherwise this
        method is being invoked on a worker process.

        \return This method returns \c true if the entries were
        successfully written to the ACE file. On errors, this method
        returns \c false.        
    */
    bool writeRDEntries(const AlignmentInfoList& aiList,
                        const int readCount, const bool isManager);
    
    /** Helper method to obtain the aligned sequence for creating
        entries in an ACE file.

        <p>In a ACE file, the sequences associated with the RD entries
        are the aligned sequences and not the raw nucleotide
        sequences. This is a helper method that uses the raw cDNA
        sequence and the CIGAR string to generate the aligned
        sequence.  The aligned sequence is written to the supplied
        output stream. In addition, the necessary \c QA entry in the
        following form is also written to the supplied output
        stream:</p>
        
        \b QA <i>&lt;qual clipping start&gt; &lt;qual clipping end&gt; &lt;align clipping start&gt; &lt;align clipping end&gt;</i>

        \note The method interprets hard clipping in CIGAR string
        (indicated by entry of the \c H3) as quality clippings and
        soft clippings (indicated by entry \c S3) as soft clippings
        created by the assembler.
        
        \param[out] os The output stream to which the aligned sequence
        is to be written.

        \param[in] info The information in the FASTA header associated
        with the cDNA fragment for which the RD entry is to be written
        by this method.
        
        \param[in] seq The raw nucleotide source sequence for the cDNA
        that is to be used to generate the aligned sequence.

        \param[in] cigarStr The CIGAR string generated by the
        assembler for this read.  The CIGAR string contains the
        necessary information to format the string.

        \return This method returns \c true if the sequence was
        successfully processed and necessary entries were written to
        the supplied output stream.  On errors this method returns \c
        false.
    */
    bool writeRDAlignedRead(std::ostream& os, const std::string& info,
                            const std::string& seq,
                            const std::string& cigarStr) const;
    
private:
    /** The name of the ACE file to which the contig data is to be
        written.

        This instance variable contains the path (may it be relative
        or absolute) and name of the file to which the ACE data is to
        be written when the write() method in this class is invoked.
    */
    std::string aceFileName;

    /** The output file stream to which the final aligned data is to
        be written.

        This member is the output ACE file to which the data is to be
        written.  It is opened (if aceFileName is not an empty string)
        in the initialize() method and is closed in the write()
        method.  This file is opened in read-write mode to ease fixup
        of number of contigs that is present at the beginning of the
        ACE file. See write() method for some more details.
    */
    std::fstream aceFile;

    /** Instance variable to track the number of contigs in the ACE
        file.

        This value is required to generate the ACE \c AS header at the
        beginning of the ACE file. Initially zeros are written to the
        ACE file (in initialize() method) as we do not know the actual
        contig count until the end (when the write() method is
        called). However, zeros are written to serve as place holders
        in the generated text file. The write() method fixes-up this
        value to the actual contig count. This value is incremented in
        the contigFormed() method.

        @see writeACEHeader()
    */
    int contigCount;

    /** Instance variable to track the number of reads in the ACE
        file.

        This value is required to generate the ACE \c AS header at the
        beginning of the ACE file. Initially zeros are written to the
        ACE file (in initialize() method) as we do not know the actual
        contig count until the end (when the finalize() method is
        called). However, zeros are written to serve as place holders
        in the generated text file. The finalize() method fixes-up
        this value to the actual contig count.  This value is updated
        in the contigFormed() method.

        @see writeACEHeader()        
    */
    int readCount;
    
    /** A convenience reference to the shared list of cDNA fragments
        being processed.

        This member holds a convenient pointer to the shared list of
        cDNA fragments.  This list is used to create the necessary
        information for each per-cDNA alignment information in a ACE
        file.  This list is set by the initialize() method.
    */
    ESTList* estList;
};

#endif
