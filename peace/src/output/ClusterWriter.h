#ifndef CLUSTER_WRITER_H
#define CLUSTER_WRITER_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "Component.h"

// Forward declarations to keep compiler fast and happy
class ClusterMaker;
class ESTList;
class RuntimeContext;

/** An output sub-system component to write Minimum Spanning Tree
	(MST) data.

	This class is a component of the output sub-system. Its
	responsibility is to serialize the Clusters generated by a
	ClusterMaker in various formats.  This class permits serialization
	of clusters either to a given data file or to standard output.

	\note This class can only be instantiated by the
	OutputSubSystem. See OutputSubSystem::getClusterWriter() method.
*/
class ClusterWriter : public Component {
    friend class OutputSubSystem;
public:
    /** The destructor.

        The destructor is merely present to adhere to coding
        conventions.  Currently, this does not have any special tasks
        to perform.
    */
    virtual ~ClusterWriter();

    /** Add the set of command line parameters for this component.

        This method is typically invoked by the OutputSubSystem when
        it is being requested for command line arguments.  This method
        adds the \c --output-mst-file option to the set of command
        line arguments that can be used to further customize the
        operations of this component.
        
        \param[out] argParser The argument parser to which the command
        line arguments for this component are to be added.
    */
    void addCommandLineArguments(ArgParser& argParser);

    /** Write the given clustering data.

        This method must be used to appropriately serialize the
        clustering data as directed by the user (through command-line
        arguments).

		\param[in] context The runtime context from where the shared
		ClusterMaker and ESTList objects are obtained for generating
		the necessary clustering information.
		
        \return If the clusters were written successfully, then this
        method returns \c true.  On errors it generates a suitable
        error message (on std::cerr) and returns \c false.
    */
    virtual bool write(RuntimeContext *context);
    
protected: 
    /** The constructor.

        This is the only constructor for this class. The
        constructor(s) are not public to ensure that this class is not
        instantiated directly but only by the friends of this
        component.  Currently, only the OutputSubSystem class can
        instantiate this component.  The constructor does not have any
        special tasks to perform and merely initializes instance
        variables to their default initial value.
    */
    ClusterWriter();

private:
    /** The name of the file to which the clusters are to be written.

        This instance variable contains the path (may it be relative
        or absolute) and name of the file to which the clusters are to
        be written when the write() method in this class is invoked.
    */
    std::string clusterFileName;

    /** Command line option to print a pretty cluster tree.

        If this member variable is \c true, then this class prints a
        pretty ASCII tree with the cluster information By default this
        variable is initialized to \c false.  However, the value can
        be changed by the user through command line argument \c
        --pretty-print.  The change of value occurs because entries
        are added to the global argument parser via the
        addCommandLineArguments() method.
    */
    bool prettyPrint;

    /** Command line option to print the cluster tree for PEACE GUI.

        If this member variable is \c true, then this class prints the
		ClusterTree in a format that is processible by the GUI. By
		default this variable is initialized to \c false.  However,
		the value can be changed by the user through command line
		argument \c --gui-print.
    */
    bool guiPrint;

    /** Command line option to print flat cluster information to ease
		processing into different formats.

        If this member variable is \c true, then this class prints the
		ClusterTree in a format that has more information in a CSV
		format.  By default this variable is initialized to \c false.
		However, the value can be changed by the user through command
		line argument \c --flat-print.
    */
    bool flatPrint;
};

#endif
