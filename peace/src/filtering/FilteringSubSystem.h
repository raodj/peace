#ifndef FILTERING_SUB_SYSTEM_H
#define FILTERING_SUB_SYSTEM_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "SubSystem.h"
#include "FilterChain.h"
#include "ArgParser.h"

/** A major sub-system of PEACE that handles filtering cDNA fragments
    that typically degrade quality of clustering and/or assembly.

	<p>As the name suggests, this class represents the filtering
	sub-system of PEACE.  It serves as the central point for
	performing various operations to filter out cDNA fragments that
	may degrade the quality of clustering and/or assembly generated by
	PEACE.  The filtering sub-system is run prior to clustering and
	assembly tasks.</p>

	<p>The filtering sub-system consists of a collection of Filter
	(each Filter object is deemed as a sub-component of this
	subsystem) classes organized in to a FilterChain.  Each Filter
	performs a specific type of filtering. The FilterChain ties the
	filters together to yield more sophisticated filtering
	mechanism. The filtering can be completely suppressed by
	specifying \c --filters \c null command-line argument.</p>
*/
class FilteringSubSystem : public SubSystem {
public:
    /** The constructor.

        The constructor does not have very many tasks to perform other
        than to appropirately initialize member objects.  It is
        present to adhere to coding conventions and serve as a place
        holder for potential future enhancements.
    */
    FilteringSubSystem();
    
    /** Determine the type of sub-system represented by the derived
        class.

        This method can be used to determine the type of sub-system
        implemented by an object of this type. This method overrides
        the pure-virtual declaration in the base-class as mandated by
        the base class API.

        \return A valid enumeration constant indicating the type of
        the sub-system represented by this object.  This method always
        returns SubSystem::FILTERING.
    */
    SubSystem::SubSystemKind getKind() const { return SubSystem::FILTERING; }

    /** Add the initial set of command line parameters for this
        sub-system.

        This method is invoked by the core system of PEACE just after
        the sub-system has been instantiated.  This method is expected
        to add the top-level command line arguments that it requires
        for its operation.  Accordingly, this method adds parameters
        for specifying the filter list to be used for the current run
        of PEACE.  The filter list is specified as a space separated
        list of values.
        
        \param[out] argParser The argument parser to which the basic
        command line arguments for this sub-system are to be added.
        This is the same command line parser that will be passed to
        the initialize() method.
    */
    void addCommandLineArguments(ArgParser& argParser);

    /** Method to initialize sub-system, create filters, and
        add them to a filter chain.

        This method is invoked after the initial round of command line
        processing has been completed by the core class.  As per the
        base class API description (see SubSystem::initialize() method
        documentation for general API contract for this method) this
        method performs the following tasks:

        <ol>

        <li>It creates the filters specified in the command line
        argument (ignoring the \c null filter name) and adds them to
        the FilterList component in this subsystem.</li>

        </ol>

        \param[in,out] argParser The argument parser to which the
        additional command line arguments for this sub-system are to
        be added.  This is the same command line parser that was
        passed to the addCommandLineArguments() method.

        \return This method returns zero on success.  If errors occur
        during initialization then this method must return an non-zero
        error code.
    */
    int initializeSubSystem(ArgParser& argParser);

    /** Invoked to permit the sub-system to perform its core tasks.

        This method is invoked once all the sub-systems have been
        successfully initialized.  This method performs the following
        tasks for the filtering sub-system:

        <ol>

        <li>First the filters in the chain are initialized via a call
        to the FilterChain::initialize() method.  This method
        initializes each Filter created and added to it in the
        initialize() method.</li>

        <li>If initialization of filters proceeds successfully, this
        method calls FilterChain::run() that applies the filters to
        all the cDNA fragments in a distributed manner (that is each
        parallel instance handles a subset of the fragments).  Once
        the distributed filtering is done the list of filtered cDNA
        fragments are exchanged between the various distributed
        process.</li>

        <li>Next, the FilterChain::finalize() method is invoked to
        ensure that any dummy fragments added by the filters are
        cleared out and the filters wind-down their operations.</li>
        
        </ol>

        \return As per the API contract, this method currently returns
        zero if all the processing was successfully completed.
        On errors it returns a non-zero error code.
    */
    int run();

    /** The destructor.
        
        The destructor for this class.  Currently the destructor has
        no special tasks to perform (but is present to adhere to
        coding conventions).
    */
    virtual ~FilteringSubSystem();
	
protected:
    /** A dummy operator=
        
        The operator=() is supressed for this class as it has members
        whose value is set when the object is created.  These values
        cannot be changed during the lifetime of this object.
        
        \param[in] src The source object from where data is to be
        copied.  Currently this value is ignored.
        
        \return Reference to this.
    */
    FilteringSubSystem& operator=(const FilteringSubSystem& src);
    
private:
    /** Component to handle the chain of filters specified by the
        user.

        This component is part of the FilteringSubSystem. It deals
        with managing a list of Filter objects in the order specified
        by the user.
    */
    FilterChain filterChain;

    /** The command-line argument indicating the list and order in
        which filters are to be applied.

        This instance variable contains the command-line argument
        specified by the user for the \c --filter command-line
        parameter.  This list maintains the entries in the same order
        in which the user specified them. This list is used by the
        initialize() method to instantiate the corresponding Filter
        objects via the FilterFactory.
    */
    ArgParser::StringList filterNames;
};

#endif
