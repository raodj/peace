#ifndef ALIGNMENT_INFO_H
#define ALIGNMENT_INFO_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "EST.h"

/** \file AlignmentInfo.h

    \brief Class to encapsulate alignment information that is
    generated, maintained, and used by various classes constituting
    the baton analyzer.

    This class essentially contains the set of information that is
    mainained for the assembly generated by the baton assembler.
    Refer to the class and method documentation for details on the
    data encapsulated by this class.  This file also provides a
    convenience type definition for the AlignmentInfoList data type.
*/

/** Class to encapsulate alignment information.

    This class is primarily used to encapsulate alignment information
    pertaining to a specific fragment.  Note that this class contains
    only the alignment information and not the nucleotide sequence
    associated with the actual fragment (the nucleotide sequence can
    be obtained via the various API methods associated with the EST
    class).  Consequently, this class is relatively straightforward.
    This class is used by several other classes constituting the baton
    assembler.  Therefore, it has been refactored into its own
    independent class.
    
    \see BatonAnalyzer
    \see ConsensusMaker
    \see BatonAssembler
*/
class AlignmentInfo {
public:
    /** The primary constructor that constitutes the main API for this
        class.

        Ideally the instance variables in this class would all be
        constant because this class is meant to contain immutable data
        --- that is, once the data set we never want to change them.
        However, objects containing constant instance variables, don't
        play well with many of the STL container classes.
        Consequently, this class is designed to permit setting values
        via the constructor and once an object is created, its values
        cannot be changed as there are no setter methods in this
        class.

        \param[in] estIdx The index (zero based) of the EST for which
        an alignment information object is being created.  This value
        must be in the range 0 \f$ \le \f$ estIdx &lt
        EST::getSequenceCount().

        \param[in] refESTIdx The index (zero based) of the reference
        EST with which the fragment at estIdx index position has been
        aligned.  for which an alignment information object is being
        created.  This value must be in the range 0 \f$ \le \f$
        estIdx &lt EST::getSequenceCount().

        \param[out] relOffset The relative (zero-based) offset where
        the fragment associated with estIdx must be positioned with
        respect to the reference fragment at index refESTidx.  This
        value can be positive or negative.

        \param[out] alignScore The alignment score (for the best
        alignment) associated with the alignment between \c estIdx and
        the reference sequence at \c refESTidx respectively.

        \param[out] revCompFlag This parameter is set to \c true if
        the alignment was accomplished with the reverse complement
        representation of the estIdx.  If the alignment is to be done
        with the normal sequence, then this parameter is set to \c
        false.
    */
    AlignmentInfo(const int estIdx, const int refESTIdx, const int relOffset,
                  const int alignScore, const bool revCompFlag);

	/** Copy constructor.

		This is a convenience copy constructor that is used to copy
		the information from a given source alignment information
		object to a newly created one.

		\param[in] src The source alignment information object from
		where the data for this object is to be copied.
	 */
    AlignmentInfo(const AlignmentInfo& src) :
        estIndex(src.estIndex), refESTindex(src.refESTindex),
        alignPos(src.alignPos), score(src.score),
        rcAlignment(src.rcAlignment) {}

    /** A default constructor.

        The default constructor essentially initializes all the
        instance variables to some initial invalid values. The default
        constructor is needed so that this class can be conveniently
        used with various STL containers (such as: std::vector).
    */
    AlignmentInfo() : estIndex(-1), refESTindex(-1), alignPos(0), score(-1),
                      rcAlignment(false) {}

    /** Obtain the index (or ID) of the fragment for which this object
        contains alignment information.

        This method can be used to obtain the index of the fragment
        for which this object contains the necessary alignment data.
        This value can be used to obtain the actual nucleotide
        sequence via a call to EST::getEST(ai.getESTIndex()).  This
        method essentially returns the value that was set when this
        object was created.

        \return This method returns the index into the list of
        fragments maintained by the EST class.  For valid alignment
        objects, this value is in the range 0 \f$ \le \f$ \e retVal
        &lt EST::getSequenceCount().
    */
    inline int getESTIndex() const { return estIndex; }

    /** Obtain the index of the parent or reference fragment with
        which the alignment was determined.

        The alignment information for fragments is determined with
        respect to another reference fragment.  For the first (or
        root) fragment, this value is -1.  All other fragments have a
        valid reference fragment index.  This value can be used to
        obtain the actual reference nucleotide sequence via a call to
        EST::getEST(ai.getRefESTIndex()).  This method essentially
        returns the value that was set when this object was created.

        \return This method returns the index into the list of
        fragments maintained by the EST class.  For valid alignment
        objects, this value is in the range 0 \f$ \le \f$ \e retVal
        &lt EST::getSequenceCount().
    */
    inline int getRefESTIndex() const { return refESTindex; }

    /** Obtain the relative position of this fragment in the contig
        (aka consensus sequence).

        This method can be used to obtain the relative (with respect
        to the reference fragment) position of the fragment in the
        conting being formed.  This value can be positive or negative.
        The position of the root (or first) fragment is always zero.

        \return The alignment position of the fragment (associated
        with this alignment information object) in the contig to be
        formed.
    */
    inline int getAlignmentPos() const { return alignPos; }

    /** Obtain the score or strength of the alignment between this
        fragment and its reference.

        This method can be used to determine the score between the
        fragment (whose index is returned by getESTIndex() method) and
        the reference fragment (whose index is returned by the
        getRefESTIndex() method) in this alignment info.

        \return The score between the given fragment and its reference
        fragment.
    */
    inline int getScore() const { return score; }

    /** Determine if the fragment is best aligned via its reverse
        complementary sequence.

        This method can be used to determine if the regular or the
        reverse-complementary representation of the nucleotide
        sequence associated with fragment (whose index is returned by
        getESTIndex() method) must be used for building the consensus
        sequence.  For example, if the nucleotide sequence is \c
        AATGCC and this method returns \c false, then the reverse
        complementary sequence \c GGCATT must be used to construct the
        final consensus sequence.
        
        \return This method returns \c true if the resulting consensus
        sequence must use the reverse complementary representation of
        the fragment.  Otherwise this method returns \c false.
     */
    inline bool isRCAlignment() const { return rcAlignment; }

    /** Helper method to determine the relative index position of the
        right-most nucleotide in the final consensus sequence.

        This method is a convenience helper method that is used to
        determine the index position of the right-most nucleotide in
        the final consensus sequence.  This method uses the length of
        the sequence and its alignment position to determine the
        relative index position.

        \return This method returns the relative index position of the
        right-most nucleotide in the final consensus sequence.  This
        value can be negative.
    */
    inline int getRightMostNtPos() const {
        return alignPos + EST::getEST(estIndex)->getSequenceLength();
    }
    
protected:
    // Currently this class does not have any protected members
    
private:
    /** The index (or ID) of the fragment whose alignment information
        is contained in this object.
        
        This instance variable tracks the index of the fragment for
        which this object contains the necessary alignment data.  This
        value can be used to obtain the actual nucleotide sequence via
        a call to EST::getEST(ai.getESTIndex()).  Typically, this value
        is set in the constructor and is never changed during the life
        time of this class.
    */
    int estIndex;

    /** The reference fragment with respect to which the alignment
        information was computed.

        The alignment information for fragments is determined with
        respect to another reference fragment.  This instance variable
        maintains the index of the reference fragment. For the first
        (or root) fragment, this value is -1.  All other fragments
        have a valid reference fragment index.  This value can be used
        to obtain the actual reference nucleotide sequence via a call
        to EST::getEST(ai.getRefESTIndex()).  This method essentially
        returns the value that was set when this object was created.
    */
    int refESTindex;

    /** The relative (with respect to reference) alignment position
        for the fragment within a consensus sequence.

        This instance variable is used to maintain the relative (with
        respect to the reference fragment) position of the fragment in
        the conting being formed.  This value can be positive or
        negative.  The position of the root (or first) fragment is
        always zero.
    */
    int alignPos;

    /** Tthe score or strength of the alignment between this fragment
        and its reference

        This instance variable holds the score between the fragment
        (whose index is returned by getESTIndex() method) and the
        reference fragment (whose index is returned by the
        getRefESTIndex() method) in this alignment info.
    */
    int score;

    /** Flag to indicate of regular or reverse-complement sequence
        must be used for building consensus sequence.

        This flag contains \c true if the resulting consensus sequence
        must use the reverse complementary representation of the
        fragment obtained via a call to EST::getEST(ai.getESTIndex()).
        If the regular nucleotide sequence is to be used, then this
        flag is set to \c false.
    */
    bool rcAlignment;
};


/** \typedef std::vector<AlignmentInfo> AlignmentInfoList

    \brief A vector that contains a list of AlignmentInfo objects.

    This typedef provides a convenient short cut to refer to a vector
    that is used to hold a list of AlignmentInfo objects.  This vector
    is used in more than one spot in the code. Consequently, it has
    been defined here to serve as a common data structure.
*/
typedef std::vector<AlignmentInfo> AlignmentInfoList;

#endif
