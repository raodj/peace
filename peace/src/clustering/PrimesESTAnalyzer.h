#ifndef PRIMES_EST_ANALYZER_H
#define PRIMES_EST_ANALYZER_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@miamiOH.edu
//
//---------------------------------------------------------------------

#include "FWAnalyzer.h"
#include "PrimesHelper.h"
#include "Utilities.h"

// Forward declarations
class HeuristicChain;
class ESTList;
class EST;

class PrimesESTAnalyzer : public FWAnalyzer, PrimesHelper {
    friend class ESTAnalyzerFactory;
public:
    /** Add valid command line arguments for this analyzer.

        This method overrides the base class implementation to add
        additional command-line options supported by this analyzer.

        \note Derived EST analyzer classes may override this method to
        display help for their custom command line arguments.  When
        this method is overridden don't forget to call the
        corresponding base class implementation to add common options.
        
        \param[out] argParser The argument parser to which the command
        line arguments for this component are to be added.
    */
    virtual void addCommandLineArguments(ArgParser& argParser) override;

    /** Method to begin EST analysis.

        <p>This method is invoked invoked just before commencement of
        EST analysis.  This method computes the k-dimensonal primes
        features for all the subset of reads managed by this parallel
        process. </p>
        
        \note When derived classes override this method, they must
        call the base class implementation to ensure that general
        initialization is performed.  Furthermore, call the base-class
        implementation only if the isInitialized() method returns \c
        false (to avoid redundant initializations).
        
        \return This method returns \c true if initialization was
        successfully completed.  On errors it returns \c false.
    */
    virtual bool initialize() override;

    /** Set the reference EST for analysis.

        This method is invoked just before a batch of ESTs are
        analyzed via a call to the analyze(EST *) method.  This method
        currently saves the k-dimensional primes features in the
        refFeatures vector in this class.

        \param[in] est A pointer to an immutable EST object to be used
        as the reference.  The reference EST will be subsequently
        analyzed with a number of other ESTs via the analyze() method.

        \return This method returns \c true if the estIdx was within
        the given range of values.  Otherwise this method returns a
        non-zero value as the error code.
    */
    virtual int setReferenceEST(const EST* est) override;

protected:
    /** Analyze and obtain a distance metric.
        
        This method can be used to compare a given EST with the
        reference EST (set via the call to the setReferenceEST())
        method.

        \param[in] otherEST Pointer to the EST object with which the
        reference EST is to be compared.

        \return This method returns the Euclidean distance value
        between the k-dimensional primes feature or reference and
        otherEST.
    */
    virtual float getMetric(const EST* otherEST) override;

    /** Method to compare two metrics generated by this class.

        This method provides the interface for comparing metrics
        generated by this ESTAnalyzer when comparing two different
        ESTs.  This method returns \c true if \c metric1 is
        comparatively better than or equal to \c metric2.

        \note As per the ESTAnalyzer API requirements, EST analyzers
        that are based on distance measures (such as this primes
        analyzer) \b must override this method.
        
        \param[in] metric1 The first metric to be compared against.

        \param[in] metric2 The second metric to be compared against.
        
        \return This method returns \c true if \c metric1 is
        comparatively better than \c metric2.
    */
    bool compareMetrics(const float metric1, const float metric2) const override
    { return (metric1 < metric2); }

    /** Obtain an invalid (or the worst) metric generated by this
        analyzer.
        
        This method can be used to obtain an invalid metric value for
        this analyzer.  This value can be used to initialize metric
        values.
        
        \note Derived distance-based metric classes (such as this
        primes analyzer) \b must override this method to provide a
        suitable value.
        
        \return This method returns an invalid (or the worst) metric
        of 1e7 for this EST analyzer.
    */
    inline float getInvalidMetric() const override {
        return 1e7;
    }
    
    /** Determine if this EST analyzer provides distance metrics or
        similarity metrics.
        
        This method can be used to determine if this EST analyzer
        provides distance metrics or similarity metrics.

        \return This method returns \c true to indicate that this EST
        analyzer operates using distance metrics.
    */
    bool isDistanceMetric() const override { return true; }

private:
    /* The default constructor for this class.
       
       The default constructor for this class.  The constructor is
       made private so that this class cannot be directly
       instantiated.  However, since the ESTAnalyzerFactory is a
       friend of this class; therefore it can instantiate this primes
       analyzer.  Accordingly, the ESTAnalyzerFactory::create() method
       must be used to instantiate this class.
    */
    PrimesESTAnalyzer();

private:
    /** The number of dimensions (aka features) to be used by this
        primes-based analyzer.
        
        The instance variable tracks the number of features to be
        extracted for comparing two sequences.  This value is set via
        \c --pri-anal-features command-line argument.  The default value is
        arbitrarily set to 4.
    */
    int numFeatures;

    /** The prime number to be used for 'A' and 'T' nucleotides

        This isntance variable serves to hold the prime number to be
        used for generating the score for 'A' and 'T' base pair.  This
        value is set via \c --pri-anal-at command-line argument.  The
        default value is set to 71.
    */
    int atPrime;

    /** The prime number to be used for 'C' and 'G' nucleotides

        This instance variable serves to hold the prime number to be
        used for generating the score for 'C' and 'G' base pair.  This
        value is set via \c --pri-heur-cg command-line argument.  The
        default value is set to 113.
    */    
    int cgPrime;

    /** The distance threshold to determine if 2 sequences are
        sufficiently similar to warrant further analysis.

        This instance variable serves to hold a threshold value to be
        used to determine if two sequences are sufficiently similar.
        This value is set via \c --pri-heur-thresh command-line
        argument.  The default value is set to -1 where in the
        distance threshold is computed.
    */
    float distThresh;

    /** An optional word length based on which position-weighted
        primes-based features are computed and used by this heuristic.
        If this value is -1, then weighed features are not used.  Use
        the \c --pri-heur-wordLen command-line argument to set this
        parameter.
    */
    int wordLen;

    /** The prime-numbers based features computed for the reference
        EST setup for this heuristic.  This value is computed in the
        setReferenceEST method in this class.
    */
    FloatVec refFeatures;
};

#endif
