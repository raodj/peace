#ifndef MST_NODE_H
#define MST_NODE_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include <iostream>

/** A simple class to represent a MSTNode.

    This inner class is used to represent a node in the MST.  A
    MSTNode contains the information about each EST added to the MST
    as detailed below.  Ecapsulation of the data into a single Node
    class eases creation and manipulation of the MST.

    A MSTNode encapsulates the following information about each node
    in a MST:

    <ul>

    <li>\c parentIdx : (\c int) The zero-based index of the parent
    EST.  If a node has no parent (it is the root of the MST) then
    this value is set to -1.  The \c parentIdx is an offset into the
    list of ESTs returned by EST::getESTList() method. </li>

    <li>\c estIdx : (\c int) The zero-based index of the EST that a
    given MST node represents.  This value is the index of the
    corresponding EST in the list of ESTs returned by
    EST::getESTList() method. </li>

    <li> \c metric : (\c float) The similarity/distance metric
    generated by a given EST analyzer indicating the relationship
    between this node and its parent node.</li>
    
    <li> \c alignmentMetric : (\c int) The alignment metric generated
    by a given EST analyzer indicating alignment relationship between
    this node and its parent node.</li>
    
    </ul>    
*/
class MSTNode {
    // Insertion operator to make dumping MSTNode for debugging easier.
    friend std::ostream& operator<<(std::ostream&, const MSTNode&);
public:
    /** A default constructor.
        
        A default constructor is needed by STL for performing
        various operations.  The default constructor merely sets
        all the members to an invalid value (-1).
    */
    inline MSTNode() : parentIdx(-1), estIdx(-1), metric(-1),
                       alignmentMetric(0) {}
    
    /** A convenience constructor to create a MSTNode.
        
        This constructor provides a convenient mechanism to create
        and initialize an MSTNode object with necessary
        information.
        
        \param[in] parentIndex The index of the parent EST for
        this Node.  If a parent does not exist, then this value
        should be -1.
        
        \param[in] estIndex The index of the EST.  This value must
        be the index of the corresponding EST in the list of ESTs
        returned by EST::getESTList() method.
        
        \param[in] nodeMetric The similarity/distance metric between
        this EST and its parent EST.

        \param[in] alignment The alignment metric generated by a given
        EST analyzer indicating some of the alignment relationship
        between this node and its parent node.
    */
    inline MSTNode(const int parentIndex, const int estIndex,
                   const float nodeMetric, const int alignment = 0) :
        parentIdx(parentIndex), estIdx(estIndex),
        metric(nodeMetric), alignmentMetric(alignment) {}

    /** Method to write the node information to an output stream.

        This method can be used to serialize the information in this
        node to a given output stream (or file).  The data is written
        in the following comma format:

        <parentESTidx>, <ESTidx>, <metric>

        \param[out] os The output stream to which the data is to be
        written.

        \param[in] addAlignment If this flag is \c true, then this
        method also serializes the alignment metric value associated
        with this node.
    */
    void serialize(std::ostream& os, const bool addAlignment) const;

    /** Returns the FASTA header corresponding to the EST for this
	node.

	This function obtains the EST corresponding to the ESTidx
	value stored in this node via the EST::getEST() method and
	then returns the information associated with the EST. The
	information about the EST is determined via the EST::getInfo()
	method.

	\return The FASTA header associated with the given EST.  If no
	information is available this method returns an empty string.
     */
    std::string getESTInfo() const;
    
    /** Method to read the node information to an input stream.

        This method can be used to deserialize the information for
        this node from a given input stream (or file) that was
        previous generated through a successful call to the
        serialize() method.  If the first character in the line is a
        "#" (pound character) then this method ignores the line and
        proceeds to process the next one.

        The data read is assumed to be in the the following comma
        separated format:

        <parentESTidx>, <ESTidx>, <metric>

        \param[inout] is The input stream from which the data is to be
        written.

        \param[out] node The node that must be populated with the data
        from the MST file.

        \param[out] haveAlignment If the entry deserialized by this
        method had alignment data then this parameters is set to \c
        true. Otherwise this parameter is set to \c false.  Note that
        the value is updated only if a valid line was successfully
        read.
        
        \return This method returns 0 if the data for the node was
        successfully read.  It returns -1 on EOF.  On errors, it
        returns a positive, non-zero value.
    */
    static int deSerialize(std::istream& is, MSTNode& node,
                           bool& haveAlignment);
    
    /** Returns the metric value set for this node.

        This method returns the metric value for this node when the
        node was instantiated.

        \return The metric value set for this node.
    */
    inline float getMetric() const { return metric; }

    /** Returns the distance metric value set for this node.

        This method returns the distance metric value for this node
        when the node was instantiated.
        
        \return The distance metric value set for this node.
    */
    inline int getAlignmentMetric() const { return alignmentMetric; }

	/** Returns the index of the EST that is set for this node.

		This method returns the index of the EST that was set when
		this node was created.

		\return The index of the EST set for this node.
	*/
	inline int getESTIdx() const { return estIdx; }
	
    /** The zero-based index of the parent EST.  If a node has no
        parent (it is the root of the MST) then this value is set
        to -1.  The \c parentIdx is an offset into the list of
        ESTs returned by EST::getESTList() method.
    */
    int parentIdx;
    
    /** The zero-based index of the EST that a given MST node
        represents.  This value is the index of the corresponding
        EST in the list of ESTs returned by EST::getESTList()
        method.
    */
    int estIdx;
    
    /** The similarity/distance metric generated by a given EST
        analyzer indicating the relationship between this node and its
        parent node.
    */
    float metric;

    /** The alignment metric generated by a given EST analyzer
        indicating some of the alignment relationship between this
        node and its parent node.
    */
    int alignmentMetric;
};

/** \func operator<<

    Insertion operator to stream MSTNode information to a given output
    stream.  This method provides a convenient mechanism to dump
    MSTNode information for debugging purposes.
*/
extern std::ostream& operator<<(std::ostream&, const MSTNode&);

#endif
