#ifndef MST_NODE_H
#define MST_NODE_H

//---------------------------------------------------------------------------
//
// Copyright (c) Miami University, Oxford, OHIO.
// All rights reserved.
//
// Miami University (MU) makes no representations or warranties about
// the suitability of the software, either express or implied,
// including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  MU shall not be liable for any damages suffered
// by licensee as a result of using, result of using, modifying or
// distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@muohio.edu
//
//---------------------------------------------------------------------------

#include <iostream>

/** A simple class to represent a MSTNode.

    This inner class is used to represent a node in the MST.  A
    MSTNode contains the information about each EST added to the MST
    as detailed below.  Ecapsulation of the data into a single Node
    class eases creation and manipulation of the MST.

    A MSTNode encapsulates the following information about each node
    in a MST:

    <ul>

    <li>\c parentIdx : (\c int) The zero-based index of the parent
    EST.  If a node has no parent (it is the root of the MST) then
    this value is set to -1.  The \c parentIdx is an offset into the
    list of ESTs returned by EST::getESTList() method. </li>

    <li>\c estIdx : (\c int) The zero-based index of the EST that a
    given MST node represents.  This value is the index of the
    corresponding EST in the list of ESTs returned by
    EST::getESTList() method. </li>

    <li> \c similarity : (\c float) The similarity metric generated by
    a given EST analyzer indicating the similarity between this node
    and its parent node. </li>

    </ul>    
*/
class MSTNode {
    // Insertion operator to make dumping MSTNode for debugging easier.
    friend std::ostream& operator<<(std::ostream&, const MSTNode&);
public:
    /** A default constructor.
        
        A default constructor is needed by STL for performing
        various operations.  The default constructor merely sets
        all the members to an invalid value (-1).
    */
    inline MSTNode() : parentIdx(-1), estIdx(-1), similarity(-1) {}
    
    /** A convenience constructor to create a MSTNode.
        
        This constructor provides a convenient mechanism to create
        and initialize an MSTNode object with necessary
        information.
        
        \param[in] parentIndex The index of the parent EST for
        this Node.  If a parent does not exist, then this value
        should be -1.
        
        \param[in] estIndex The index of the EST.  This value must
        be the index of the corresponding EST in the list of ESTs
        returned by EST::getESTList() method.
        
        \param[in] similarityMetric The similarity metric between
        this EST and its parent EST.
    */
    inline MSTNode(const int parentIndex, const int estIndex,
                   const float similarityMetric) :
        parentIdx(parentIndex), estIdx(estIndex),
        similarity(similarityMetric) {}

    /** Method to write the node information to an output stream.

        This method can be used to serialize the information in this
        node to a given output stream (or file).  The data is written
        in the following comma format:

        <parentESTidx>, <ESTidx>, <SimilarityMetric>

        \param[out] os The output stream to which the data is to be
        written.
    */
    void serialize(std::ostream& os) const;

    /** Returns the FASTA header corresponding to the EST for this
	node.

	This function obtains the EST corresponding to the ESTidx
	value stored in this node via the EST::getEST() method and
	then returns the information associated with the EST. The
	information about the EST is determined via the EST::getInfo()
	method.

	\return The FASTA header associated with the given EST.  If no
	information is available this method returns an empty string.
     */
    std::string getESTInfo() const;
    
    /** Method to read the node information to an input stream.

        This method can be used to deserialize the information for
        this node from a given input stream (or file) that was
        previous generated through a successful call to the
        serialize() method.  If the first character in the line is a
        "#" (pound character) then this method ignores the line and
        proceeds to process the next one.

        The data read is assumed to be in the the following comma
        separated format:

        <parentESTidx>, <ESTidx>, <SimilarityMetric>

        \param[inout] is The input stream from which the data is to be
        written.

        \param[out] node The node that must be populated with the data
        from the MST file.
        
        \return This method returns 0 if the data for the node was
        successfully read.  It returns -1 on EOF.  On errors, it
        returns a positive, non-zero value.
    */
    static int deSerialize(std::istream& is, MSTNode& node);
    
    /** The zero-based index of the parent EST.  If a node has no
        parent (it is the root of the MST) then this value is set
        to -1.  The \c parentIdx is an offset into the list of
        ESTs returned by EST::getESTList() method.
    */
    int parentIdx;
    
    /** The zero-based index of the EST that a given MST node
        represents.  This value is the index of the corresponding
        EST in the list of ESTs returned by EST::getESTList()
        method.
    */
    int estIdx;
    
    /** The similarity metric generated by a given EST analyzer
        indicating the similarity between this node and its parent
        node.
    */
    float similarity;
};

/** \func operator<<

    Insertion operator to stream MSTNode information to a given output
    stream.  This method provides a convenient mechanism to dump
    MSTNode information for debugging purposes.
*/
extern std::ostream& operator<<(std::ostream&, const MSTNode&);

#endif
