#ifndef CONTIG_H
#define CONTIG_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "AlignmentInfo.h"
#include "BaseSegmentInfo.h"
#include "NtDistr.h"

#include <vector>

/** \typedef std::vector<AlignmentInfo> AlignmentInfoList

    \brief A vector that contains a list of AlignmentInfo objects.

    This typedef provides a convenient short cut to refer to a vector
    that is used to hold a list of AlignmentInfo objects.  This vector
    is used in more than one spot in the code. Consequently, it has
    been defined here to serve as a common data structure.
*/
typedef std::vector<AlignmentInfo> AlignmentInfoList;

/** \typedef std::vector<BaseSegmentInfo> BaseSegmentInfoList

    \brief A vector that contains a list of BaseSegmentInfo objects.

    This typedef provides a convenient short cut to refer to a vector
    that is used to hold a list of BaseSegmentInfo objects.  This
    vector is used in more than one spot in the code. Consequently, it
    has been defined here to serve as a common data structure.
*/
typedef std::vector<BaseSegmentInfo> BaseSegmentInfoList;

/** \file Contig.h

    \brief Class to encapsulate generic (that is -- genome-assembler
    neutral) contig information generated by a genomic-assembler.
    This information is primarily used to write assembly results to in
    appropriate file formats (such as: FASTA or SAM).

	This file provides the definition for the Contig class that is
	created by genomic-assemblers at the end of forming a contig.
	Typically, genomic-assemblers will require additional information
	(than what is encapsulated by this class) for their operations.
	However, once a contig has been formed, the additional
	intermediate data can be dropped retaining only the core
	information in this class.  This minimizes peak memory footprint
	of assemblers (enabling assembly of larger data files).

	<p>This contig class is shared by multiple sub-systems
	constituting PEACE, namely: the assembly sub-system and the output
	sub-system.  Consequently, it is present as a shared class.  Refer
	to the class and method documentation on details on the data
	encapsulated by this class.</p>
*/

/** Class to encapsulate generic (that is -- genome-assembler neutral)
    information about a contig created by an assembler.

	In this context, a contig represents a set of assembled cDNA
	fragments.  The nucleotides of each assembled cDNA fragment are
	placed at a specific column in a contig.  The alignment
	information for each cDNA fragment is encapsulated by an
	AlignmentInfo object.  This class encapsulates a list of
	AlignmentInfo object along with the following, additional
	contig-level information:

	<ul>

	<li>contigId: This identifier (a std::string) is assigned by the
	assembler when a contig is created.  The contigID must be unique
	across all contigs created by an assembler. Typically, an
	assembler would use monotonically growing counter to generate a
	unique number for each contig.</li>

	<li>consensus: An optional consensus sequence. This is optional
	and not all contigs may have it set. For instance, to reduce
	memory footprint, only one of the parallel processes maintains the
	global-consensus sequence for a contig. Similarly, for singleton
	contigs, generating a consensus sequence does not make much
	sense.</li>

	<li>ntDistributions: An optional array of occurrence frequencies
	of base pairs in each column of the contig. This is optional and
	not all contigs may have it set.</li>
	
	</ul>
*/
class Contig {
public:
    /** Default constructor to create an empty contig.

        Constructor to instantiate contig without any additional
        information.  The consensus sequence is set to an empty string
        and the ntDistributions has no data in it. The contigId is set
        to an empty string indicating an invalid vlaue.  This
        constructor is primarily present to facilitate the use of this
        class with STL containers.
    */
    inline Contig() {}

    /** Convenience constructor to create a partially-filled contig.

        This is a convenience constructor that can be used to
        instantiate a contig with some information already
        filled.

        \param[in] contigId The unique contig ID to be associated with
        this contig. In parallel assembly situations, each parallel
        process typically has a contig with the same ID in it (for
        convenient processing and distributing memory load across
        multiple machines).

        \param[in] consensus The consensus sequence to be associated
        with this contig.  If a consensus sequence is not available,
        then this string can be an empty string (\c "").

		\param[in] quality The quality values (if any) associated with
		this contig. Each entry in this array provides the base-call
		Phred score for the corresponding nucleotide in the consensus
		sequence. If quality values are not-available, then an empty
		vector must be passed-in.
		
        \param[in] start An iterator to the starting position in
        another vector from where nucleotide information is to be
        copied into the ntDistributions vector in this class.

        \param[in] start An iterator to the ending position in
        another vector from where nucleotide information is to be
        copied into the ntDistributions vector in this class.        
    */
    Contig(const std::string& contigId, const std::string& consensus,
		   const std::vector<int>& qualities,
           NtDistrList::const_iterator start, NtDistrList::const_iterator end);

    /** Convenience constructor to create a (partially-filled) contig
        with just an ID and consensus sequence.

        This is a convenience constructor that can be used to
        instantiate a contig with some information already filled.
        The following information is left un-filled:

        <ul>

        <li>The quality information is left unfilled. Consequently the
        getQuality() method on this object will return an empty
        quality vector.</li>

        <li>The nucleotide distribution information is left unfilled
        (consequently, the occurrence frequency for each position on
        the consensus sequence will not be available)</li>
        
        </ul>

        \param[in] contigId The unique contig ID to be associated with
        this contig. In parallel assembly situations, each parallel
        process typically has a contig with the same ID in it (for
        convenient processing and distributing memory load across
        multiple machines).

        \param[in] consensus The consensus sequence to be associated
        with this contig.  If a consensus sequence is not available,
        then this string can be an empty string (\c "").
    */
    Contig(const std::string& contigId, const std::string& consensus);
    
    /** Obtain the contig ID associated with this contig.

        This method returns the unique identifier set for this contig
        when it was instantiated.

        \return The uniqe contig identifier set for this contig.
    */
    inline const std::string& getId() const { return contigId; }

    /** Set the unique contig ID for this contig.

        This method can be used to set or change the unique identifier
        set for this contig. Typically, the ID is set only once and is
        never changed during the lifetime of the contig.

        \param[in] id The unique identifier to be set for this
        contig. This string cannot be an empty string. However, no
        checks are made to verify uniqueness of the string.
    */
    void setId(const std::string& id);

    /** Obtain the consensus string (if any) set for this conting.

        This method can be used to obtain the consensus string for
        this contig. If a consensus string has not been set, then this
        method returns an empty string.

        \return The consensus nucleotide sequence set for this contig.
    */
    inline const std::string& getConsensus() const { return consensus; }
	
    /** Set the consensus string for this contig.

        This method can be used to set the consensus string for this
        contig.

        \param[in] consensus The consensus sequence to be set for this
        contig.  This can be any string and no specific checks are
        made on the contents of the string.
    */
    void setConsensus(const std::string& consensus);

    /** Obtain the quality scores for each base in the consensus
		sequence.

        This method can be used to obtain the quality values (if any)
        associated with the consensus sequence for this contig.  Each
        entry in this array provides the base-call Phred score for the
        corresponding nucleotide in the consensus sequence. If quality
        values are not-available, then the returned value will be an
        empty vector.

        \return The quality values (if any) associated with the
        consensus sequence for this contig.
    */
    inline const std::vector<int>& getQuality() const { return quality; }

    /** Set the quality values for the consensus sequence associated
		with this contig.

        This method can be used to set the quality values associated
        with the consensus sequence for this contig.  Each entry in
        this array must provide the base-call Phred score for the
        corresponding nucleotide in the consensus sequence. This
        vector must be exactly the same size as that of the consensus
        sequence for this contig.

        \param[in] quality A vector containing the base-call Phred
        score for each nucleotide in the consensus sequence.
    */
    void setQuality(const std::vector<int>& quality);
	
    /** Obtain the nucleotide occurrence frequencies for this contig.

        This method returns a reference to the nucleotide occurrence
        frequencies for this contig. If this information is
        unavailable then the returned vector has zero entries in it.

        \return A vector containing nucleotide occurrence frequencies
        for each nucleotide position in this contig.
    */
    inline const NtDistrList& getNtDistribution() const
    { return ntDistributions; }

    /** Set the nucleotide occurrence frequencies for this contig.
        
        This method can be used to set the nucleotide occurrence
        frequencies for this contig.  The vector is assumed to contain
        nucleotide information for all positions on the contig.

        \param[in] start An iterator to the starting position in
        another vector from where nucleotide information is to be
        copied into the ntDistributions vector in this class.

        \param[in] start An iterator to the ending position in
        another vector from where nucleotide information is to be
        copied into the ntDistributions vector in this class.        
    */
    void setNtDistribution(NtDistrList::const_iterator start,
                           NtDistrList::const_iterator end);

    /** Add a new alignment information for a cDNA fragment to this
        contig.

        This method must be used to add alignment information for a
        given cDNA fragment constituting this contig. The alignment
        information must be fully populated prior to calling this
        method.

        \param[in] ai The alignment information entry to be added to
        this contig.
    */
    void addAlignmentInfo(const AlignmentInfo& ai);

    /** Obtain the list of alignments set for this contig.

        This method must be used to obtain the list of alignments
        currently present for this contig. This method returns a
        vector of AlignmentInfo objects. This vector may not have any
        entries as not all contigs may have it set. However,
        collectively (if alignments from all parallel processes are
        collated together) then each contig will have at least one
        alignment in it.

        \return The set of alignments set for this contig. The vector
        is always returned by may have zero entries in certain cases.
    */
    inline const AlignmentInfoList& getAlignments() const { return alignments; }

    /** Add a new base segment information for this contig.

        This method must be used to add a new base segment entry for
        this contig. The base segment information must be fully
        populated prior to calling this method.

        \param[in] bsi The base segment information entry to be added
        to this contig.
    */
    void addBaseSegmentInfo(const BaseSegmentInfo& ai);

    /** Obtain the list of base segments for this contig.

        This method must be used to obtain the list of base segment
        entries currently set for this contig. This method returns a
        vector of BaseSegmentInfo objects. This vector may not have
        any entries as not all contigs may have it set. However,
        collectively (if alignments from all parallel processes are
        collated together) then each contig will have at least one
        base segment set for it.

        \return The set of base segments set for this contig. The
        vector is always returned by may have zero entries in certain
        cases.
    */
    inline const BaseSegmentInfoList& getBaseSegments() const
    { return baseSegments; }
    
protected:
    /** The consensus sequence (if any) set for this contig.

        This instance variable holds the explicit consensus sequence
        set for this contig. This is optional and not all contigs may
        have it set. For instance, to reduce memory footprint, only
        one of the parallel processes maintains the global-consensus
        sequence for a contig. Similarly, for singleton contigs,
        generating a consensus sequence does not make much sense. If a
        consensus sequence is not set then this string is an empty
        string.
    */
    std::string consensus;

	/** The Phred-score quality values for the consensus sequence.

		This instance variable holds the base-call quality values for
		the consensus sequence. Each entry in this array provides the
		base-call Phred score for the corresponding nucleotide in the
		consensus sequence. If quality values are not-available, then
		this entry will be an empty vector.
	*/
	std::vector<int> quality;
	
    /** Occurrence frequencies of base pairs in each column of the
        contig.
        
        <p>This array is used to maintain the occurence frequencies of
        nucleotides for each column in the contig. Here is an example
        of the data that is stored in the ntDistributions given the
        various ESTs in the alignedESTs list.  In the following case,
        we assume that alignedESTs contains 4 ESTs (namely, \c EST-A,
        \c EST-B, \c EST-C, and \c EST-D). The data in ntDistributions
        list shown in the table below:

		<table cellpadding="3" cellspacing="0">
        <tr><th>Fragment</th><th>Nucleotides</th></tr>

        <tr><td>EST-A: </td><td>\c AACTAGGTACG</td></tr>
        <tr><td>EST-B: </td><td>\c ---TAGGTA--</td></tr>
        <tr><td>EST-C: </td><td>\c AACTCAGG----</td></tr>
        <tr><td>EST-D: </td><td>\c ----TGGTACG</td></tr>
        
        <tr><td colspan="2"><b>Data in ntDistributions</b></td></tr>
        
        <tr><td>Nt-A (\cfreq[0]) : </td><td>\c 22002140300</td></tr>
        <tr><td>Nt-T (\cfreq[0]) : </td><td>\c 00031003000</td></tr>
        <tr><td>Nt-C (\cfreq[0]) : </td><td>\c 00201000020</td></tr>
        <tr><td>Nt-G (\cfreq[0]) : </td><td>\c 00000341002</td></tr>
        <tr><td>Nt-N (\cfreq[0]) : </td><td>\c 00000000000</td></tr>		
        </table>
    */
    NtDistrList ntDistributions;

    /** List of generic and concise alignment information about cDNA
        fragments constituting this contig.

        This vector is used to hold alignment information about the
        cDNA fragments constituting this contig.  The information in
        this list is local to the process. Consequently, during
        parallel assembly, in certain cases this list can be empty on
        a given process. However, globally (if alignments from all
        processes are merged together), a contig must have at least
        one cDNA fragment in it.
    */
    AlignmentInfoList alignments;

    /** List of generic and concise base segment information for
        this contig.

        This vector is used to hold information about the base segment
        cDNA fragments contributing to this contig.  The information
        in this list is local to the process. Consequently, during
        parallel assembly, in certain cases this list can be empty on
        a given process. However, globally (if alignments from all
        processes are merged together), a contig must have at least
        one entry in this list.
    */
    BaseSegmentInfoList baseSegments;    

private:
    /** A unique identifier set for this contig. This identifier is
        set by the assembler when a contig is created.  The contigID
        must be unique across all contigs created by an assembler.
        Multiple processes typically have copies of the contig with
        the same identifier.
    */
    std::string contigId;
};

/** \typedef std::vector<Contig> ContigList

    \brief A vector that contains a list of Contig objects.

    This typedef provides a convenient short cut to refer to a vector
    that is used to hold a list of Contig objects.  This vector is
    used in more than one spot in the code. Consequently, it has been
    defined here to serve as a common data structure.
*/
typedef std::vector<Contig> ContigList;

#endif
