#ifndef BLAST_COMMON_H
#define BLAST_COMMON_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

/** \file BlastCommon.h

	\brief A common base class that is used to help in running
	BLAST-related commands.

	This file contains the declaration of for a common base class that
	is used by various sub-components that work with BLAST tool set.
	This base class cannot be directly instantiated instead one of the
	derived classes are to be instantiated and used.
*/

#include "DecagonException.h"
#include <string>

class BlastCommon {
public:
    /** Helper method to obtain the full command-line to be run to
        build a BLAST data base.

        This is a helper method that can be used to obtain the full
        command-line to be run to build a BLAST data base. This method
        uses the detectBlastType() to detect the BLAST type, if
        needed. It then uses the BLAST type to build the appropriate
        command-line to build a data base for a given FASTA file.

        \param[in] srcTransFile The source FASTA file that contains
        the transcripts for which a BLAST data base is to be built.

        \param[in] dbName The target BLAST data base name.

        \return If the BLAST type is successfully detected, then this
        method returns a valid BLAST command-line that can be run to
        generate the desired data base.  The resulting command is
        setup such that no output is generated on success and the exit
        code will be zero.

        \exception DecagonException This method throws an exception if
        the BLAST type could not be detected.        
    */
    std::string getBlastDBCmdLine(const std::string& srcTransFile,
                                  const std::string& dbName)
        throw (DecagonException);

    /** Helper method to obtain the full command-line to be run
        Megablast.

        This is a helper method that can be used to obtain the full
        Megablast command-line to be run to identify matching
        sequences.  This method uses the detectBlastType() to detect
        the BLAST type, if needed. It then uses the BLAST type to
        build the appropriate Megablast command-line.

        \param[in] BlastDBName The BLAST data base name to be used for
        comparisons by Megablast.

        \param[in] genContigFile The FASTA file that contains the
        contigs generated by a genomic-assembler.
        
        \return If the BLAST type is successfully detected, then this
        method returns a valid Megablast command-line that can be run
        to compare contigs and transcripts to identify the best
        matching pairs. The resulting command-line is generated such
        that Megablast output is obtained in a tabular form with
        commant lines (typical command-line argument: \c -m \c 9).

        \exception DecagonException This method throws an exception if
        the BLAST type could not be detected.        
    */
    std::string getMegablastCmdLine(const std::string& blastDBName,
                                    const std::string& genContigFile)
        throw (DecagonException);
    
protected:
    /** Helper method to detect the type of BLAST being used.

        <p>This is a helper method that is used to setup the
        static-instance variable blastType. This value is useful for
        deciding the actual command line to be used -- for example:
        deciding between \c formatdb (in older versions of BLAST) and
        \c makeblastdb (in newer versions of BLAST+).</p>

        <p>This method uses a trial-and-error approach. It attempts to
        run the different "known" versions of BLAST commands to detect
        the appropriate BLAST type. Specifically this method runs the
        following commands to detect the appropriate BLAST type:

        <table>
        <tr><td>Command being run</td><td>BLAST Type</td></tr>
        <tr><td>\c formatdb \c--help</td><td>0 (older BLAST)</td></td>
        <tr><td>\c makeblastdb \c-help</td><td>0 (newer BLAST+)</td></td>
        </table>

        </p>
        
        \note If blastType has already been detected (that is
        blastType is not -1) then this method does not perform any
        operations and returns immediately.

        \exception DecagonException This method throws an exception if
        the BLAST type could not be detected.
    */
    void detectBlastType() throw(DecagonException);
    
    /** The default constructor.

        The default constructor does not have any specific operations
        to perform.  It is merely present to adhere to coding
        conventions and to ensure that this class is not directly
        instantiated.
    */
    BlastCommon() {}

    /** The destructor.

        The destructor. This class does not have any specific
        operations to perform as a part of the destructor.
    */
    virtual ~BlastCommon() {}
    
private:
    /** This instance variable tracks the BLAST type detected by this
        class.

        This static instance variable is set the first time the BLAST
        type is successfully detected.  The static instance variable
        ensures that the initialization from multiple instances of
        this class are not unnecessarily run. The blastType indicates
        the type of BLAST command to be run. This is useful for
        deciding the actual command line to be used -- for example:
        deciding between \c formatdb (in older versions of BLAST) and
        \c makeblastdb (in newer versions of BLAST+).
    */
    static int blastType;
};

#endif
