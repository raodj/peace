#ifndef MATCHER_H
#define MATCHER_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "Tool.h"
#include "ESTList.h"
#include "ArgParser.h"

/** The main class for tool to search given source Genes/Transcripts
    (optionally from a file) for best matches for a given set of
    contigs (optionally from a file).

*/
class Matcher : public Tool {
public:
    /** The main method to perform tasks for this class.

        This method is invoked from the ::main() method associated
        with PEACE tools once it has detected that the tool to be used
        is this Matcher tool.  Any pending (unprocessed) command line
        parameters are passed to this method for its use.

        \param[in] argc The number of remaining command line arguments
        for use by this class/method.

        \param[in,out] argv The actual command line arguments for use
        by this class/method.
    */
    static int main(int argc, char *argv[]);

    /** Add source genes/transcripts and contig entries to be processed.

        This method must be used to add several source gene/transcript
        entries as well as several contig entries to be processed.

        \param[in] seqList The list (std::vector<std::string>) of
        genes/transcripts against which contigs must be matched.  This
        method creates suitable EST objects (for each entry in the
        given list) and adds it to the Matcher#srcGeneList in this
        class.  This method is called from Matcher::main() to process
        the list of source sequences specified by the user for the \c
        --srcList command line argument.

        \param[in] contigList The list (std::vector<std::string>) of
        zero-or-more contigs generated by an assembler to be matched
        against source genes/transcripts.  This method creates
        suitable EST objects (for each entry in the given list) and
        adds it to the Matcher#contigList in this class.  This method
        is called from Matcher::main() to process the list of source
        sequences specified by the user for the \c --contigList
        command line argument.
    */
    void addEntries(const ArgParser::StringList& seqList,
                    const ArgParser::StringList& contigList);

    /** Method to load data for processing from corresponding FASTA
        files.

        This method is used initially to load the necessary
        information from two different FASTA files.  One FASTA file
        provides the source genes/transcripts from where the ESTs were
        generated.  The second FASTA file contains the contigs
        generated by an EST assembler.

        \param[in] srcFileName The FASTA-compatible data file that
        contains the source genes/transcripts from which ESTs were
        generated.  This method reads ESTs from this file and extracts
        the cDNA fragment at the given srcDataIndex.  If this file
        name is an empty string (\c "") then this file is ignored.

        \param[in] contigFileName The name of the file that contains
        the generated contigs to be matched against the entries in the
        srcFileName.
        
        \return This method returns \c true if all the data was read
        successfully.  On errors this method generates suitable error
        messages and returns \c false.
    */
    bool loadData(const std::string& srcFileName,
                  const std::string& estFileName);

	/** Performs the core contig-to-gene matching and output
		generation.

		This method performs the core task of matching each
		assembler-generated contig to one of the gene sequences.  The
		contig-to-gene matching is performed in the following manner:

		<ul>

		<li>For each contig in the given set of contigs, perform the
		following:

		<ol>

		<li>First use heuristics to compare the contig with each
		reference gene/transcript (supplied by the user).

		<li>For each reference gene/transcript that passes the
		heuristics (that means the two sequences are pretty similar),
		run needleman-wunsch global alignment and track the best score
		and alignments.</li>

		<li>Print the best scores and alignment for the contig.</li>
		
		</ol>
		
		</li>

		<ul>
	*/
    void match();

	/** Computes the N50 score for the contigs.

		This method is used to compute the N50 score and N50 length
		for the contigs. The N50 score is defined as follows:

		<i>N50 length is the length of the shortest contig such that
		the sum of contigs of equal length or longer is at least 50%
		of the total length of all contigs.  N50 refers to the ordinal
		of the contig used to compute N50 score</i>
	*/
	void computeN50();
	
protected:
    /** The list of source genes/transcripts.

        This list contains the fragments representing the source
        genes/transcripts from where ESTs were generated.  Since ESTs
        were generated (or are related) from the source list the
        contigs must also match up with one or more entries in the
        source list. Entries are added via the addSrcEntry() method.
     */
    ESTList srcGeneList;

    /** The list of contigs to be assigned to source genes/transcripts.

        This list contains the contigs that were generated by some EST
        assembler.  These contigs need to be matched back to the
        source genes/transcripts.  Entries in this list are added via
        the addContigEntry() method.
    */
    ESTList contigList;
    
private:
    /** The default constructor for this class.

        This class is meant to be instantiated only from the public
        static main() method.  Consequently, the constructor has been
        made private to force users to use the main() method instead.
    */
    Matcher() {}

    /** The destructor.

        The destructor frees any dynamic memory allocated to store the
        data members in this class.
    */
    ~Matcher() {}

    /** Helper method to load data for processing from a given FASTA
        files.
        
        This method is called from the public bool
        Matcher::loadData(const std::string&, const std::string&)
        method to load data from a given file into a specific ESTList
        object.  This method is typically invoked twice, once for
        loading the source genes/transcripts and a second time to load
        the generated contigs.

        \param[in] srcFileName The FASTA-compatible data file from
        where the nucleotide sequences are to be read.

        \param[out] estList The list of ESTs into which the nucleotide
        sequences are to be added. 

        \return This method returns \c true if all the data was read
        successfully.  On errors this method generates suitable error
        messages and returns \c false.
    */
    bool loadData(const std::string& srcFileName, ESTList& estList);

    /** A simple private class to encapsulate the value specified as
        command line arguments.

        This is a simpel class that is used to conveniently exchange
        command line arguments between various methods in this class
        without scattering them all over the class.
    */
    class CmdLineArgs {
    public:
        /** The string that will contain the source FASTA file name
            from where the source genes/transcripts are to be loaded, if
            the user has specified the \c --srcFile command line
            argument.
        */
        std::string srcFileName;

        /** The string that will contain the FASTA file name from
            where the assembler-generated contigs are to be loaded, if the
            user has specified the \c --contigFile command line
            argument. This pointer cannot be NULL.
        */
        std::string contigFileName;

        /** This list will contain the list of
            source genes/transcripts using which ESTs where generated (and
            consequently the contigs should match them).  This value is
            filled in if the the user has specified the \c --contigList
            command line argument.
        */
        ArgParser::StringList srcGeneList;
        
        /** This list will contain the list of contigs that were
            generated by an assembler.  These nucleotide sequences are to
            be matched with the genes/transcript sequences.  This value is
            filled in if the the user has specified the \c --contigList
            command line argument.
        */
        ArgParser::StringList contigList;
    };
    
    /** Helper method to aid in parsing command line arguments.

        This is a static helper method that is called only once from
        the Helper::main() method to parse command line arguments.
        This method was introduced to keep the clutter in the main
        method to a bare minimum.  This method essentially sets up the
        argument parser (including calling the base class's method for
        default parameters) and parses the specified values into the
        supplied pointer parameters.

        \note This method does not perform any validation of command
        line arguments.

        \param[in] argc The numebr of command line arguments that are
        present in the argv array (second parameter).

        \param[in] argv The actual command line arguments to be parsed.
 
        \param[in,out] ap The argument parser to be used for parsing
        command line arguments.
        
        \param[out] cmdLineArgs Object containing the set of command
        line argument objects to be updated by this method. The
        members of this object are updated by this method.

        \return This method returns \c true if the command line
        arguments were successfully parsed and the program must
        continue further.  If the program should exit (cleanly) then
        this method returns \c false.
    */
    static bool parseArgs(int& argc, char *argv[], ArgParser& ap,
                          CmdLineArgs& cmdLineArgs);
    
    /** Helper method to validate command line arguments.
        
        This is a static helper method that is called only once from
        the Helper::main() method to validate the parsed command line
        arguments.  This method was introduced to keep the clutter in
        the main method to a bare minimum.  This method checks to
        ensure that the command line arguments are valid and suitably
        specified.

        \param[in] cmdLineArgs Object containing the set of command
        line argument objects to be validated by this method. The
        members of this object are appropriately validated by this
        method.

        \param[in] ap The argument parser to be used for reporting
        options/default values.
        
        \return This method returns \c true if the command line
        arguments are valid and consistent, indicating that the
        program can proceed with further processing.  This method
        returns \c false if the program should not proceed further.
    */
    static bool validateArgs(const CmdLineArgs& cmd, ArgParser& ap);
};

#endif
