#ifndef ALIGN_H
#define ALIGN_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "Tool.h"

/** \file Align.h

    \brief This file contains the class definition for the Align tool.

    This file contains the class definition for the Align tool.  This
    tool attempts to determine alignment information for a set of ESTs
    using MST data and generates a new file containing annotated ESTs.
*/

/** A tool to align ESTs in a file using MST data.

    </p>This tool attempts to suggest alignment information for a
    given set of ESTs.  The alignment information is extracted using
    MST data generated by PEACE.  This tool merely annotates the FASTA
    header associated with each EST and generates a new FASTA file
    containing the annotated set of ESTs. </p>

    The overall operation of this tool is rather straightforward,
    and as follows:

    <ol>
    
    <li> It first recursively descends the MST to locate the left-most EST
    (ESTs that has the lowest alignment metric) and assigns that EST
    an starting position value of 0.</li>

    <li>Using this relatively value, it sets the start and end
    base-pair positions for each EST by appending strings of the form
    \c_\i StartPos_\i EndPos to each EST.</li>

    <li>Finally it serializes the ESTs to the output FASTA file.</li>

    </ol>

    The generated ESTs (with alignment annotation) can be graphically
    viewed using the \c ShowAlignment tool.
*/
class Align : public Tool {
 public:
    /** The main method to perform tasks for this tool.
        
        <p>This method is invoked from the ::main() method associated
        with PEACE tools once it has detected that the tool to be used
        is this Align tool.  Any pending (unprocessed) command line
        parameters are passed to this method for its use.</p>

        This method uses an arg_parser object to process the pending
        command line arguments. If all the necessary arugments were
        supplied then it instantiates an Align object and uses various
        methods in the class (and its base class) to perform the
        operations of this tool.
        
        \param[in] argc The number of remaining command line arguments
        for use by this class/method.
        
        \param[in,out] argv The actual command line arguments for use
        by this class/method.
    */
    static int main(int argc, char *argv[]);

    /** Method to perform core alignment operations.
        
	This method is invoked to perform the core alignment task once
	the input ESTs and MST (with alignment information) has been
	loaded.  This method uses the getFarthestPos() method to
	determine the left-most EST position in the MST.  It then uses
	the position of the farthest EST to annotate the loaded
	ESTs. Finally, it serializes the ESTs to the specified output
	file.

        \note This method assumes that the MST data and EST
        information have already been successfully loaded.
        
	\param[out] out The output stream to which the annotated ESTs
    */
    void doAlignment(std::ostream &os);
    
protected:
    /** The default constructor for this class.

        This class is meant to be instantiated only from the public
        static main() method.  Consequently, the constructor has been
        made private to force users to use the main() method instead.
        The constructor currently does not have a specific task to
        perform and is merely present to adhere to coding conventions.
    */
    Align();

    /** The destructor.

        The destructor frees any dynamic memory allocated to store the
        data members in this class.  The destructor currently does not
        have a specific task to perform and is merely present to
        adhere to coding conventions.
    */
    ~Align();

private:
    /** Recursive method to detect left-most EST position.

        This method recursively calls itself to determine the
        left-most EST position.  Essentially, this method first
        determines the farthest positions of each child node (given
        the parent's EST index value) and returns the minmum of the
        values.  The recursion terminates each time a leaf node in the
        MST is encountered.

        \param[in] parentIdx The index of the parent EST whose
        farthest child position is to be determined.  The default
        initial value of -1 is used to indicate the root of the tree
        that contains all the nodes in the MST.

        \return This method returns the base-pair position of the
        left-most EST in the MST.
    */
    int getFarthestPos(const int parentIdx = -1);

    /** Recurvise method to generate core alignment process.
        
	This method is invoked to perform the actual core alignment
	task once the input ESTs and MST (with alignment information)
	has been loaded.  This method uses the startPos value provided
	by the parent to recursively generate alignment information
	for its child nodes.
	
	\param[out] out The output stream to which the annotated ESTs
	must be written.
	
	\param[in] estIdx The index of the EST and its children that
        must be aligned by this method.  The default initial value of
        -1 is used to indicate the root of the tree that contains all
        the nodes in the MST.
	
	\param[in] startPos The starting base pair position relatively
	to which the child ESTs are to be aligned and serialized.
    */    
    void doAlignment(std::ostream& os, const int estIdx, const int startPos);
};

#endif
