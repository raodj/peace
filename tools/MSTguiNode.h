#ifndef MST_GUI_NODE_H
#define MST_GUI_NODE_H

//---------------------------------------------------------------------------
//
// Copyright (c) Miami University, Oxford, OHIO.
// All rights reserved.
//
// Miami University (MU) makes no representations or warranties about
// the suitability of the software, either express or implied,
// including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  MU shall not be liable for any damages suffered
// by licensee as a result of using, result of using, modifying or
// distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@muohio.edu
//
//---------------------------------------------------------------------------

/** \file MSTguiNode

    \brief This file contains the declaration of MSTguiNode class.

    This file contains the class declaration and inline methods
    associated with the MSTguiNode class.  The MSTguiNode class is
    used to encapsulate information about each MST node.
*/

/** A class for encapsulating information about each MST node.
    
    This is a simple class that is used to encapsulate information
    about each node in a MST.  This class has no methods but just data
    members. Refer to the documentation associated with each data
    member for additional details.

    \note This class is currently meant to be instantiated only from
    the Tool base class.  Consequently, the constructor has been
    delcared to be private and the Tool class is declared as a friend
    so that it can instantiate MSTguiNode objects.
*/
class MSTguiNode {
    friend class Tool;
public:
    /** The zero-based index of the parent EST.  If a node has no
        parent (it is the root of the MST) then this value is set
        to -1.  The \c parentIdx is an offset into the list of
        ESTs returned by EST::getESTList() method.
    */
    int parentIdx;
    
    /** The zero-based index of the EST that a given MST node
        represents.  This value is the index of the corresponding
        EST in the list of ESTs returned by EST::getESTList()
        method.
    */
    int estIdx;
    
    /** The similarity/distance metric generated by a given EST
        analyzer indicating the relationship between this node and its
        parent node.
    */
    float metric;

    /** The alignment information (if any) associated with this node.
        The actual value in this alignment field depends on the type
        of analysis that PEACE used to generate this tree.  In order
        to verify if the information in this field is valid, use
        Tool::haveAlignmentData() method.
    */
    int alignmentInfo;
    
    /** Functor for EST sorting.
        
        This Functor is used when sorting MST nodes based on
        parent index at the end of loading MST data. Sorting based
        on parent index ensures that all the related MST nodes are
        placed together, thereby reducing the overall time
        complexity for translating the MST.
    */
    struct LessMSTNode : public std::binary_function<MSTguiNode,
                                                     MSTguiNode, bool> {
        inline bool operator()(const MSTguiNode& x, const MSTguiNode& y) {
            return (x.parentIdx < y.parentIdx);
        }
    };
    
    /** Operator required for binary search.
        
        This method is used when searching MST nodes for a given
        parent index.
    */
    inline bool operator<(const MSTguiNode& other) const {
        return (parentIdx < other.parentIdx);
    }

    /** Destructor.

        This class does not have any members that require dynamic
        memory for storage. Consequently, the destructor has no
        specific tasks to perform and is present merely to adhere to
        coding conventions.
    */
    ~MSTguiNode() {}
    
private:
    /** The default and only constructor.

        The constructor merely initializes all the members to default
        values.  This class is currently meant to be instantiated only
        from the Tool base class.  Consequently, the constructor has
        been delcared to be private and the Tool class is declared as
        a friend so that it can instantiate MSTguiNode objects.
    */
    inline MSTguiNode() : parentIdx(-1), estIdx(-1), metric(-1),
                          alignmentInfo(0) {}
};

#endif
