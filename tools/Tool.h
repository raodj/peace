#ifndef TOOL_H
#define TOOL_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "HashMap.h"
#include "arg_parser.h"
#include "XFigHelper.h"
#include "MSTguiNode.h"

#include <vector>
#include <algorithm>

/** \typedef HashMap<std::string, int> ColorCodeMap;

    \brief A short cut typedef to conveniently use a hash_map.

    The ColorCodeMap is used to rapidly look up color codes associated
    with clusters.  This data is loaded by
    ShowAlignment::loadClusterInfo() method from the simple clustering
    output generated by PEACE.
*/
typedef HashMap<std::string, int, StringHasher> ColorCodeMap;

// Forward declaration to keep compiler happy
class EST;

/** A common base class that houses methods that are used by two or
    more tools.

    This is a refactored base class that was introduced as a place
    holder for methods and operations that are used by two or more
    tools in this tool suite.  Tools that requires some (or all) of
    the features provided by this class derive from it.

    \note This class is not meant to be directly instantiated. Instead
    one of the derived classes must be instantiated and used.
*/
class Tool {
public:
    /** The destructor.

        The destructor frees up dynamic memory allocated to hold data
        in some of the instance variables associated with this class.
    */
    virtual ~Tool();
    
    /** Helper method to load sequences from a FASTA file.
        
        This method is a helper method that is used to load data from
        a given FASTA file.
        
        \param[in] fileName The FASTA file name from which the FASTA
        sequences are to be loaded.
       
        \return This method returns \c true if all the data from the
        fasta file was successfully read.  On errors this method
        generates suitable error messages and returns \c false.
    */
    bool loadFastaFile(const char *fileName);

    /** Method to process clustering information to provide cluster
	color codes.

	This method is a helpe rmehtod that is used to load data from
	a given clustering file. The clustering file is assumed to
	contain simple clustering output generated by PEACE for the
	given set of ESTs. The clustering output is in the form:

	<pre>

	Cluster #0
	Cluster #1
	g002_004434_005133
	
	Cluster #2
	g002_005994_006693
	g002_008584_009283
	
	Cluster #3
	g001_012569_013268
	
	Cluster #4
	g001_001840_002539

	</pre>

	This method assumes the above format and populates the
	colorMap hash_map in this class with color codes corresponding
	to each EST entry in the cluster file using the cluster number
	associated with the ESTs.

	\param[in] fileName The file name that contains clustering
        information.
       
        \return This method returns \c true if all the data from the
        file was successfully read.  On errors this method generates
        suitable error messages and returns \c false.
    */
    bool loadClusterInfo(const char* fileName);
    
    /** Helper method to show usage information.
        
        This is a helper method that was introduced to reudce
        redundant code to display usage information.

        \param[in] tool The name of the tool for which the options are
        to be displayed.
        
        \param[in] ap The argument parser that is used to show some of
        the usage information.
    */
    static void showUsage(const std::string& tool, const arg_parser& ap);

    /** Obtain color code for EST at the given index.

	If the data from clustering has been loaded and can be
	resolved, then this method looks up the clsuter table to
	determine a suitable user-defined color code for the supplied
	estIdx.  If the EST was not found or the color coding
	information is not available this method returns the
	defaultColor.

	\param[in] estIdx The index of the EST for which a color code
	is desired.

	\param[in] defaultColor The default color code to be returned
	by this method if color coding data is not available.  The
	default color is black.
    */
    int getColor(const int estIdx, const int defaultColor = 0) const;

    /** Method to load data for processing from PEACE MST file format.
        
        This method is used to load the MST data from the supplied
        text file generated by PEACE (refer to the PEACE MST flat file
        format shown below:

        <pre>
        # Data format: <parentESTidx>,<estIdx>,<similarityMetric>,<alignment>
        -1,0,0,20
        0,1,4,-10
        0,2,5,3
        2,3,8,0
        2,4,10,-4
        </pre>        

        \note Alignment information is optional and some MST file
        formats may not have alignment information.  If a MST file has
        alignment information then the haveAlignmentData() method in
        this class will return \c true.
        
        This method loads MST data into a the \c mst instance variable
        encapsulated in this class.

        \param[in] srcFileName The PEACE-generated MST data file that
        contains the list of MST nodes

        \param[in] needAlignmentData If this flag is \c true and the
        MST data in \c mstFileName does not have alignment
        information, then this method generates a suitable error
        message and returns \c false.
        
        \param[in] sort If this flag is \c true, then this method
        sorts the loaded entries based on the \c parentIdx (parent
        index) values in each node.  After sorting all the child nodes
        for a given node will be consecutively present in the list of
        nodes.  This eases processing the MST for certain tools.
        
        \return This method returns \c true if all the data was read
        successfully.  On errors this method generates suitable error
        messages and returns \c false.
    */
    bool loadMSTdata(const char *mstFileName, const bool needAlignmentData,
                     const bool sort);
    
    /** Method to obtain the reference to the root node.

        This method returns a reference to the root node once the data
        has been loaded by a call to the loadMSTdata() method in this
        class.  If this method is called prior to invoking the
        loadMSTdata() then calling this method will cause the program
        to abort.

        \return A reference to the root node (node whose parent EST
        index is -1) of the MST.
    */
    inline const MSTguiNode& getRoot() const { return mst[0];  }

    /** Obtain iterator to the first child node in the MST.

        This is a helper method that can be used to obtain an
        interator to the first child node (given the parent node's
        index value) in the MST.

        \note This method assumes that the MST has already been
        successfully loaded and \b sorted via a suitable call to the
        loadMSTdata() method in this class.  The MST has to be sorted
        because this method uses binary search to locate the first
        child.

        \param[in] parentIdx The index value of the parent node whose
        first child node is required.

        \return This method returns an iterator to the first child
        node (given the parent node) in the MST.  If a child node was
        not found then this method returns mst.end() as the iterator.
    */
    std::vector<MSTguiNode>::const_iterator
    getFirstChild(const int parentIdx) const;
    
protected:
    /** The constructor.

        The default constructor for this class. The constructor merely
        initializes the instance variables to suitable initial values.
        The constructor has been made protected to ensure that this
        class is never directly instantiated.  Instead one of the
        derived classes must be instantiated (via its main() method)
        and used.
    */
    Tool();

    /** The helper class to generate XFig information.

	This object is used to generate a XFig information to display
	the aligned information.  The actual file to which the XFig
	data is to be written is set later on by the individual tools
	if they need this feature.
    */
    XFigHelper xfig;

    /** A hash_map to rapidly map ESTs to cluster color codes.
        
	This instance variable is used to rapidly look up color codes
	associated with clusters.  This data is loaded by
	Tool::loadClusterInfo() method from the simple clustering
	output generated by PEACE.
    */
    ColorCodeMap colorMap;
    
    /** The set of nodes constituting a MST.
	
	This vector contains the list of nodes constituting the MST
	generated by PEACE.  Entries in this vector are added by the
	loadMSTdata() method.  In addition, the loadMSTdata() method
	optionally sorts the entries in this vector based on each
	node's parent's index.  Sorting based on parent index reduces
	the overall time complexity of processing the data for certain
	tools.
    */
    std::vector<MSTguiNode> mst;

    /** Flag to indicate if the MST nodes contain alignment data.

        This contents of this flag is valid only after valid MST data
        has been successfully loaded from a file. If this flag is \c
        true, that indicates that all the MSTguiNodes in the MST have
        alignment data stored in them.
    */
    bool haveAlignmentData;
    
private:
    /** Helper method to process a line in a MST file.

        This is a helper method that is invoked from the loadMSTdata()
        method to processes a single line of input from the MST file.
        This method performs the following operations:

        <ol>

        <li>If the line is empty or starts with a '#' sign the line
        ignored and this method returns immediately with \c true.</li>

        <li>The method attempts to read 4 values from the line into a
        MSTguiNode.  If alignment data is not available but alignment
        information is needed then this method generates an error and
        returns \c false.

        <li>If data was read successfully, the newly read node is
        added to the MST.</li>

        </ol>

        \param[in] line The line of input to be processed by this method.

        \param[in] needAlignment If this flag is \c true, then
        alignment information must be present in the line and if it is
        absent this method generates an error.

        \return This method returns \c true on success. On error it
        generates a suitable error message and returns \c false.
    */
    bool parseMSTline(const std::string& line, const bool needAlignment);
};

#endif
