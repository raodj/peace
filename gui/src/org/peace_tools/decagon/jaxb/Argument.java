//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.06.18 at 06:29:58 PM EDT 
//


package org.peace_tools.decagon.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * 
 * 	This is the element that encapsulates information about
 * 	command-line arguments that are passed to an executable. The following
 * 	important difference between an Argument and a Parameter must be noted:
 * 	Parameters are used to obtain input from the user via GUI components 
 * 	while Arguments do not have any GUI components associated with them. 
 * 	Arguments can use conditions to determine if they are to be used. 
 * 	Arguments can either refer to a parameter to be used or directly use 
 * 	a string value involving bind-variables. 
 * 			
 * 
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Argument", namespace = "http://www.peace-tools.org/decagon/", propOrder = {
    "condition",
    "cmdLineArg",
    "parameterRef"
})
public class Argument {

    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected List<Condition> condition;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    protected String cmdLineArg;
    @XmlElement(namespace = "http://www.peace-tools.org/decagon/")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "token")
    protected String parameterRef;

    /**
     * 
     * 	An optional list of conditions associated with this parameter. A
     * 	parameter is used only if the condition evaluates to true. Conditions
     * 	can have sub-conditions associated with them. Conditions are evaluated 
     * 	in a recursive, depth-first manner. 
     * 					Gets the value of the condition property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the condition property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCondition().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Condition }
     * 
     * 
     */
    public List<Condition> getCondition() {
        if (condition == null) {
            condition = new ArrayList<Condition>();
        }
        return this.condition;
    }

    /**
     * 
     * 	A string to be passed as the command-line argument. This string can
     * 	include variable references as well. Here is an example: 
     * 	--estFile %INPUT_FILE_PATH% --output %OUTPUT_FILE_PATH% 
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCmdLineArg() {
        return cmdLineArg;
    }

    /**
     * Sets the value of the cmdLineArg property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCmdLineArg(String value) {
        this.cmdLineArg = value;
    }

    /**
     * 
     * 	This element must refer to the name of a parameter that is defined in 
     * 	the set of parameters. Parameters are used to obtain inputs from the
     * 	user while arguments are used to pass information to executables on their
     * 	command-line.
     * 					
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getParameterRef() {
        return parameterRef;
    }

    /**
     * Sets the value of the parameterRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setParameterRef(String value) {
        this.parameterRef = value;
    }

}
