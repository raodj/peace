//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

package org.peace_tools.generic;

import java.awt.event.ActionEvent;
import java.util.regex.Pattern;

/**
 * This class is a simple utility class that serves to encapsulate all the 
 * necessary information generated by the FindDialog when a user requests a 
 * specific find operation. Specifically, the event encapsulates the following
 * information:
 * 
 *  <ul>
 *  
 *  <li>The string to search for (if it is a text search).</li>
 *  <li>The compiled Patterns for regular expression searches.</li>
 *  <li>Flag to indicate if the search is forward or backward.</li>
 *  <li>Flag to indicate if the search must wrap around.</li>
 *  <li>Flag to indicate if the search is to be case sensitive or case insensitive.</li>
 *  
 *  </ul>
 */
public class FindEvent extends ActionEvent {
	/**
	 * The constructor for creating a find event with request to find based on
	 * a string (and not a regular expression). This constructor is typically
	 * used by the FindDialog to dispatch a request to perform a find operation
	 * to the currently registered find listener(s).
	 * 
	 * @param srcObject The source object which is creating this find event. 
	 * Typically, the source object is the FindDialog.
	 * 
	 * @param searchStr The string to search for. This string cannot be null.
	 * 
	 * @param forwardSearch A boolean flag to indicate if the search must continue
	 * in the logically forward (the definition of forward may vary depending on the
	 * view processing the event) direction. If this value is true then the search
	 * is expected to proceed in the forward direction. Otherwise the search proceeds
	 * in the reverse direction.
	 *  
	 * @param wrapAround A boolean flag to indicate if the search must continue past
	 * the end (either top or bottom) and wrap around and continue. If this flag is
	 * true, then the search is expected to wrap around. Otherwise the search does not
	 * wrap around.
	 * 
	 * @param caseSensitive If this flag is true, then the search is performed in a
	 * case sensitive manner. Otherwise the search is performed in a case-insensitive manner.
	 */
	public FindEvent(Object srcObject, String searchStr, boolean forwardSearch, 
			boolean wrapAround, boolean caseSensitive) {
		super(srcObject, 1, "findStr");
		this.searchStr     = searchStr;
		this.forwardSearch = forwardSearch;
		this.wrapAround    = wrapAround;
		this.caseSensitive = caseSensitive;
		this.regExPattern  = null;
	}

	/**
	 * The constructor for creating a find event with request to find based on
	 * a regular expression (and not a simple string). This constructor is typically
	 * used by the FindDialog to dispatch a request to perform a find operation
	 * to the currently registered find listener(s).
	 * 
 	 * @param srcObject The source object which is creating this find event. 
	 * Typically, the source object is the FindDialog.
	 * 
	 * @param regExPattern The complied regular expression pattern that must be used
	 * for detecting matching entries. This pattern cannot be null.
	 * 
	 * @param forwardSearch A boolean flag to indicate if the search must continue
	 * in the logically forward (the definition of forward may vary depending on the
	 * view processing the event) direction. If this value is true then the search
	 * is expected to proceed in the forward direction. Otherwise the search proceeds
	 * in the reverse direction.
	 *  
	 * @param wrapAround A boolean flag to indicate if the search must continue past
	 * the end (either top or bottom) and wrap around and continue. If this flag is
	 * true, then the search is expected to wrap around. Otherwise the search does not
	 * wrap around.
	 * 
	 * @param caseSensitive If this flag is true, then the search is performed in a
	 * case sensitive manner. Otherwise the search is performed in a case-insensitive manner.
	 */
	public FindEvent(Object srcObject, Pattern regExPattern, boolean forwardSearch, 
			boolean wrapAround, boolean caseSensitive) {
		super(srcObject, 2, "findRegEx");
		this.searchStr     = null;
		this.forwardSearch = forwardSearch;
		this.wrapAround    = wrapAround;
		this.caseSensitive = caseSensitive;
		this.regExPattern  = regExPattern;
	}

	/**
	 * Obtain the search string to be used for simple string searches. 
	 * 
	 * @return The string being searched for. This value is null if the search
	 * is to be performed using a regular expression.
	 * 
	 * @see #isRegExSearch()
	 */
	public String getSearchString() { 
		return searchStr;
	}

	/**
	 * Obtain the compiled, regular expression pattern to be used for 
	 * searching. 
	 * 
	 * @return The compiled regular expression pattern to be used for searching.
	 * The return value is null if the search using a simple string.
	 * 
	 * @see #isRegExSearch()
	 */
	public Pattern getRegExPattern() {
		return regExPattern;
	}
	
	/**
	 * Determine if the find operation is based on a regular expression (otherwise
	 * it is based on a simple string).
	 * 
	 * @return This method returns true, if the find operation is to be conducted
	 * using a regular expression (obtained via a call to {@link #getRegExPattern()}).
	 * Otherwise the search is to be conducted using a simple string (obtained via
	 * a call to {@link #getSearchString()}).
	 * 
	 * @see #getRegExPattern()
	 * @see #getSearchString()
	 */
	public boolean isRegExSearch() {
		return regExPattern != null;
	}
	
	/**
	 * Determine if the search is to proceed in the forward or backward direction.
	 * Note that the definition of <i>forward</i> and <i>backward</i> is loose and
	 * their actual interpretation depending on the view (GUI component) that 
	 * finally processes this event. However, care must be taken to ensure that 
	 * the search-direction-behavior is logically the converse of each other.
	 *   
	 * @return This method returns true if the find operation is to proceed in the
	 * logically forward direction. If the search is to proceed in the backwards
	 * direction, then this method returns false.
	 */
	public boolean isForwardSearch() {
		return forwardSearch;
	}

	/**
	 * Determine if the search must wrap around once the search logic exceeds
	 * the bounds of the data content.
	 * 
	 * @return This method returns true if the search must wrap around.
	 */
	public boolean isWrapAround() {
		return wrapAround;
	}
	
	/**
	 * Determine if the search must be performed in a case sensitive manner.
	 * 
	 * @return This method returns true if the search must be conducted in
	 * a case sensitive manner. Otherwise this method returns false.
	 */
	public boolean isCaseSensitive() {
		return caseSensitive;
	}
	
	/**
	 * The simple search string to be used for searching. This value is set
	 * in the constructor ({@link #FindEvent(String, boolean, boolean, boolean)})
	 * and is never changed for the life time of this event. This value can
	 * be accessed via the getter method {@link #getSearchString()}.
	 */
	private final String searchStr;
	
	/**
	 * The compiled regular expression to be used for searching. This value is set
	 * in the constructor ({@link #FindEvent(Pattern, boolean, boolean, boolean)})
	 * and is never changed for the life time of this event. This value can
	 * be accessed via the getter method {@link #getRegExPattern()}.
	 */
	private final Pattern regExPattern;
	
	/**
	 * A boolean flag to indicate if the search is to be conducted in the forward
	 * or reverse direction. If this flag is true then the search is performed
	 * in the forward (logically speaking) direction.
	 */
	private final boolean forwardSearch;
	
	/**
	 * Flag to indicate if the find operations must wrap around once the
	 * search exceeds the bounds of the view of the logical content being
	 * searched. If this flag is true, then the search must wrap around.
	 */
	private final boolean wrapAround;
	
	/**
	 * Flag to indicate if the search must be conducted in a case-sensitive
	 * manner. If this flag is true, then the search must proceed in a 
	 * case-sensitive manner.
	 */
	private final boolean caseSensitive;
	
	/**
	 * A generated serialization GUID (merely to keep the compiler happy). 
	 */
	private static final long serialVersionUID = -2037415985067028109L;

}