package org.peace_tools.core.job.east;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.ArrayList;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.EmptyBorder;

import org.peace_tools.generic.GenericWizardPage;
import org.peace_tools.generic.Utilities;
import org.peace_tools.workspace.DataSet.DataFileType;
import org.peace_tools.workspace.Param;

/**
 * This wizard page is relatively straightforward wizard page 
 * that permits the user to set some of the basic parameters 
 * for an EAST job. The parameters include:
 * 
 * <ul>
 * 
 * <li><b>NUMOFLEVELS</b>: The number of levels used to verify
 *  a left end from a Minimum Spanning Tree (MST). Zero (0) is the 
 *  default, meaning doing until leaves of the MST. For two non-zero
 *  integers <i>a</i> and <i>b</i> (<i>a</i> &lt; <i>b</i>), setting 
 *  this parameter to <i>a<i> will lead to longer runtime (than setting
 *  it to <i>b</i>) while setting it to <i>b</i> will lead to better 
 *  quality in finding the "real" left end.</i>
 *  
 *  <li><b>USE_BOUNDED_NW</b>: A boolean flag indicating whether to use
 *  bounded version of Needleman-Wunsch (NW) algorithm to get NW score 
 *  when computing overlap distance. Use bounded version may reduce the
 *  accuracy, but save time.</li>
 *  
 *  <li><b>OUTPUT_ACE</b>: A boolean flag to indicate if the output
 *  of contigs (generated by EAST) are to be written in ACE file
 *  format.</li>
 *  
 * </ul>
 *
 */
public class EASTBasicParamsPage extends GenericWizardPage {
	/**
	 * The constructor. The constructor sets up the various components
	 * on this wizard page. The components include appropriate GUI
	 * components to interactively obtain various basic parameters
	 * for EAST. Each GUI component is associated with a brief text
	 * message describing the purpose of each parameter.
	 * 
	 * @param wizard The wizard that logically owns this page.
	 */
	public EASTBasicParamsPage(EASTJobWizard wizard) {
		this.wizard = wizard;
		assert(this.wizard != null);
		// Setup the title(s) for this page and border
		setTitle("EAST Parameters", 
				"Configure basic parameters for EAST");
		setBorder(new EmptyBorder(5, 5, 5, 5));
		// Create the MST depth spinner.
		SpinnerNumberModel model = new SpinnerNumberModel(0, 0, 1000, 5);
		// Create and configure the spinner.
		numOfLevels = new JSpinner(model); 
		Utilities.adjustDimension(numOfLevels, -10, 4);
		// Create the check boxes for bounded NW and ACE output
		useBoundedNW = new JCheckBox();
		useBoundedNW.setSelected(true);
		// Create the list of valid output file formats
		DataFileType[] FileFormats = {DataFileType.FASTA, DataFileType.ACE, DataFileType.SAM};
		contigOutputFormat = new JComboBox(FileFormats);
		
		// Add the various components along with suitable descriptive
		// labels to a suitable container panel
		JPanel subPanel = new JPanel(new GridBagLayout());
		add(subPanel, numOfLevels, NUMLEVELS_INFO_MSG);
		add(subPanel, useBoundedNW, BOUNDED_NW_INFO_MSG);
		add(subPanel, contigOutputFormat, CONTIG_OUTPUT_INFO_MSG);
		
		// Create the wizard-page-level informational message label.
		JLabel info = new JLabel(PAGE_INFO_MSG,
				Utilities.getIcon("images/32x32/Information.png"),
				JLabel.LEFT);
		// Finally create the top-level panel to contain an
		// informational label and the subPanel.
		JPanel panel = new JPanel(new BorderLayout(0, 0));
		panel.add(info, BorderLayout.NORTH);
		panel.add(subPanel, BorderLayout.CENTER);
		// Add the contents to this page
		add(panel, BorderLayout.CENTER);
	}
	
	/**
	 * A helper method to create the spinner ({@link #numOfLevels})
	 * that permits the user to set the number of levels to 
	 * explore in MST. This method has been introduced to 
	 * streamline the code in the constructor. This method
	 * is called only once from the constructor.
	 * 
	 * @param bag The panel that uses a GridBagLayout to which
	 * the left and right components are to be added.
	 * 
	 * @param left The component to be added to the left column
	 * of a grid bag layout. This component occupies as little
	 * space as possible.
	 * 
	 * @param right The label text to be added to the right 
	 * column of the grid bag layout. This component will
	 * occupy rest of the row.
	 * 
	 */
	private void add(JPanel bag, JComponent left, String label) {
		// Create label to be placed to right of component
		final JLabel right = new JLabel(label);
		// Determine row based on current number of components
		final int row = bag.getComponentCount() / 2;
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridy              = row;
		gbc.gridx              = 0;
		gbc.insets             = new Insets(0, 5, 5, 0);
		gbc.anchor             = GridBagConstraints.NORTHEAST;
		// Add the left component with above constraints 
		bag.add(left, gbc);
		// Setup constraints for right component
		gbc.gridx              = 1;
		gbc.gridwidth          = GridBagConstraints.REMAINDER;
		gbc.fill               = GridBagConstraints.HORIZONTAL;
		// Add the right component with above constraints 
		bag.add(right, gbc);
	}
	
	/**
	 * Obtain the output file type currently chosen by the user.
	 * 
	 * This method is used by the OutputFilesWizardPage to provide
	 * appropriate default extension to the default files suggested
	 * by the wizard.
	 * 
	 * @return The output file type currently chosen by this method.
	 */
	protected DataFileType getContigOutputFormat() {
		return (DataFileType) contigOutputFormat.getSelectedItem();
	}
	
	/**
	 * Convenience method used by wizard to obtain the set of
	 * parameters configured on this page.
	 * 
	 * @return The set of EAST command line parameters configured
	 * by the user.
	 * 
	 */
	protected ArrayList<Param> getParamList() {
		ArrayList<Param> paramList = new ArrayList<Param>();
		final int numLevels = ((Number) numOfLevels.getValue()).intValue();
		paramList.add(new Param("-NUMOFLEVELS", "" + numLevels));
		if (useBoundedNW.isSelected()) {
			paramList.add(new Param("-USE_BOUNDED_NW", null));
		}
		if (!contigOutputFormat.getSelectedItem().equals(DataFileType.FASTA)) {
			paramList.add(new Param("-OUTPUT_ACE", null));
		}
		return paramList;
	}
	
	/**
	 * A boolean flag indicating whether to use  bounded 
	 * version of Needleman-Wunsch (NW) algorithm to get NW 
	 * score when computing overlap distance. Use bounded 
	 * version may reduce the accuracy, but save time.</li>
	 */
	private JCheckBox useBoundedNW;
	
	/**
	 * The set of output file formats in which the contigs from
	 * EAST are to be written.
	 */
	private JComboBox contigOutputFormat;
	
	/**
	 * The number of levels used to explore a Minimum Spanning
	 * Tree (MST) to determine a "real" left end of a contig. 
	 * Zero (0) is the default, meaning doing until leaves of
	 * the MST. For two non-zero integers <i>a</i> and <i>b</i>
	 * (<i>a</i> &lt; <i>b</i>), setting this parameter to <i>a<i>
	 * will lead to longer runtime (than setting it to <i>b</i>) 
	 * while setting it to <i>b</i> will lead to better quality 
	 * in finding the "real" left end.
	 */
	private JSpinner numOfLevels;
	
	/**
	 * A reference to the wizard dialog that logically owns this
	 * page. This reference is used to enable and disable 
	 * buttons on this wizard appropriately.
	 */
	private final EASTJobWizard wizard;
	
	/**
	 * A generic informational message that is displayed at the
	 * top of this wizard page providing a brief overview of the
	 * purpose of this page.
	 */
	private static final String PAGE_INFO_MSG = 
		"<html>" +
		"Configure the parameters that play an important role in<br/>" +
		"the overall operations of the EAST assembler." +
		"</html>";
	
	/**
	 * A generic informational message that is displayed along with
	 * the MST depth numeric input. This message is meant to provide
	 * a brief description of the purpose of the input.
	 */
	private static final String NUMLEVELS_INFO_MSG = 
		"<html><b>Set MST-neighborhood exploration threshold</b><br/>" +
		"<font size=\"-2\">Larger values increases exploration space to provide<br/>"+
		"better contigs but increase runtime. Zero implies expore full MST." +
		"</font></html>";
	
	/**
	 * A generic informational message that is displayed along with
	 * the choice of using (or not using) bounded needleman-wunsch.
	 */
	private static final String BOUNDED_NW_INFO_MSG = 
		"<html><b>Use bounded Needleman-Wunsch (NW)</b><br/>" +
		"<font size=\"-2\">When checked, notably decreases assembly time at the<br/>"+
		"cost of some minor reduction in overall quality of contigs." +
		"</font></html>";
	
	/**
	 * A generic informational message that is displayed along with
	 * the choice of output file format for contigs generated by
	 * EAST.
	 */
	private static final String CONTIG_OUTPUT_INFO_MSG = 
		"<html><b>Select output file format for contigs</b><br/>" +
		"<font size=\"-2\">Select the file format in which the contigs<br/>" +
		"generated by the assembler are to be stored. Output file path<br/>" +
		"will be set in subsequent steps in this wizard." +
		"</font></html>";
	
	/**
	 * A generated serialization UID to keep the compiler happy.
	 */
	private static final long serialVersionUID = -1560174917966066396L;
}
