//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

package org.peace_tools.data;

import java.io.PrintStream;
import java.util.ArrayList;

/**
 * A class that represents a single node in a Minimum Spanning Tree (MST).
 * 
 * This class is a pure data class that is used to encapsulate the information
 * pertaining to a node on a Minimum Spanning Tree (MST). This class is a
 * self-referential structure, in that the child nodes of this class are MSTNode
 * objects. This definition permits a MSTNode to contain a complete sub-tree as
 * a part of it. The MSTNode objects are created and used by the MST class that
 * represents the top-level MST.
 */
public class MSTNode {
	/** Constructor to create a MSTNode.
	 * 
	 * This constructor provides a convenient mechanism to create and 
	 * initialize an MSTNode object with necessary information.
	 * 
	 * @param parent The parent node for this MST. If this node is the root
	 * node in the MST, then this parameter can be null.
	 * 
	 * @param estIndex The index of the EST.  This value must be the index 
	 * of the corresponding EST in the list of ESTs in the ESTList
	 * associated with the MST in which this node is present.
	 *  
	 * @param nodeMetric The similarity/distance metric between this EST and
	 * its parent EST.
	 * 
	 * @param alignment The alignment metric generated by a given EST analyzer
	 * indicating some of the alignment relationship between this node and its
	 * parent node.
	 */
	public MSTNode(MSTNode parent, int estIndex, float nodeMetric, int alignment) {
		this.parent = parent;
		this.estIdx = estIndex;
		this.metric = nodeMetric;
		this.alignmentMetric = alignment;
		this.childNodes      = null;
	}

	/**
	 * Add another MSTNode as the child node of this node. This method
	 * adds the given node as a child node. In addition it also sets up
	 * the parent reference in the child to point to this node.
	 * 
	 * @param node The node to be added as a direct child of this node.
	 */
	public void addChild(MSTNode node) {
		if (childNodes == null) {
			childNodes = new ArrayList<MSTNode>();
		}
		node.parent = this;
		childNodes.add(node);
	}
	
	/**
	 * Determine if this node is the root node.
	 * 
	 * <p><b>Note:</b>  This method is meaningful only after a 
	 * complete MST has been built.</p>
	 * 
	 * @return This method returns true if the parent of this node is
	 * null, indicating this is a root node.
	 */
	public boolean isRoot() { return parent == null; }

	/**
	 * Determine if this node is a leaf node that has no child nodes.
	 * 
	 * <p><b>Note:</b>  This method is meaningful only after a 
	 * complete MST has been  built.</p>
	 * 
	 * @return This method returns true if this node has no children.
	 */
	public boolean isLeaf() { return childNodes == null; }
	
	/** Returns the metric value set for this node.
	 * 
	 *  This method returns the metric value for this node when the node
	 *  was instantiated.
	 *   
	 *  @return The metric value set for this node.
	 */
	public float getMetric() { return metric; }

	/** Returns the distance metric value set for this node.
	 * 
	 *  This method returns the distance metric value for this node when\
	 *  the node was instantiated.
	 *  
	 *  @return The distance metric value set for this node.
	 */
	public int getAlignmentMetric() { return alignmentMetric; }

	/**
	 * Obtain the index of the EST associated with this node.
	 * 
	 * @return The zero-based index of the EST that this node represents. 
	 * This value is the index of the corresponding EST in the list of 
	 * ESTs in the ESTFile associated with this MST.
	 */
	public int getESTIndex() { return estIdx; }

	/**
	 * This method returns the EST index and metric as a string.
	 * 
	 * @return This method returns a simple string representation of
	 * the data stored in this MSTNode.
	 */
	@Override
	public String toString() {
		return "" + estIdx + " (" + metric + ")";
	}

	/**
	 * Method to recursively print the information that is stored in this 
	 * node. This method recursively prints the child nodes. This method
	 * provides a convenient mechanism to validate the data stored in
	 * this node. 
	 * 
	 * @param out The output stream to which the data is to be serialized.
	 * @param node The node to 
	 * @param indent The number of spaces to be used to indent the output.
	 */
	public void print(PrintStream out, MSTNode node, String indent) {
		// First print the EST node itself.
		out.println(indent + node);
		// Now print the child nodes indented one more step.
		indent = indent + " ";
		// Print the nodes if we have any.
		if (childNodes != null) {
			for(MSTNode child: childNodes) {
				child.print(out, child, indent);
			}
		}
	}
	
	/**
	 * Obtain the child nodes for this node.
	 * 
	 * This method can be used to obtain the child nodes associated
	 * with this MST node. If the nodes do not have any children then
	 * this method returns null.
	 * 
	 * @return This method returns the array list containing the
	 * list of nodes associated with this MST node.
	 */
	public ArrayList<MSTNode> getChildren() {
		return childNodes;
	}
	
	/** The parent node for this MSTNode. If this MSTNode is the root 
	 * node then it has no parent (that is parent is null).
	 */
	private MSTNode parent;

	/**
	 * This array list contains the list of child nodes for this
	 * node.
	 */
	private ArrayList<MSTNode> childNodes;

	/** The zero-based index of the EST that a given MST node represents. 
	 * This value is the index of the corresponding EST in the list of 
	 * ESTs in the ESTFile associated with this MST.
	 */
	int estIdx;

	/** The similarity/distance metric generated by a given EST analyzer 
	 * indicating the relationship between this node and its parent node.
	 */
	float metric;

	/** The alignment metric generated by a given EST analyzer indicating some 
	 * of the alignment relationship between this node and its parent node.
	 */
	int alignmentMetric;
}
