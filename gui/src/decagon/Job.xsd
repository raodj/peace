<?xml version="1.0" encoding="UTF-8"?>
<!-- The XML Schema definition for a configuration file that provides
     necessary information regarding a job to be run for a genomic
     assembler
-->

<!--
	
	This DECAGON file is part of PEACE.
	
	PEACE is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	PEACE is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.
 
	You should have received a copy of the GNU General Public License
	along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
	
	Miami University makes no representations or warranties about the
	suitability of the software, either express or implied, including
	but not limited to the implied warranties of merchantability,
	fitness for a particular purpose, or non-infringement.  Miami
	University shall not be liable for any damages suffered by
	licensee as a result of using, result of using, modifying or
	distributing this software or its derivatives.

	By using or copying this Software, Licensee agrees to abide by the
	intellectual property laws, and all other applicable laws of the
	U.S., and the terms of GNU General Public License (version 3).
	
	Authors:   Dhananjai M. Rao              raodm@muohio.edu

-->

<!--
    This XML file is used to generate the JAXB classes to marshal
    and unmarshal XML files that define the executables, jobs, and
    processes to be run for genomic-assemblers used by DECAGON. 
    
    NOTE: Each time this schema is changed new JAXB bindings
    must be generated using the following command from peace/gui/src
    directory:
    
    cd peace/gui/src
    xjc -d . -p "org.peace_tools.decagon.jaxb" -npa decagon/Assembler.xsd
    
    Edit the file AssemblerDetails.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="assemblerDetails", namespace="http://www.peace-tools.org/decagon/")
    
    Next, edit the file Parameter.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="parameterSet", namespace="http://www.peace-tools.org/decagon/")
 -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.peace-tools.org/decagon/"
	xmlns="http://www.peace-tools.org/decagon/"
	xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    jaxb:version="2.0" 
	elementFormDefault="qualified">

	<!-- Include the definition for Job related information that are 
	     defined in a separate schema file. Specifically the definition for
		 the complex type Executable . -->
	<xsd:include schemaLocation="Executable.xsd"/>
	
	<!-- Schema definition for type of job -->
	<xsd:simpleType name="JobKind">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
				This enumeration defines the different kinds of jobs
				that can be used within a DECAGON pipeline as described
				in the list below:
				
				<table border="0">
				<tr><td>serial</td><td>A single process, single thread on a single compute-node</td></tr>
				<tr><td>multithreaded</td><td>A single process, multiple threads on a compute-node with several cores</td></tr>
				<tr><td>parallel</td><td>Multiple processes on multiple compute nodes</td></tr>
				</table>
				]]>
			 </xsd:documentation>
		</xsd:annotation>
  		<xsd:restriction base="xsd:string">
    		<xsd:enumeration value="serial"/>
			<xsd:enumeration value="multithreaded"/>
			<xsd:enumeration value="parallel"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- The different types of output file types to facilitate viewing of
	     the generated output file in a GUI.  -->
	<xsd:simpleType name="OutputFileType">
		<xsd:annotation>
			<xsd:documentation>
				This enumeration defines the different kinds of output
				files that are generated by various processes. The names
				of the enumerations are sufficiently self explanatory.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fasta" />
			<xsd:enumeration value="sff" />
			<xsd:enumeration value="ace" />
			<xsd:enumeration value="sam" />
			<xsd:enumeration value="bam" />
			<xsd:enumeration value="tsv" />
			<xsd:enumeration value="txt" />
			<xsd:enumeration value="binary" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="OutputFile">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	A element/class to encapsulate information about an output file
	generated by a process in the pipeline.
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>
			<xsd:element name="path" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	Name (along with optional path)
	A string to be passed as the command-line argument. This string can
	include variable references as well. Here is an example: 
	--estFile %INPUT_FILE_PATH% --output %OUTPUT_FILE_PATH% 
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="fileType" type="OutputFileType">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	The type of the output file. This value can be used to suitably
	process and display the contents of the file.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>			
			</xsd:element>
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	A brief description about the purpose and contents of the file.
	This description is used to provide the user with additional/useful
	information to indicate the use of this file.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>			
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="isContigFile" type="xsd:boolean" default="false" >
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	This flag must be present on exactly one output file to indicate that
	this is the final output file that contains the contigs generated by
	the genomic-assembler/pipeline. This file is further processed by
	various components of DECAGON to generate various metrics for
	comparative analysis.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="ResourceFactors">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	A element/class to encapsulate information about suggested 
	resources to be used for the job. This information is used
	to suggest suitable scale factors for resources to be 
	allocated to the job.
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>
			<xsd:element name="ntMemScale" type="xsd:double">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	These element is used to provide a scale factor for the 
	amount of memory to be requested for the job. This scale
	factor is multiplied with the number of nucleotides and
	added to the base constant 256 MB of memory to compute 
	the net	memory to be suggested to the user.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="cntMemScale" type="xsd:double">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	These element is used to provide a scale factor for the 
	amount of memory to be allocated for the job. This scale
	factor is multiplied with the number of cDNA fragements to
	be assembled and added to the memory requirement to compute
	the net memory to be suggested to the user. The net memory
	is the maximum memory to be rested to be reserved for the job
	on a supercomputing cluster.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="ntTimeScale" type="xsd:double">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	These element is used to provide a scale factor for the 
	amount of time to be allocated for the job. This scale
	factor is multiplied with the number of nucleotides and
	added to the base constant time of 1 minute to compute 
	the maximum time to be requested for the job on a 
	supercomputing cluster.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="cntTimeScale" type="xsd:double">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	These element is used to provide a scale factor for the 
	amount of time to be allocated for the job. This scale
	factor is multiplied with the number of cDNA fragements to
	be assembled and added to the time to be reserved. This
	value is added to the base constant time to compute
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="Job">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	This is the top-level element that encapsulates all the necessary
	information to run a job associated with a genomic-assembler or a
	DECAGON software pipeline. A job (synonymous with a PBS job) conists 
	of one or process processes (usually one) that is run on a given 
	server or supercomputing cluster. 
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>

		<xsd:sequence>
			<xsd:element name="resourceFactors" type="ResourceFactors">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	Different genomic-assemblers require different runtimes and use 
	different amounts of memory. This element provides scaling factors 
	that can be used to suggest to the user the maximum amount of runtime
	and memory to request for the job. This value is a suggestion and the
	user can modify it appropriately. The suggestion is based on the 
	the number of cDNA fragments to be assembled and the number of 
	nucleotides to be assembled. The scale factors should be set
	conservatively high -- that is it is it is better to set it to a 
	higher value than a lower value. This information is used for
	submitting jobs on a supercomputing platform that uses a PBS-type
	system for job scheduling.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	A very short (no more than 10 to 12 characters long) name for the job
	that is used when scheduling the job on supercomputing clusters. This
	merely provides the user with convenient information from reviewing job
	queue on a cluster.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="description" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	A description about the job to be displayed to the user. The description
	typically provides information about the operations performed by the
	job and the data generated from the job.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="process" type="Process" minOccurs="1" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This element provides full information about the sequence of processes
	to be run as part of this job. Processes specified are run serially
	(one after another) assuming each process in the step successfully completes.
	Refer to the details associated with the Process element for additional 
	details about the information associated with each process.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="outputFile" type="OutputFile" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	Information about an signficiant output file generated by this 
	process. Typically these files are meaningful to the user for 
	further inspection/processing. Note that only one file in the
	series of jobs/processes must have the isConfigFile attribute
	set to true.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>			
			</xsd:element>

			<xsd:element name="progressReporter" type="xsd:string" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This optional element can contain a shell script that will be periodically
	(every 30 seconds or so) executed on the remote server (on which the job 
	is running) to determine overall progress of the job. The output from the 
	shell script should be the current progress information in the form:
	<currProg>,<maxProgress>; for example: 5, 100 (indicating 5% of the work
	has been completed). The script can use DECAGON bind variables
	as needed.  An example of a script that reports progress could be
	of the form:
	
	<code><pre>
	#!/bin/bash
	total=`grep -c "^>" src_dna.txt`
	processed=`grep -i "processed: " debug_output.txt | tail -1 | cut -d':' -f2`
	echo $processed, $total
	</pre></code>
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>						
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="type" type="JobKind" use="required" >
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
					<![CDATA[
	This enumeration defines the different kinds of jobs
	that can be used within a DECAGON pipeline as described
	in the list below:
	
	<table border="0">
	<tr><td>serial</td><td>A single process, single thread on a single compute-node</td></tr>
	<tr><td>multithreaded</td><td>A single process, multiple threads on a compute-node with several cores</td></tr>
	<tr><td>parallel</td><td>Multiple processes on multiple compute nodes</td></tr>
	</table>
	
					]]>
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

</xsd:schema>
