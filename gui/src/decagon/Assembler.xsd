<?xml version="1.0" encoding="UTF-8"?>
<!-- The XML Schema definition for a configuration file that provides
     necessary information to work with a genomic assembler -->

<!--
	
	This DECAGON file is part of PEACE.
	
	PEACE is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	PEACE is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.
 
	You should have received a copy of the GNU General Public License
	along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
	
	Miami University makes no representations or warranties about the
	suitability of the software, either express or implied, including
	but not limited to the implied warranties of merchantability,
	fitness for a particular purpose, or non-infringement.  Miami
	University shall not be liable for any damages suffered by
	licensee as a result of using, result of using, modifying or
	distributing this software or its derivatives.

	By using or copying this Software, Licensee agrees to abide by the
	intellectual property laws, and all other applicable laws of the
	U.S., and the terms of GNU General Public License (version 3).
	
	Authors:   Dhananjai M. Rao              raodm@muohio.edu

-->

<!--
    This XML file is used to generate the JAXB classes to marshal
    and unmarshal XML files that define the various parameters to
    the genomic-assemblers used by DECAGON. 
    
    NOTE: Each time this schema is changed new JAXB bindings
    must be generated using the following command from peace/gui/src
    directory:
    
    cd peace/gui/src
    xjc -d . -p "org.peace_tools.decagon.jaxb" -npa decagon/Assembler.xsd
    
    Edit the file AssemblerDetails.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="assemblerDetails", namespace="http://www.peace-tools.org/decagon/")
    
    Next, edit the file Parameter.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="parameterSet", namespace="http://www.peace-tools.org/decagon/")
 -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.peace-tools.org/decagon/"
	xmlns="http://www.peace-tools.org/decagon/"
	xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    jaxb:version="2.0" 
	elementFormDefault="qualified">

	<!-- Include the definition for Job related information that are 
	     defined in a separate schema file. Specifically the definition for
		 the complex type Job. -->
	<xsd:include schemaLocation="Job.xsd"/>
	
	<xsd:element name="assemblerDetails" type="AssemblerDetails">
		<xsd:annotation><xsd:documentation>
				<![CDATA[
				This is the top-level element that encapsulates all parameters
				for a given genomic assembler. There are two sets of parameters
				that are associated with an assembler. The first set of
				parameters are used to verify that an assembler has been
				correctly located. The second set of parameters are used
				to run assembly jobs with the assember.
				]]>
		</xsd:documentation></xsd:annotation>
	</xsd:element>
	
	<xsd:complexType name="AssemblerDetails">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	This is the top-level element that encapsulates all the necessary
	information to run the software pipeline associated with a genomic
	assembler. The software pipeline includes one or more executables to
	be run in a serial manner to assemble a given data set. Each
	executable may accept one or more command-line arguments. The value
	for command-line arguments is either obtained from pre-defined DECAGON
	bind variables or obtained fromn the user via command-line parameters.
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This is a simple/short name for the genomic-assembler/pipeline.
	Optional version numbers maybe included in the name if
	multiple-versions exists. Examples would be: EAST-0.95,
	or BATON-0.1 etc. This string should be really short 
	(preferably no more than 16 characters) as
	it is used in various spots in the GUI under this 
	assumption. 
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This is a generic description about the assembler
	that is presented to the user to provide additional
	information about the assembler. If this description
	contains HTML presentation tags then they must be 
	represented as corresponding XML entities.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="icon" type="xsd:string" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	An optional path to an image file (typically PNG) that serves
	as an icon to be assoicated with this assembler in menus and
	other locations. The given ICON is scaled to a 24x24 or 16x16
	size as needed in the GUI. The file name is typically relative
	to the location of the description XML file.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="executable" type="Executable" minOccurs="1" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	Information regarding the list of executables that are associated
	with this assembler/software-pipeline. Refer to the documentation on
	each element in the Executable type for additional details on the
	information to be supplied about each executable. 
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
					
			<xsd:element name="assemblyParams" type="ParameterSet">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This element defines the set of parameters that need to be passed
	to the genomic assembler exectuable(s) to to perform assembly. This
	parameter list can uses various DECAGON-variables that are
	defined by DECAGON. In addition, the parameters can be conditionally
	defined to ensure appropriate parameters are used. The bind variables
	must be used to address the cDNA file to be assembled, obtain information
	about the type of reads in the cDNA file, the host operating system,
	etc. Refer to ParameterSet.xsd file for details on the various bind 
	variables that are defined by DECAGON for use as parameters. 
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="job" type="Job" minOccurs="1" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	The actual work of genomic-assembly is performed by scheduling jobs. A
	job is an unique, top-level element that encapsulates all the necessary
	information to run a job associated with a genomic-assembler or a
	DECAGON software pipeline. A job (synonymous with a PBS job) conists 
	of one or process processes (usually one) that is run on a given 
	server or supercomputing cluster. Refer to the definition in Job.xsd
	file for details on the various information encapsulated by this element.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

		</xsd:sequence>
	</xsd:complexType>

</xsd:schema>
