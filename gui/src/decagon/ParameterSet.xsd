<?xml version="1.0" encoding="UTF-8"?>
<!-- The XML Schema definition for DECAGON ParameterSet configuration file -->

<!--
	
	This DECAGON file is part of PEACE.
	
	PEACE is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	PEACE is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.
 
	You should have received a copy of the GNU General Public License
	along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
	
	Miami University makes no representations or warranties about the
	suitability of the software, either express or implied, including
	but not limited to the implied warranties of merchantability,
	fitness for a particular purpose, or non-infringement.  Miami
	University shall not be liable for any damages suffered by
	licensee as a result of using, result of using, modifying or
	distributing this software or its derivatives.

	By using or copying this Software, Licensee agrees to abide by the
	intellectual property laws, and all other applicable laws of the
	U.S., and the terms of GNU General Public License (version 3).
	
	Authors:   Dhananjai M. Rao              raodm@muohio.edu

-->

<!--
    This XML file is used to generate the JAXB classes to marshal
    and unmarshal XML files that define the various parameters to
    the external programs and genomic-assemblers used by DECAGON. 
    
    NOTE: Each time this schema is changed new JAXB bindingings
    must be generated using the following command from peace/gui/src
    directory:
    
    cd peace/gui/src
    xjc -d . -p "org.peace_tools.decagon.jaxb" -npa decagon/Assembler.xsd
    
    Edit the file AssemblerDetails.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="assemblerDetails", namespace="http://www.peace-tools.org/decagon/")
    
    Next, edit the file Parameter.java and add the following annotation
    if it is not automatically generated by your version of xjc:
    @XmlRootElement(name="parameterSet", namespace="http://www.peace-tools.org/decagon/")    
 -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.peace-tools.org/decagon/"
	xmlns="http://www.peace-tools.org/decagon/"
	xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    jaxb:version="2.0" 
	elementFormDefault="qualified">

	<xsd:element name="parameterSet" type="ParameterSet">
		<xsd:annotation><xsd:documentation>
				<![CDATA[
				This is the top-level element that encapsulates all parameters
				for a given DECAGON module, external program, or a genomic-
				assembler. A parameter set essentially consists of a set of
				parameters. Selected parameters can behave as a "controller"
				(its data type must be boolean) to enable/disable the 
				set of subsequent parameters.
				]]>
		</xsd:documentation></xsd:annotation>
	</xsd:element>
	 
	<xsd:complexType name="ParameterSet">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	This is the top-level element that encapsulates all parameters
	for a given DECAGON module, external program, or a genomic-
	assembler. A parameter set essentially consists of a set of
	parameters. Selected parameters can behave as a "controller"
	(its data type must be boolean) to enable/disable the 
	set of subsequent parameters.
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This is a generic description about this parameter
	set. The first sentence (terminated by a period) must
	be a short as it is used as a title in GUI components
	displaying this parameter set. If this description
	contains HTML presentation tags then they must be 
	represented as corresponding XML entities.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
			<xsd:element name="parameter" type="Parameter" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	A parameter set can have several parameters.
	Typically the first parameter is a controller than
	can be used to enable/disable all subsequent 
	parameters in the parameter set. Refer to the
	documentation on the Parameter class for additional
	details about each parameter.
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>			
		</xsd:sequence>

	</xsd:complexType>
	
	<!--  Schema definition for conditions in parameters -->
	<!-- Schema definition for type of parameter -->
	<xsd:simpleType name="ComparatorKind">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
				This enumeration defines the different kinds of 
				comparison or decision operations that can be used
				in a Condition. A compartor is essentially a boolean
				operation such as: equal-to, not-equal-to, less-than,
				etc. These enumerations are used to define Conditions.
				The list of conditional strings and their interpretation
				is shown below.
				
				<table border="0">
				<tr><td>eq</td><td>Check if a string or numerical variable is equal to a given value</td></tr>
				<tr><td>neq</td><td>Check if a string or numerical variable is not equal to a given value</td></tr>
				<tr><td>lt</td><td>Check if a string or numerical variable is less than a given value</td></tr>
				<tr><td>lte</td><td>Check if a string or numerical variable is less than or equal to a given value</td></tr>
				<tr><td>gt</td><td>Check if a string or numerical variable is greater than a given value</td></tr>
				<tr><td>gte</td><td>Check if a string or numerical variable is greater than or equal to a given value</td></tr>
				<tr><td>def</td><td>Check if a string or numerical variable is defined</td></tr>
				<tr><td>ndef</td><td>Check if a string or numerical variable is not defined</td></tr>				
				</table>
				]]>
			</xsd:documentation>
		</xsd:annotation>
  		<xsd:restriction base="xsd:string">
    		<xsd:enumeration value="eq"/>
			<xsd:enumeration value="neq"/>
			<xsd:enumeration value="lt"/>
			<xsd:enumeration value="lte"/>
			<xsd:enumeration value="gt"/>
			<xsd:enumeration value="gte"/>
			<xsd:enumeration value="def"/>
			<xsd:enumeration value="ndef"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="ConnectorKind">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
				This enumeration defines the different types of
				connectors that can be used to form compound 
				conditions in parameter definitions.
				The list of condition connectors that can be used
				are tabulated below:
				
				<table border="0">
				<tr><td>and</td><td>Boolean AND connector to connect two conditions</td></tr>
				<tr><td>or</td><td>Boolean OR connector to connect two conditions</td></tr>
				</table>
				]]>
			</xsd:documentation>
		</xsd:annotation>
  		<xsd:restriction base="xsd:string">
    		<xsd:enumeration value="and"/>
			<xsd:enumeration value="or"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="Condition">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	This type defines the basic constructs for conditional parameters in
	a DECAGON configuration or assembler parameter definition XML file.
	Conditions can have nested sub-conditions and in such cases they are
	called compound-conditions. Conditions that do not have nested
	sub-conditions are called simple conditions. When a list of conditions
	are specified connected by condition connectors (namely: "and" or "or"),
	the connectors are applied in the order in which they are specified. This
	is different than traditional Boolean expressions where "and" has higher
	precedence over "or". An example of a conditional fragment in a
	parameter is shown below:
	
	&lt;blockquote&gt;&lt;pre&gt;
	&lt;decagon:parameter name="AsmErrorFlag"&gt;
        &lt;decagon:condition var="OS" comp="eq" value="Linux" connector="and"/&gt;
        &lt;decagon:condition var="SANGER_SUB_ERR" comp="gt" value="0" connector="and"/&gt;

	    &lt;decagon:kind&gt;BOOLEAN&lt;/decagon:kind&gt;
	    &lt;decagon:cmdLine&gt;--has-subst-errs&lt;/decagon:cmdLine&gt;
	    &lt;decagon:cmdLineKind&gt;IMPLICIT_VALUE&lt;/decagon:cmdLineKind&gt;
	    &lt;decagon:value&gt;true&lt;/decagon:value&gt;
	    &lt;decagon:mutable&gt;false&lt;/decagon:mutable&gt;
	    &lt;decagon:hidden&gt;true&lt;/decagon:hidden&gt;
	    &lt;decagon:description&gt;Flag passed to assembler's command-line when 
	    sanger sequences have substitution errors in them&lt;/decagon:description&gt;
    &lt;/decagon:parameter&gt;
    &lt;/pre&gt;&lt;/blockquote&gt;
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>

		<xsd:sequence>
			<xsd:element name="condition" type="Condition" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	An optional list of sub-conditions associated with this condition. The
	sub-conditions are evaluated first prior to applying connectors with the
	main condition. 
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		
		<xsd:attribute name="var" type="xsd:string" use="required" >
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	Each condition is based on the presence (is the variable defined
	or not) or the value of a given DECAGON variable. This attribute
	refers to the variable to be used to evaluate a condition.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="comp" type="ComparatorKind" use="required">
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	Each condition requires a comparator that defines the type of 
	check (or comparison) to be performed. This attribute specifies the
	type of check to be performed. DECAGON supports a variety of 
	predefined conditions that can be used as the value for this
	attribute.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="numValue" type="xsd:double" use="optional">
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	Comparators other than "def" and "ndef" require a value to compare a
	variable against. This attribute must be used to specify the constant
	numeric value to be used in the comparsion operation. This value is
	used only if the variable used in the condition also has a numeric
	value. Otherwise this value is ignored and the strValue (if specified)
	is used for comparison.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="strValue" type="xsd:string" use="optional">
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	Comparators other than "def" and "ndef" require a value to compare a
	variable against. This attribute must be used to specify the constant
	string to be used in the comparsion operation. If intValue attribute
	is specified then it is given preference over the strValue.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>

		<xsd:attribute name="connector" type="ConnectorKind" use="optional" default="and">
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	Connectors must be used to connector sequence of Conditions together to 
	form a single compound boolean expression. The default connector is "and".
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>
		
	</xsd:complexType>
	
	<!-- Schema definition for type of parameter -->
	<xsd:simpleType name="ParameterKind">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[
				This enumeration defines the different kinds of inputs
				that can be associated with a parameter. The kind of
				the parameter determines the type of input (the user
				will be prompted for) GUI element that will be used
				as shown in the list below:
				
				<table border="0">
				<tr><td>BOOLEAN</td><td>A check-box for true/false input</td></tr>
				<tr><td>INTEGER</td><td>A spinner to select integer values</td></tr>
				<tr><td>DOUBLE</td><td>A text box for numeric inputs</td></tr>
				<tr><td>STRING</td><td>A text field to enter a line of input</td></tr>
				<tr><td>FILE</td><td>A text field + browse button to be used to select a file</td></tr>
				<tr><td>DIRECTORY</td><td>A text field + browse button to be used to select a directory</td></tr>
				<tr><td>CHOICE</td><td>A fixed list of choices for the user to select.</td></tr>
				<tr><td>DUMMY</td><td>A dummy component that does not require any input.</td></tr>
				</table>
				]]>
			</xsd:documentation>
		</xsd:annotation>
  		<xsd:restriction base="xsd:string">
    		<xsd:enumeration value="BOOLEAN"/>
			<xsd:enumeration value="INTEGER"/>
			<xsd:enumeration value="DOUBLE"/>
			<xsd:enumeration value="STRING"/>
			<xsd:enumeration value="FILE"/>
			<xsd:enumeration value="DIRECTORY"/>
			<xsd:enumeration value="CHOICE"/>
			<xsd:enumeration value="DUMMY"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<!-- Schema definition for type of parameter -->
	<xsd:simpleType name="CmdLineKind">
		<xsd:annotation>
			<xsd:documentation>
				This enumeration defines the different ways in which
				the command-line argument and its values are to be
				passed to the target program. 
				
				IMPLICIT_VALUE : Only command-line argument is included
				                 without its value. Used for boolean flags.
				                 (example: --turnDebugOn). This type is used
				                 only with BOOLEAN kind parameters.
				EXPLICIT_VALUE : Both command-line argument and value are
				                 placed one after another. This is the
				                 default value if no value is specified. 
				                 (example: --fastaFile test.fa)
				VALUE_ONLY     : Only the value is included without the
				                 actual command-line argument 
				                 (example: test.fa)
				IGNORE         : Parameter and value are ignored completely.
			</xsd:documentation>
		</xsd:annotation>
  		<xsd:restriction base="xsd:string">
    		<xsd:enumeration value="IMPLICIT_VALUE"/>
			<xsd:enumeration value="EXPLICIT_VALUE"/>
			<xsd:enumeration value="VALUE_ONLY"/>
			<xsd:enumeration value="IGNORE"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	
	<!-- Schema definition for an individual parameter -->
	<xsd:complexType name="Parameter">
		<xsd:annotation><xsd:appinfo>
			<jaxb:class><jaxb:javadoc>
	An individual parameter that can be used to obtain a specific
	input from the user. A parameter is typically never 
	instantiated and directly used. Instead a Parameter Set
	is created and parameters within the set are used.
			</jaxb:javadoc></jaxb:class>
		</xsd:appinfo></xsd:annotation>
		<xsd:sequence>

			<xsd:element name="condition" type="Condition" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	An optional list of conditions associated with this parameter. A
	parameter is used only if the condition evaluates to true. Conditions
	can have sub-conditions associated with them. Conditions are evaluated 
	in a recursive, depth-first manner. 
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="kind" type="ParameterKind">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	The kind for this parameter that defines the type of
	inputs to be obtained from the user.
	This enumeration defines the different kinds of inputs
	that can be associated with a parameter. The kind of
	the parameter determines the type of input (the user
	will be prompted for) GUI element that will be used
	as shown in the list below:
				
	<table border="0">
	<tr><td>BOOLEAN</td><td>A check-box for true/false input</td></tr>
	<tr><td>INTEGER</td><td>A spinner to select integer values</td></tr>
	<tr><td>DOUBLE</td><td>A text box for numeric inputs</td></tr>
	<tr><td>STRING</td><td>A text field to enter a line of input</td></tr>
	<tr><td>FILE</td><td>A text field + browse button to be used to select a file</td></tr>
	<tr><td>DIRECTORY</td><td>A text field + browse button to be used to select a directory</td></tr>
	<tr><td>DUMMY</td><td>A dummy component that does not require any input. This is useful
	<tr><td>CHOICE</td><td>A fixed list of choices for the user to select.</td></tr>
	for placing generic text providing additional information to user.</td></tr>
	</table>
						
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			<xsd:element name="cmdLine" type="xsd:string" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	An optional command-line argument string (if any)
	to be passed to the external program. 
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
			<xsd:element name="cmdLineKind" type="CmdLineKind" 
						 default="EXPLICIT_VALUE" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
						<![CDATA[
	This enumeration specifies how the command-line
	argument for the target program must be generated.
	Refer to the documentation on the type for
	additional details about how the values are 
	interpreted.
	
	This enumeration defines the different ways in which
	the command-line argument and its values are to be
	passed to the target program. 
	
	<table border="0">
		<tr><td>IMPLICIT_VALUE</td><td>Only command-line argument is included
				                 without its value. Used for boolean flags.
				                 (example: <code>--turnDebugOn</code>). This
				                 type is meant only to be used with BOOLEAN kind
				                 parameters.</td></tr>
		<tr><td>EXPLICIT_VALUE</td><td>Both command-line argument and value are
				                 placed one after another. This is the
				                 default value if no value is specified. 
				                 (example: <code>--fastaFile test.fa</code>)</td></tr>
		<tr><td>VALUE_ONLY</td><td>Only the value is included without the
				                 actual command-line argument 
				                 (example: <code>test.fa</code>)</td></tr>
		<tr><td>IGNORE</td><td>The parameter is to be ignored when generating
		                       command-line arguments.</td></tr>
	</table>
						]]>
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
			<xsd:element name="value" type="xsd:string" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	Optional default value for the command-line argument.
	This value must be appropriate for the type of the
	argument. That is INTEGER kind parameters should 
	have an integer value. For a DOUBLE kind parameter it should
	have a double value. For CHOICE parameter the value is a
	comma separated list of name:value pairs to be presented to the user
	(example: 36BP:error_model_36, 80 BP:error_model_80). 
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
			<xsd:element name="min" type="xsd:double" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	Optional value to limit the minimum value that the user can sepcify for
	INTEGER and DOUBLE type parameters. For other data types this value
	should not be present and if supplied it is ignored.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="max" type="xsd:double" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	Optional value to limit the maximum value that the user can sepcify for
	INTEGER and DOUBLE type parameters. For other data types this value
	should not be present and if supplied it is ignored.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
						
			<xsd:element name="mutable" type="xsd:boolean" 
				default="true" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	Flag to indicate if the user can change the default value.
	If this parameter is set to false, then the value is 
	displayed to the user but the user cannot edit it. This
	is used to pass mandatory parameters to the application.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
			<xsd:element name="hidden" type="xsd:boolean" default="false">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	Flag to indicate if this parameter should be actually
	shown to the user. Hidden parameters should be used
	sparingly. On one hand side they do reduce clutter
	and unnecessary parameters (that can cause confusion)
	from being displayed to the user. On the other hand side
	don't try to use this option in a sneaky manner as that
	will cause the user to mistrust the program.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	This is a generic description about this parameter.
	If this description contains HTML presentation tags 
	then they must be represented as corresponding XML 
	entities.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>

			<xsd:element name="summary" type="xsd:string" minOccurs="0">
				<xsd:annotation><xsd:appinfo>
					<jaxb:property><jaxb:javadoc>
	A short (about 10 words) summary description of this parameter.
	The summary information cannot contain HTML presentation tags.
	The summary information is used to provide the users with 
	succint information about the parameter.
					</jaxb:javadoc></jaxb:property>
				</xsd:appinfo></xsd:annotation>
			</xsd:element>
			
		</xsd:sequence>
		
		<xsd:attribute name="controller" type="xsd:boolean" default="false">
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	If this attribute is set to true then this parameter is
	interpreted as a top-level controller to enable/disable
	subsequent parameters in the parameter set. Typically
	the first parameter in a parameter set is the controller. 
	Its kind should be BOOLEAN.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>
		
		<xsd:attribute name="name" type="xsd:token" use="required" >
			<xsd:annotation><xsd:appinfo>
				<jaxb:property><jaxb:javadoc>
	Each parameter in a parameter set must have a unique name set
	for it. DECAGON's generic parameter handling infrastructure
	conunts on the parmaeter names being unique. If the parameter
	names are not unique then the result of operations performed
	by DECAGON is unsepecified.
				</jaxb:javadoc></jaxb:property>
			</xsd:appinfo></xsd:annotation>
		</xsd:attribute>
				
	</xsd:complexType>
	
</xsd:schema>
