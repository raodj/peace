<?xml version="1.0"?>
<!-- The XML Schema definition for PEACE workspace configuration file -->

<!--
	
	This file is part of PEACE.
	
	PEACE is free software: you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	PEACE is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.
 
	You should have received a copy of the GNU General Public License
	along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
	
	Miami University makes no representations or warranties about the
	suitability of the software, either express or implied, including
	but not limited to the implied warranties of merchantability,
	fitness for a particular purpose, or non-infringement.  Miami
	University shall not be liable for any damages suffered by
	licensee as a result of using, result of using, modifying or
	distributing this software or its derivatives.

	By using or copying this Software, Licensee agrees to abide by the
	intellectual property laws, and all other applicable laws of the
	U.S., and the terms of GNU General Public License (version 3).
	
	Authors:   Dhananjai M. Rao              raodm@muohio.edu

-->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.peace-tools.org/"
	xmlns="http://www.peace-tools.org/" elementFormDefault="qualified">

	<!-- Datatype for the version ID used further below in this schema  -->
	<xsd:simpleType name="VersionID">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="0.2" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- The Workspace root element definition. A workspace has the
		following information associated with it:
		
		1. A root directory where all files associated with the
		workspace are stored.
		2. A creation time stamp when the workspace was created.
		3. Zero or more DataSet elements (see definition for DataSet
		element further below).
		4. A ServerList element (see definition for the ServerList
		element further below.
	-->
	<xsd:element name="Workspace">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Directory" type="xsd:string" />
				<xsd:element name="CreationTimestamp" type="xsd:dateTime" />
				<xsd:element name="SeqCounter" type="xsd:positiveInteger"/>
				<xsd:element ref="DataSet" minOccurs="0" maxOccurs="unbounded" />
				<xsd:element ref="ServerList"/>
				<xsd:element ref="JobList"/>
				<xsd:element ref="ClassifierList"/>
			</xsd:sequence>
			<xsd:attribute name="Version" type="VersionID" use="required" />
		</xsd:complexType>
	</xsd:element>

	<!--
		A DataSet essentially defines the set of files that this
		workspace is dealing with. A DataSet is organized as follows:
		
		1. Every data set must have a primary ESTFile element that it is
		operating with.  This is source EST/FASTA file that contains
		the sequences being operated on.
		2. A DataSet may have zero or more MSTData element (or MST
		files) associated with it.
		3. A DataSet may have zero or more MSTClusterData elements (or
		clustering information associated with it).
	-->
	<xsd:element name="DataSet">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="ESTData" minOccurs="1" />
				<xsd:element ref="GeneratedFileList" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<!-- The ESTFile is the FASTA file that provides the core sequence
		data that is used to do all the analysis in this data set.  -->
	<xsd:simpleType name="DataFileType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="fasta" />
			<xsd:enumeration value="sff" />
			<xsd:enumeration value="ace" />
			<xsd:enumeration value="sam" />
			<xsd:enumeration value="bam" />
			<xsd:enumeration value="tsv" />
			<xsd:enumeration value="txt" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- The various enumerations that identify the
	     valid sequencing technologies that are currently
	     supported by PEACE  -->
	<xsd:simpleType name="SeqTechType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="SANGER" />
			<xsd:enumeration value="R454" />
			<xsd:enumeration value="ILLUMINA" />
			<xsd:enumeration value="UNKNOWN" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- The type definition for holding core statistics about a data file -->
	<xsd:complexType name="StatsType">
		<xsd:annotation>
			<xsd:documentation>
				Type definition for an element to hold some core/useful
				statistics about a data file. These values are used to
				provide useful information to the user without having to
				re-process the whole file. A single data set may have
				multiple entries, one for each type of genomic-sequencing
				technology.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="Count"      type="xsd:nonNegativeInteger"/>
			<xsd:element name="AvgLength"  type="xsd:decimal"/>
			<!-- Standard Deviation (SD) for average length -->
			<xsd:element name="LengthSD"   type="xsd:decimal"/>
			<xsd:element name="MinLength"  type="xsd:nonNegativeInteger"/>
			<xsd:element name="MaxLength"  type="xsd:nonNegativeInteger"/>
			<xsd:element name="LastUpdate" type="xsd:positiveInteger"/>
			<!-- Error percentage (if known) in this data set -->
			<!-- The insertion error rate in the data set -->
			<xsd:element name="InsErrRate" type="xsd:float" minOccurs="0" default="-1"/>
			<!-- Rate of deletion type errors in the data set -->
			<xsd:element name="DelErrRate" type="xsd:float" minOccurs="0" default="-1"/>
			<!-- Rate of substitution type errors in the data set -->
			<xsd:element name="SubErrRate" type="xsd:float" minOccurs="0" default="-1"/>
		</xsd:sequence>
		<!-- Attribute that indicates the sequencing technology associated
		     with this statistical information. 
		 -->
		<xsd:attribute name="seqTech" type="SeqTechType" default="UNKNOWN"/>
	</xsd:complexType>
		
	<xsd:element name="ESTData">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="ID" type="xsd:token"/>
				<xsd:element name="Path" type="xsd:string" />
				<xsd:element name="Description" type="xsd:string" />
				<!--  An optional element that contains detailed log
				      messages, typically for generated files. -->
				<xsd:element name="Log" type="xsd:string" minOccurs="0"/>
				<xsd:element name="Stats" type="StatsType" maxOccurs="unbounded"/>
				<!-- Information about the source file from where
				     this file was generated. This is only an optional
				     element.
				-->
				<xsd:element name="SourceInfo" minOccurs="0"/>
				<xsd:element name="SourceID" type="xsd:token" minOccurs="0"/>
			</xsd:sequence>
			<xsd:attribute name="fileType" type="DataFileType" default="fasta"/>
		</xsd:complexType>
	</xsd:element>

	<!-- The element that contains information and reference to the source data 
		set. The source data set refers to the source genes from which a file was 
		generated. The logs in the generated file contain additional information 
		about how the file was generated. The source information is need to 
		generate quality metrics for Contigs generated by an assembler. 
	-->
	<xsd:element name="SourceInfo">
		<xsd:complexType>
			<xsd:sequence>
				<!-- The full path to the source data file 
				     used as a fall-back. -->
				<xsd:element name="Path" type="xsd:string" />
				<!-- Path to the XML file that defines the source
				     definition  -->
				<xsd:element name="XMLPath" type="xsd:string" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<!-- Analyzer definitions. Add Baton approach below -->
	<xsd:simpleType name="MetricType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="distance" />
			<xsd:enumeration value="similarity" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="FWAnalyzerType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="d2" />
			<xsd:enumeration value="d2zim" />
			<xsd:enumeration value="twopassd2" />
			<xsd:enumeration value="clu" />
			<xsd:enumeration value="twopassd2_dont_adapt" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="FWAnalyzer">
		<xsd:annotation>
			<xsd:documentation>
				This element contains information regarding the
				Frame/Word concept-based analysis algorithm that
				was used to generate distance or similarity metric
				that was used to generate the Minimum Spanning Tree.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Type" type="FWAnalyzerType"/>
				<xsd:element name="WindowSize" type="xsd:positiveInteger"/>
				<xsd:element name="WordSize" type="xsd:positiveInteger"/>
				<xsd:element name="CacheType" type="xsd:string"/>
				<xsd:element name="CacheSize" type="xsd:positiveInteger"/>
			</xsd:sequence>
			<xsd:attribute name="metric" type="MetricType" use="required"/>
		</xsd:complexType>
	</xsd:element>
	
	<!-- [Heuristic definition ] -->
	<xsd:simpleType name="HeuristicType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="uv" />
			<xsd:enumeration value="tv" />
			<xsd:enumeration value="primes" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:element name="Param">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Name" type="xsd:string"/>
				<xsd:element name="Value" type="xsd:string" minOccurs="0"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="Heuristic">
		<xsd:annotation>
			<xsd:documentation>
				This is a generic heuristic element that can be used
				to include any heuristic (such as: the u/v or t/v
				heuristic) along with parameter values that was used
				for accelerating clustering.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Name" type="HeuristicType"/>
				<xsd:element ref="Param" 
					minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="HeuristicChain">
		<xsd:annotation>
			<xsd:documentation>
				A heuristic chain that simply contains a sequence of
				zero or more heuristics that were used for obtaining
				a specific set of data.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="Heuristic" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<!-- [Filter and Filter chain definitions ] -->
	<xsd:simpleType name="FilterType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="LengthFilter" />
			<xsd:enumeration value="LCFilter" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="Filter">
		<xsd:annotation>
			<xsd:documentation>
				This is a generic filter element that can be used to
				include information about a filter (such as: the
				LengthFilter or LCFilter heuristic) along with
				parameter values that was used for improving quality
				of clustering.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Name" type="FilterType"/>
				<xsd:element ref="Param" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="FilterChain">
		<xsd:annotation>
			<xsd:documentation>
				A filter chain that simply contains a sequence of zero
				or more filters that were used for creating a specific
				set of clusters obtaining a specific set of data.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="Filter" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<!--  enumerations defining different status values for jobs -->
		<xsd:simpleType name="JobType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="clustering" />
			<xsd:enumeration value="east" />
			<xsd:enumeration value="baton" />
			<xsd:enumeration value="decagon" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="JobStatusType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="starting" />
			<xsd:enumeration value="waiting" />
			<xsd:enumeration value="queued" />
			<xsd:enumeration value="running" />
			<xsd:enumeration value="finishing" />
			<xsd:enumeration value="success" />
			<xsd:enumeration value="failed" />
			<xsd:enumeration value="wait_failed" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:element name="JobSummary">
		<xsd:annotation>
			<xsd:documentation>
				This element contains brief but useful information about
				the job that was used to generate a given data file. More
				details on the job can be determined via the jobRef 
				attribute that references a particular job.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="Type" type="JobType"/>
				<xsd:element name="Status" type="JobStatusType"/>
				<xsd:element name="ServerName">
					<xsd:complexType>
						<xsd:simpleContent>
							<xsd:extension base="xsd:string">
								<xsd:attribute name="serverID" type="xsd:token" use="required"/>
							</xsd:extension>
						</xsd:simpleContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="CPUs" type="xsd:positiveInteger"/>
				<xsd:element name="RunTime" type="xsd:duration" minOccurs="0"/>
				<!-- The actual parameter string that was passed to PEACE
					 clustering engine to serve as a simple reference -->
				<xsd:element name="HeuristicsSummary" type="xsd:string"/>
				<!-- The actual parameter string that was passed to PEACE
					 clustering engine as simple reference -->
				<xsd:element name="FiltersSummary" type="xsd:string"/>
				<xsd:element name="ParametersSummary" type="xsd:string"/>
				<xsd:element name="PrevJobID" type="xsd:token" minOccurs="0"/>
			</xsd:sequence>
			<xsd:attribute name="jobID" type="xsd:token"/>
		</xsd:complexType>
	</xsd:element>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--  The element that defines data for each MST file. -->
		<xsd:simpleType name="MSTBuilderType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="mst" />
			<xsd:enumeration value="pmst" />
			<xsd:enumeration value="tmst" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--  The elements that defines output files in a data set -->
	<xsd:element name="GeneratedFileList">
		<xsd:annotation>
			<xsd:documentation>
				This element provides a logical collection of
				files that have been generated from a single job.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="JobSummary"/>
				<xsd:element ref="FileEntry" minOccurs="0" maxOccurs="unbounded"/>			
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>	

	<xsd:simpleType name="FileEntryType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="mst" />
			<xsd:enumeration value="cls" />
			<xsd:enumeration value="asm" />
			<xsd:enumeration value="stats" />
			<xsd:enumeration value="output" />
			<xsd:enumeration value="singletons" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:element name="FileEntry">
		<xsd:annotation>
			<xsd:documentation>
				This element represents a single logical file
				or artificact that was generated as the output of
				a Job run via this GUI. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="ID" type="xsd:token"/>			
				<xsd:element name="EntryType" type="FileEntryType"/>
				<xsd:element name="MimeType" type="DataFileType"/>
				<xsd:element name="Path" type="xsd:string"/>
				<xsd:element name="JobSrcPath" type="xsd:string" minOccurs="0"/>
				<xsd:element name="Description" type="xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>	
		
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--
		ServerList is just list of zero or more Server entries
	-->
	<xsd:element name="ServerList">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="SeqCounter" type="xsd:positiveInteger"/>
				<xsd:element ref="Server" minOccurs="0"
					maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<!-- First several definitions in this schema define the various
		types that are used by various elements further below.  -->
	<xsd:simpleType name="ServerType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="local" />
			<xsd:enumeration value="remote" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="ServerOS">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="unidentified" />
			<xsd:enumeration value="linux" />
			<xsd:enumeration value="unix" />
			<xsd:enumeration value="windows" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- This element represnets a server entry and defines all the
		information that is needed to access a server and run jobs is
		defined here.
	-->
	<!--  enumerations defining different status values for servers -->
	<xsd:simpleType name="ServerStatusType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="installing" />
			<xsd:enumeration value="install_failed" />
			<xsd:enumeration value="good" />
			<xsd:enumeration value="uninstalling" />
			<xsd:enumeration value="uninstall_failed" />
			<xsd:enumeration value="connect_failed" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:element name="Server">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="ID"   type="xsd:token" />
				<xsd:element name="Name" type="xsd:token" />
				<xsd:element name="Port" type="xsd:positiveInteger" minOccurs="0" maxOccurs="1"/>
				<xsd:element name="Description" type="xsd:string" />
				<xsd:element name="UserID" type="xsd:token"
					minOccurs="0" />
				<xsd:element name="InstallPath" type="xsd:string" />
				<xsd:element name="PollTime" type="xsd:duration"
					default="PT30S" />
				<xsd:element name="Status" type="ServerStatusType"/>
				<xsd:element name="hasEAST" type="xsd:boolean" minOccurs="0" maxOccurs="1"/>
				<!-- Flag to indicate if Distributed Environment for Comparative 
				Analysis of Genomic-Assemblers (DECAGON) is installed -->
				<xsd:element name="hasDECAGON" type="xsd:boolean" minOccurs="0" maxOccurs="1"/>
				<!-- Flag to indicate if this server has AMOS tools
					 installed on it. AMOS tools (see
					 http://sourceforge.net/apps/mediawiki/amos/)
					 are used to convert ACE to SAM -->
				<xsd:element name="hasAMOSTools" type="xsd:boolean" minOccurs="0" maxOccurs="1"/>				
			</xsd:sequence>
			<xsd:attribute name="type" type="ServerType" use="required" />
			<xsd:attribute name="os"   type="ServerOS"   use="optional" />
		</xsd:complexType>
	</xsd:element>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--
		JobList is just list of zero or more Job entries. 
		Each Job entry provides information about a job that is
		being run or has been run. Each job entry includes
		additional information about the job to verify its 
		operational status. This type is a common base class
		that is used to define ClusteringJob, EASTJob, and
		DECAGONJob. 
	-->	
	<xsd:complexType name="Job">
		<xsd:annotation>
			<xsd:documentation>
				This element defines the various values that
				are maintained for each job started by the GUI
				system. The ID is a locally generated ID while
				JobID is either a remote PBS job ID or a local
				process ID. The "Server" element contains ID of
				the server. Path contains the location where files
				(input and output) for this job are stored. The
				PrevJobID element contains the ID of the previous
				job which should be successfully completed before
				this job can run.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="Type" type="JobType"/>
			<xsd:element name="JobID" type="xsd:token"/>
			<xsd:element name="Description" type="xsd:string"/>
			<xsd:element name="ServerID" type="xsd:token"/>
			<xsd:element name="Path" type="xsd:string"/>
			<xsd:element name="Nodes" type="xsd:positiveInteger"/>
			<xsd:element name="CPUsPerNode" type="xsd:positiveInteger"/>
			<xsd:element name="Memory" type="xsd:positiveInteger"/>
			<xsd:element name="MaxRunTime" type="xsd:positiveInteger"/>
			<xsd:element name="StartTimestamp" type="xsd:dateTime" minOccurs="0"/>
			<xsd:element name="Status" type="JobStatusType"/>
			<xsd:element name="LastUpdateTimestamp" type="xsd:dateTime"/>
			<xsd:element name="RunTime" type="xsd:duration" minOccurs="0"/>
			<xsd:element name="PrevJobID" type="xsd:token" minOccurs="0"/>	
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="ClusteringJobType">
		<xsd:annotation>
			<xsd:documentation>
				This element defines the components of a clustering
				job. A clustering job includes all the core components
				of any job, as defined by the "Job" type. Consequently,
				the clustering job extends a base job. In addition, a 
				clustering job includes heuristics, filters, and other
				general parameters. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
    		<xsd:extension base="Job">
      			<xsd:sequence>
      				<!-- Now the heuristics and filter details live in the job
				 		which seems to where they belong logically. A summary
				 		string is present in the JobSummary element -->
				 	<xsd:element ref="FWAnalyzer"/>
				 	<xsd:element name="Threshold" type="xsd:integer"/>
					<xsd:element ref="HeuristicChain" minOccurs="0"/>
					<xsd:element ref="FilterChain" minOccurs="0"/>
					<xsd:element ref="Param" minOccurs="0" maxOccurs="unbounded"/>		
      			</xsd:sequence>
      		</xsd:extension>
      	</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="EASTJobType">
		<xsd:annotation>
			<xsd:documentation>
				This element defines the components of an EAST assembly
				job. A clustering job includes all the core components
				of any job, as defined by the "Job" type. Consequently,
				the EAST job extends a base job. In addition, a 
				EAST job includes a set of general parameters. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
    		<xsd:extension base="Job">
      			<xsd:sequence>
					<xsd:element ref="Param" minOccurs="0" maxOccurs="unbounded"/>		
      			</xsd:sequence>
      		</xsd:extension>
      	</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="DECAGONProcessType">
		<xsd:annotation>
			<xsd:documentation>
				This element defines the components of an DECAGON process.
				A DECAGON job is organized as one or more processes. This
				element contains information about a given DECAGON process.
				This list maintains just the name, value pairs for variables
				without any other additional information. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="CmdLine" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						This element contains the full, final command-line
						that was used to run this process. This command-line
						is constructed from the DADX file description for this
						process.
					</xsd:documentation>		
				</xsd:annotation>
			</xsd:element>
      	</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="DECAGONJobType">
		<xsd:annotation>
			<xsd:documentation>
				This element defines the components of an DECAGON assembly
				job. A DECAGON job includes all the core components
				of any job, as defined by the "Job" type. Consequently,
				this element extends a base job. In addition, a 
				DECAGON job is organized as one or more processes. Each
				process has a specific command-line that is run. The list
				of processes associated with this job are included in this
				element. 
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
    		<xsd:extension base="Job">
      			<xsd:sequence>
      				<xsd:element name="DADXFile" type="xsd:string">
      					<xsd:annotation>
      						<xsd:documentation>
      							This string contains the reference to the DADX file
      							that served as the template for creating this job.
      						</xsd:documentation>
      					</xsd:annotation>
      				</xsd:element>
      				<xsd:element ref="Param" minOccurs="0" maxOccurs="unbounded">
      					<xsd:annotation>
      						<xsd:documentation>
      							The list of DECAGON variables when this job was created
      							are listed here. The list of variables is comprehensive
      							and includes both Parameters (values entered by the user)
      							and automatic DECAGON variables. In addition, the list 
      							includes all variables immaterial of whether they were
      							actually used by this job. 
      						</xsd:documentation>
      					</xsd:annotation>
      				</xsd:element>
					<xsd:element name="Process" type="DECAGONProcessType" maxOccurs="unbounded"/>
      			</xsd:sequence>
      		</xsd:extension>
      	</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="JobList">
		<xsd:complexType>
			<xsd:sequence>
				<!--  sequence counter values are present only in the top-level job list
					  sublists do not have sequence counter values in them. -->
				<xsd:element name="SeqCounter" type="xsd:positiveInteger" minOccurs="0"/>
				<!-- A name for the job list. The name is used particularly for sublists
				     to display them in the job-tree -->
				<xsd:element name="Name"        type="xsd:string"/>
				<!--  A breif user-entered description. Typis typically used for sublists
				      create by the user or sublists automatically created by PEACE. -->
				<xsd:element name="Description" type="xsd:string"/>
				<!--  The job entries can either be a ClusteringJob, EASTJob, or
					  DECAGONJob repeated several time in some arbitrary order 
					  in which the user runs the jobs and deletes job entries. 
					  Job list can contain sub-lists in them. 
				-->
				<xsd:sequence minOccurs="0" maxOccurs="unbounded">
    				<xsd:choice>
      					<xsd:element name="ClusteringJob" type="ClusteringJobType"/>
      					<xsd:element name="EASTJob"       type="EASTJobType"/>
      					<xsd:element name="DECAGONJob"    type="DECAGONJobType"/>
      					<xsd:element ref="JobList"/>
      				</xsd:choice>
				</xsd:sequence>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--
		ClassifierList is just list of zero or more DBClassifier 
		entries. Each classifier entry provides information about
		identifiying a EST from a given data base. ESTs are 
		classified by applying a regular expression to the 
		information in a FASTA header.
	-->
	<xsd:element name="DBClassifier">
		<xsd:complexType>
			<xsd:annotation>
				<xsd:documentation>
					This element defines the various values that
					are maintained for each data base classifier
				</xsd:documentation>
			</xsd:annotation>
			<xsd:sequence>
				<xsd:element name="Description" type="xsd:string"/>
				<xsd:element name="RegExp" type="xsd:string"/>
				<xsd:element name="Color" type="xsd:integer"/>
				<xsd:element name="Enabled" type="xsd:boolean"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="ClassifierList">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="DBClassifier" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

</xsd:schema>
