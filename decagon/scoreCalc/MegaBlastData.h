#ifndef MEGABLAST_DATA_H
#define MEGABLAST_DATA_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

/** \file MegaBlastData.h

    \brief File containing the definition and implementation for
    MegaBlastData class that encapsulates selected results from
    running Megablast.

    This is a simple class that is used to encapsulate select results
    from running Megablast. This class is meant to be used in
    conjunction with the MegaBlastRunner class
*/

#include <iostream>

/** Class to encapsulate selected results from running Megablast.

    This class is relatively straightforward and provides a convenient
    place holder for encapsulating selected results from running
    Megablast. Specifically, this class encapsulates the following
    informatioin used by various sub-components constituting
    DECAGON:

    <ul>

    <li>\c genContigID : The ID of the contig generated by an
    genomic-assembler.  This is typically the header line of each
    sequence in a FASTA file. Note that Megablast retains only the
    first word from the header as the ID.</li>

    <li>\c srcContigID : The ID of the a transcript in the BLAST
    database that has the closest match to the generated contig.
    genomic-assembler.  This is typically the header line of each
    sequence in a FASTA file. Note that Megablast retains only the
    first word from the header as the ID.</li>

    <li>\c eValue : The Expect value (aka e-value) is a parameter that
    describes the number of hits one can "expect" to see by chance
    when searching a database of a particular size. It decreases
    exponentially as the Score (S) of the match
    increases. Essentially, the E value describes the random
    background noise.  The lower the E-value, or the closer it is to
    zero, the more "significant" the match is. However, keep in mind
    that virtually identical short alignments have relatively high E
    values. This is because the calculation of the E value takes into
    account the length of the query sequence. These high E values make
    sense because shorter sequences have a higher probability of
    occurring in the database purely by chance. For more details
    please see the calculations in the BLAST.</li>

    <li>\c bitScore : The bit-score value reported by Megablast.  The
    bit score gives an indication of how good the alignment is; the
    higher the score, the better the alignment. In general terms, this
    score is calculated from a formula that takes into account the
    alignment of similar or identical residues, as well as any gaps
    introduced to align the sequences. Bit scores are normalized,
    which means that the bit scores from different alignments can be
    compared, even if different scoring matrices have been used.
    </li>
    
    </ul>
*/
class MegaBlastData {
    friend std::ostream& operator<<(std::ostream&, const MegaBlastData&);
public:
    /** The default constructor.

        The default constructor initializes all the fields to invalid
        values. This constructor is primarily present to ease the use
        of this class with various Standard Template Library (STL)
        containers that require a default constructor for their
        operation.
    */
    inline MegaBlastData() : eValue(-1), bitScore(-1) {}

    /** A convenience constructor to initialize all values
        encapsulated by this class.

        This is a convenience constructor that can be used to
        initialize all the values (encapsulated by this class) to a
        related set of values. Typically these values are obtained
        from a single row of Megablast output. This constructor is
        typically invoked from the MegaBlastRunner class.

        \param[id] genContigID The ID of the contig generated by some
        assembler.  This value is obtained from the first column in
        Megablast output generated by running it with \c "-m 9"
        command-line argument.

        \param[in] srcTransID The ID of the best matching transcript
        in a given BLAST database. This value is obtained from the
        second column in Megablast output generated by running it with
        \c "-m 9" command-line argument.

        \param[in] eValue The expect value for the contig-transcript
        pair as reported by Megablast.  This value is extracted from
        the eleventh column in Megablast output generated by running
        it with \c "-m 9" command-line argument.

        \param[in] bitScore The bit score value for the
        contig-transcript pair as reported by Megablast.  This value
        is extracted from the twelfth column in Megablast output
        generated by running it with \c "-m 9" command-line argument.
    */
    MegaBlastData(const std::string& genContigID,
                  const std::string& srcTransID,
                  const double eValue,
                  const double bitScore);

    /** The destructor.

        The destructor has no special tasks to perform as this class
        does not use any dynamic memory. The destructor is present
        merely to adhere to coding conventions.
    */
    virtual ~MegaBlastData() {}

    /** Obtain the ID associated with the contig generated by an
        assembler.

        This method returns the ID associated with the contig
        generated by an assembler. For example, the header line in a
        FASTA file denotes the ID of a generated contig.  Note that
        Megablast only retains the first word (words delimited by
        white spaces) in a FASTA header as the ID. This method
        essentially returns the value that was set when this object
        was instantiated. The default value is an empty string (\c
        "").
        
        \return The ID associated with the contig generated by an
        assembler.
    */
    inline const std::string& getGenContigID() const { return genContigID; }

    /** Obtain the ID associated with the source transcript.

        This method returns the ID associated with the source
        transcript from the BLAST database used to run Megablast.  For
        example, the header line in a FASTA file denotes the ID of a
        generated contig.  Note that Megablast only retains the first
        word (words delimited by white spaces) in a FASTA header as
        the ID. This method essentially returns the value that was set
        when this object was instantiated. The default value is an
        empty string (\c "").


        \return The ID associated with the source transcript against
        which the assembler-generated contig had the best match.
    */    
    inline const std::string& getSrcTransID() const { return srcTransID; }

    /** The e-value reported by Megablast.

        The e-value for the contig-transcript pair as reported by
        Megablast.  The lower the E-value, or the closer it is to
        zero, the more "significant" the match is.  This method
        essentially returns the value that was set when this object
        was instantiated (with its non-default constructor). The
        default value is -1.
        
        \return The e-value for the contig-transcript pair
        (encapsulated by this class) as reported by Megablast.
     */
    inline double getEvalue() const { return eValue; }

    /** The bit-score reported by Megablast.

        The bit score for the contig-transcript pair as reported by
        Megablast.  The larger the bit score, the more "significant"
        the match is.  This method essentially returns the value that
        was set when this object was instantiated (with its
        non-default constructor). The default value is -1.
        
        \return The bit score value for the contig-transcript pair
        (encapsulated by this class) as reported by Megablast.
     */    
    inline double getBitScore() const { return bitScore; }
    
protected:
    /** The assembler generated contig ID.

        This instance variable contains the assembler generated contig
        ID for this object. This value is currently set when this
        object is instantiated.
    */
    std::string genContigID;

    /** The ID associated with the transcript.

        This instance variable contains the ID associated with the
        transcript. The transcript is present in the BLAST database
        against which Megablast was run.  This value is currently set
        when this object is instantiated.
    */
    std::string srcTransID;

    /** The Megablast generated expect value (e-value).

        This instance variable contains the e-value generated by
        Megablast for the contig-transcript pair.  This value is
        currently set when this object is insantiated.  This value is
        extracted from the eleventh column in Megablast output
        generated by running it with \c "-m 9" command-line argument.
    */
    double eValue;

    /** The Megablast generated bit score value.

        This instance variable contains the bit score generated by
        Megablast for the contig-transcript pair.  This value is
        currently set when this object is insantiated.  This value is
        extracted from the twelfth column in Megablast output
        generated by running it with \c "-m 9" command-line argument.
    */
    double bitScore;
    
private:
    // Currently, this class does not have any private members.
};

/** \fn std::ostream& operator<<(std::ostream&, const MegaBlastData&)

    Insertion operator to stream exception information to a given
    output stream.  This method provides a convenient mechanism to
    dump the information in the MegaBlastData class (one one line
    separated by tabs) in the following order:

    <ol>
    <li>genContigID</li>
    <li>srcTransID</li>
    <li>eValue</li>
    <li>bitScore</li>
    </ol>

	\param[out] os The output stream to which the formatted exception
	information is to be written.

	\param[in] mbd The object whose information is to be written.
    
	\return This method returns os as per the API requirements.
*/
extern std::ostream& operator<<(std::ostream& os, const MegaBlastData& mbd);

/** Comparator for use with STL containers for MegaBlastData objects.

    The following structure essentially provides the \c less than
    comparison operator that can be readily used with STL containsers
    (such as: std::set).  This structure specifically provides
    comparison based on the generated contig ID
    (MegaBlastData::genContigID) member only.
*/
struct LessMegaBlastData {
    /** Comparison operator.

        This operator is invoked by various STL containers for
        comparing two MegBlastData objects. This method compares the
        objects purely based on their generated contig ID values.

        \param[in] mbd1 The first object to be compared.

        \param[in] mbd2 The second object to be compared.

        \return This method returns \c true if mbd1.getGenContigID()
        is lexicographically less than
        mbd2.getGenContigID(). Otherwise it returns \c false.
     */
    inline bool operator()(const MegaBlastData& mbd1,
                           const MegaBlastData& mbd2) const {
        return (mbd1.getGenContigID().compare(mbd2.getGenContigID()) < 0);
    }
};


#endif
