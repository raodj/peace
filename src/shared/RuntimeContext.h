#ifndef RUNTIME_CONTEXT_H
#define RUNTIME_CONTEXT_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "HashMap.h"

// Forward declaration to keep compiler happy and fast
class ESTList;
class ESTAnalyzer;
class ClusterMaker;
class Assembler;
class ESTListListener;

/** A convenience class to maintain runtime context information and
    shared data.

    This class serves as a convenience placeholder for maintaining and
    exchanging global runtime context information between sub-systems
    constituting peace.  This class essentially encapsulates pertinent
    shared data to provide a consistent mechanism for exchanging
    shared data structures and configuration information.  This class
    also provides a convenience method to serialize configuration
    information.
*/
class RuntimeContext {
    friend class PEACE;
public:
    /** The destructor.

        The destructor does not have any special tasks to perform and
        is merely present here to adhere to coding conventions.
    */
    ~RuntimeContext() {}

    /** Write configuration information to a given output stream.

        This method can be used to print the configuration information
        to a given output stream.  This method is typically used to
        create a standard header at the beginning of data files
        generated by the output sub-system of PEACE.  Each line of
        output is prefixed with the string \c "# " (a hash followed by
        a space) to indicate it is a comment line and must be ignored.
        The header is typically written at the beginning of a file to
        provide the reader with additional, contextual information
        about the origin of the data in the file.

        \param[in] os The output stream to which the data is to be
        written.
    */
    void printConfig(std::ostream& os) const;
    
    /** Helper method to add/update a configuration entry.

        This method must be used to add a new configuration entry to
        the context.  The configuration entries can be written (to a
        file or on screen) via the printConfig() method.

        \param[in] key The key value to be used to add an entry.  No
        checks are made on the key value.

        \param[in] value The value corresponding to the key to be
        added/updated in the hash map. No checks are made on the
        configuration value.
    */
    inline void addConfig(const std::string& key, const std::string value) {
        config[key] = value;
    }

    /** Obtain the shared list of cDNA fragments.

        This method must be used to obtain the shared list of cDNA
        fragments to be processed by the current run of PEACE.

        \return A pointer to the shared list of cDNA fragments to be
        processed.
    */
    inline ESTList* getESTList() const { return estList; };

	/** Set the shared list of cDNA fragments.
		
        This method is used by the InputSubSystem to establish the the
        shared list of cDNA fragments to be processed by the current
        run of PEACE.  This method is called only once.

		\note Calling this method more than once currently causes
		PEACE to abort (as a safety measure as the shared list must be
		set only once).
		
        \param[in] A pointer to the shared list of cDNA fragments to
        be processed.  Note that this class does not delete this list
        by merely maintains a reference.
    */
    void setESTList(ESTList* estList);

    /** Obtain the shared analyzer to be used for comparing cDNA
        fragments.

        This method must be used to obtain the shared analyzer (set
        for a given run of PEACE) to compare two cDNA fragments.
        Refer to the documentation on the ESTAnalyzer class for
        additional details on the API exposed by all analyzers and for
        details on using analyzers.

        \return A pointer to the shared ESTAnalyzer object to be used
        for comparing two cDNA fragments.  If a valid analyzer has not
        been set (via call to RuntimeContext::setAnalyzer() method)
        then this method returns NULL.
    */
    inline ESTAnalyzer* getAnalyzer() const { return analyzer; }

	/** Set the shared ESTAnalyzer to be used for comparing cDNA
		fragments.
		
        This method is used by the ClusteringSubSystem to establish
        the analyzer to be used for comparing cDNA fragments.  This
        method is called only once.

		\note Calling this method more than once currently causes
		PEACE to abort (as a safety measure as the analyzer must be
		set only once).
		
        \param[in] A pointer to the shared ESTAnalyzer to be used for
        comparing cDNA fragments.  Note that this class does not
        delete the analyzer object but merely maintains a reference.
    */
    void setAnalyzer(ESTAnalyzer* analyzer);

    /** Obtain the shared cluster maker to be used for clustering cDNA
        fragments.

        This method must be used to obtain the shared cluster maker
        (set for a given run of PEACE) to be used for clustering the
        cDNA fragments (loaded into the RuntimeContext::estList).
        Refer to the documentation on the ClusterMaker class for
        additional details on the API exposed by all cluster maker
        objects and for details on using them.

        \return A pointer to the shared ClusterMaker object to be used
        for clustering the cDNA fragments.  If a valid cluster maker
        has not been set (via call to
        RuntimeContext::setClusterMaker() method) then this method
        returns NULL.
    */
    inline ClusterMaker* getClusterMaker() const { return clusterMaker; }

	/** Set the shared ClusterMaker to be used for clustering cDNA
		fragments.
		
        This method is used by the ClusteringSubSystem to establish
        the cluster maker to be used for clustering cDNA fragments.
        This method is called only once.

		\note Calling this method more than once currently causes
		PEACE to abort (as a safety measure as the cluster maker must
		be set only once).
		
        \param[in] A pointer to the shared ClusterMaker to be used for
        clustering cDNA fragments.  Note that this class does not
        delete this object but merely maintains a reference.
    */
    void setClusterMaker(ClusterMaker* clusterMaker);

    /** Obtain the shared cDNA fragment assembler to be used for
        assembling cDNA fragments.

        This method must be used to obtain the shared assembler (set
        for a given run of PEACE) to be used for assembling the cDNA
        fragments (loaded into the RuntimeContext::estList).  Refer to
        the documentation on the Assembler class for additional
        details on the API exposed by all assemblers and for details
        on using them.

        \return A pointer to the shared Assembler object to be used
        for clustering the cDNA fragments.  If a valid assembler has
        not been set (via call to RuntimeContext::setAssembler()
        method) then this method returns NULL.
    */
    inline Assembler* getAssembler() const { return assembler; }

	/** Set the shared Assembler to be used for assembling cDNA
		fragments.
		
        This method is used by the AssemblySubSystem to establish the
        assembler to be used for assembling cDNA fragments.  This
        method is called only once.

		\note Calling this method more than once currently causes
		PEACE to abort (as a safety measure as the assembler must be
		set only once).
		
        \param[in] A pointer to the shared Assembler to be used for
        assembling cDNA fragments.  Note that this class does not
        delete this object but merely maintains a reference.
    */
    void setAssembler(Assembler* assembler);

    /** Obtain the listener to be notified whenever new cDNA fragments
        are added or removed.

        This method must be used to obtain the object to be notified
        whenever new cDNA fragments are added or removed (to/from the
        shared RuntimeContext::estList object) after sub-system
        initialization has been completed.  Refer to the documentation
        on the ESTListListener class for additional details on the API
        exposed.

        \return A pointer to the listener tobe notified about updates
        to the ESTList.  If a valid listener has not been set (via
        call to RuntimeContext::setESTListListener() method) then this
        method returns NULL.
    */
    inline ESTListListener* getESTListListener() const
    { return estListener; }

	/** Set the ESTListListener to be notified about dynamic changes
		to the shared ESTList object in this class.
		
        This method can be used to obtain a pointer to the class to be
        notified on dynamic changes to the shared list of cDNA
        fragments to be processed.
		
        \param[in] A pointer to the object to be notified.  This
        parameter can be NULL.
    */    
    void setESTListListener(ESTListListener* listener);
    
protected:
    /** The default and only constructor.

        The constructor is protected to ensure that this class is
        currently instantiated only from PEACE class.  The constructor
        adds some of the default configuration information.
    */
    RuntimeContext();

    /** Helper method to add command line information.

        This is a helper method that is invoked from PEACE::run()
        method to add the set of command line information passed into
        this program.  This method converts the arguments into a
        single string and adds an entry to RuntimeContext::config.

        \param[in,out] argc The number of command-line arguments that
         were passed-in to the process.  This instance variable
         determines the number of entries in the argv parameter.
         
         \param[in,out] argv The array of command-line arguments to be
         processed.
    */
    void addCmdLineInfo(const int argc, char*argv[]);

    /** The list of cDNA fragments to be processed by this run of
        PEACE.

        This instance variable holds a pointer to the shared list of
        cDNA fragments to be processed by the current run of PEACE.
        This list is set and populated by the InputSubSystem of PEACE.
        It is used by the filtering, clustering, and assembly
        sub-systems for various processing.  It is also used by the
        output sub-system when writing results of anaysis.
    */
    ESTList* estList;

    /** The analyzer that is used to compare two cDNA fragments for
        similarity (or differences).

        This instance variable holds a pointer to the shared analyzer
        object that is used to compare two cDNA fragments.  This
        object is populated by the ClusteringSubSystem of PEACE.  It
        is used by the filtering, clustering, and assembly sub-systems
        for various processing.  In addition, it is used by the output
        sub-system when writing statistical results from anaysis.
    */    
    ESTAnalyzer* analyzer;

    /** The actual clustering class that is used to create clusters.

        This instance variable holds a pointer to the shared
        clustering object that is used cluster the cDNA fragments.
        This object typically performs clustering using the
        quantiative metrics generated by RuntimeContext::analyzer by
        comparing pairs of cDNA fragments in the
        RuntimeContext::estList two cDNA fragments.  This object is
        populated by the ClusteringSubSystem of PEACE.  It is used by
        the filtering, clustering, and assembly sub-systems for
        various processing.  Furthermore, the output sub-system uses
        this object to write statistical results from anaysis.
    */    
    ClusterMaker* clusterMaker;

    /** The assembler that is used to build contings (optionally using
        the RuntimeContext::clusterMaker).

        This instance variable holds a pointer to the shared assembler
        object that is used to build contigs from highly related cDNA
        fragments.  The assembler typically uses the
        RuntimeContext::analyzer for comparing two cDNA fragments.
        Some assemblers use the RuntimeContext::clusterMaker object to
        initially create clusters and then assemble contigs for the
        clusters.  This object is also used by the output sub-system
        when writing statistical results from anaysis.
    */        
    Assembler* assembler;

	/** A listener to be notified when entries are added or removed to
		the estList.

		This pointer contains a reference to an object that must be
		notified whenever entries are added or removed from the shared
		RuntimeContext::estList after components have been initialized
		(that is the SubSystem::initializeComponents() has been
		invoked).  The class receiving the notification can
		appropriately update itself whenever entries are added.

		@see ParameterSetManager
	*/
	ESTListListener* estListener;
	
private:
    /** A hash map to maintaing general configuration information.

        This hash map holds a set of \c key &rarr; \c value pairs,
        where both \c key and \c value are strings. These values are
        added by the constructor and by the addCmdLineInfo() method.
        Few additional configuration values are added by various
        sub-systems.  This information is primarily used to write a
        text header at the beginning of output files generated by
        PEACE to provide additional context information to the user
        (indicating how the output was generated).
    */
    StringStringMap config;
};

#endif
