#ifndef FILTER_CHAIN_H
#define FILTER_CHAIN_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------


#include "Filter.h"
#include "HashMap.h"
#include "Component.h"
#include <vector>

// Some forward declarations to keep compiler fast and happy
class ClusterMaker;

/** Class that manages a list of filters.

    <p>This class is a component constituting the FilteringSubSystem
    of PEACE.  It represents a list of filters that are used to try
    and elimintate entries that could potentially deteriorate the
    quality of clustering generated by PEACE.  The filters are run
    prior to commencement of the core clustering operation.  For
    convenient post-processing analysis the filtered ESTs are gathered
    in suitable "dummy" clusters to be ignored.</p>

    <p>Each filter object in the chain implements a specific type of
    filteration operation and indicates if the cDNA fragment is to be
    filtered out (and not subject to further processing).  If a
    fragment is filtered out it is optionally added to a dummy cluster
    that is created by the filter.</p>

	<p>Note that filter processing proceeds in a given order. The
	first filter in the chain is invoked. If that filter returns \c
	true (indicating the fragment is to be filtered out) then rest of
	the filters are not invoked. On the other hand, if a filter
	returns \c false, then the next filter in the chain is
	invoked. The process continues until all the filters have been
	exhausted.</p>
*/
class FilterChain : public Component {
    friend class FilteringSubSystem;
public:
    /** Initialize the filters in the chain.

        This method is invoked after the FilteringSubSystem (that
        logically owns this component) has added filters to this
        chain.  This method iterates overall the the filters in the
        list and calls Filter::initialize() method to initialize each
        filter.  If initialization of a filter fails then this method
        immediately exits with \c false.

        \note This method assumes that the runtime context has been
        setup for the FilteringSubSystem (as per the normal runtime
        operations).  The context is used by Filter classes to obtain
        pointers to the ESTAnalyzer and ClusterMaker objects for their
        use.

        \return This method returns \c true if initialization was
        successfully completed.  On errors it returns \c false.
    */
    virtual bool initialize();

	/** Main helper method that applies all filters in a distributed
		manner.

		This method is a convinence method that has been introduced
		here to facilitate the process of applying all filters in a
		distributed manner. This method operates as follows:

		<ol>

		<li>It assumes that the FilterChain::initialize() has been
		called.</li>
		
		<li>Next it computes the sub-set of ESTs that this filter is
		expected to operate on and applies the filters to all the ESTs
		within the range it owns.</li>

		<li>It participates in interative broadcast in which it
		receives filter data from other processes (if any) and
		broadcasts its own data to others. This process ensures that
		all processes have a consistent view of the entries that have
		been filtered out on other processes.</li>

		<li>If all the operations were successfully completed, then
		this method returns 0 (zero).</li>
		
		</ol>

        \note This method assumes that the runtime context has been
        setup for the FilteringSubSystem (as per the normal runtime
        operations).  The context is used by Filter classes to obtain
        pointers to the ESTAnalyzer and ClusterMaker objects for their
        use.
        
		\return This method returns 0 (zero) on success. On errors it
		returns a non-zero error code.
	*/
    virtual int run();
	
    /** Finalizes all the filters in the chain.
        
        This method iterates over all the filters that have been added
        ot this chain and calls Filter::finalize() method on each one
        of them. The finalize operation permits the filters to wrap up
        their operation and perform any cleanups.
    */
    virtual void finalize();
    
    /** Add the given filter to the filter chain.
        
        This method permits the filter chain to takes ownership of a
        given filter object by added it to its internal chain.  This
        method is currently invoked by the FilteringSubSystem when it
        is being initialized.
        
        \note The filter chain takes ownership of the object therefore
        that the filter pointer passed to this method must not be
        deleted by the caller.
        
        \param[in] filter The instance of class Filter that should be
        added to the filter chain.
        
        \return This method returns \c true if the filter was
        successfully added. On errors this method returns \c false.
    */
    virtual bool addFilter(Filter* filter);

    /** Determine whether a given EST passes the filter criterion the
        analyzer should perform core (computationally intensive)
        analysis, according to this filter chain.
        
        This method can be used to compare a given EST with the
        reference EST (set via the call to the setReferenceEST())
        method.
        
        \param[in] est A pointer to an immutable EST object with which
        should be run through the filters in the chain to determine if
        it should be excluded from further processing.

        \return This method returns \c false if the EST must be
        subject to further filteration (or core EST analyis and
        clustering if this is the last filter in the chain).  If the
        specified EST is to be filtered out, then this method returns
        \c true.
    */
    inline bool applyFilters(const EST* est) {
        for (size_t i = 0; (i < chain.size()); i++) {
            if (chain[i]->applyFilter(est)) {
                // Immediately stop when EST is to be filtered
                // out. Don't apply other filters.
                return true;
            }
        }
        // The given EST passed through all filters. It must be
        // clustered/assembled.
        return false;
    }

    /** Method to display statistics regarding operation of all the
        filters in this chain

        This method can be used to obtain a dump of the statistics
        gathered regarding the operation of all the filters in this
        chain.  The typical statistic generated by filters
        includes:

        <ul>

        <li>The number of times the filter was called.  More
        specifically this value indicates the number of times the \c
        applyFilter() method was invoked on a given filter.</li>

        <li>The number of ESTs that were permitted to pass through the
        filter.</li>
        
        </ul>

        \param[out] os The output stream to which the statistics
        regarding the filters is to be dumped.

        \param[in] rank The rank of the process for which the
        statistics is being displayed. This value is used to make the
        outputs a bit more informative.
    */
    void printStats(std::ostream& os, const int rank) const;
    
    /** Method to obtain pointer to a given filter object.
        
        This method can be used to obtain a pointer to a specific
        filter class present in this chain.  If the filter does not
        exist then this method returns NULL.

        \note The caller must \b not delete the returned pointer.

        \param[in] name The name associated with a given filter.
	
        \return If the filter was found then this method returns a
        valid (non-NULL) pointer to the filter object. If the filter
        was not found, then this method returns NULL.
    */
    Filter* getFilter(const std::string& name) const;
    
    /** The destructor.

        The destructor frees up all the filters added to this
        filter chain.
    */
    virtual ~FilterChain();
    
protected:
    /** The vector containing a list of filters in the chain.
        
        This vector contains the list of hueristics assocaited with
        this chain.  Filters are added to the list via the
        addFilter() method.  The filters are used by the
        shouldAnalyze() method.
    */
    std::vector<Filter*> chain;

    /** The number of ESTs that were present in the list before the
        filters started operating.

        This instance variable is setup in the initialize() method to
        the number of cDNA fragments in the shared
        RuntimeContext::estList.  This variable is then used in the
        finalize() method to ensure that any dummy cDNA fragments
        added by the Filters are removed from the global shared list.
    */
    int origESTCount;
    
private:
    /** The constructor.

        This is the only constructor for this class. The
        constructor(s) are not public to ensure that this class is not
        instantiated directly but only by the friends of this
        component.  Currently, only the FilteringSubSystem class can
        instantiate this component.  Currently the constructor does
        not have any special tasks to perform and merely initializes
        instance variables to their default initial value.
    */
    FilterChain();
    
	/** Helper method to perform all-to-all broadcast operation.

		This method is invoked from the applyFilters() to broadcast
		the results from filtering out data to all other processes.
		In addition, this method also receives broadcasts from other
		processes and applies their filtered results to the local
		copy. This process ensures that all the processes in the
		system have a consistent snapshot of the filtered out ESTs.

		\note Possibly this method (which has a loop) can be replaced
		by a single MPI all-to-all broadcast call but at expense of
		increased memory footprint.

		\param[in] clusterMaker The cluster maker to be used for
		merging the filter data received from other processes.  This
		pointer can be NULL (in which case cDNA fragments that were
		filtered-out are not added to dummy cluster entries).
	*/
	void allToAllBroadcast(ClusterMaker *clusterMaker);
};

#endif
