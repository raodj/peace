#ifndef MERGING_CLUSTER_MAKER_H
#define MERGING_CLUSTER_MAKER_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@miamiOH.edu
//
//---------------------------------------------------------------------

#include "MSTClusterMaker.h"
#include <unordered_set>

/** A shortcut to refer to pair of integers.
*/
using IntInt = std::pair<int, int>;

/** A list of values containing the EST ID and the cluster ID for the
    read.  This list is used by this class to check which clusters can
    be merged.
 */
using IntIntList = std::vector<IntInt>;

/** Improves clustering by merging clusters generated by
    MSTClusterMaker.

    <p>This class extends the functionality of MST-based clustering by
    repeatedly merging generated clusters.  The cluster maker provides
    several different command-line parameters to fine tune the
    operations of this cluster maker.  Note that the options used by
    the MST-based cluster maker are also applicable to this cluster
    maker.</p>

    <p>The algorithm for merging clusters is as follows -- For each
    cluster <i>c</i> whose size is below a given threshold percentage
    (say 1%), using the first read in <i>c</i>, find a cluster
    <i>c'</i> with at least 1 read with distance/similarity below the
    average MST-distance.  If such a cluster <i><c'</i> is found, then
    merge <i>c</i> and <i>c'</i> into 1 cluster.  To find <i>c'</i>
    this cluster maker checks a given fraction of reads in each
    cluster.</p>


    The command-line arguments that can be used to fine-tune the
    operations of this cluster are:

    <ul>

    <li> \c --cls-merge-thresh : The cluster size in percentage of reads
    which makes the cluster a candidate to be merged with another
    cluster (if possible/meaningful).  For example, if then value is
    0.01 then if a cluster is less than 1% of total number of reads,
    then it will be tagged as a candidate to be merged with another
    cluster.  Larger values cause more aggressive merging of
    clusters.</li>

    <li> \c --cls-merge-stride : The percentage of reads to be
    compared to determine if a source and destination cluster are a
    match for merging. For example, if this value is 0.25, then 4
    reads (about 25% apart) will be used to determine a matching
    cluster.  Smaller values make the checks more robust at the
    expense of increased compute time.</li>

    <li> \c --cls-merge-reps : The maximum number of times merging
    clusters should be attempted.  By default this cluster maker
    attempts to keep merging clusters until no clusters can be merged.
    Setting this value limits the number of trials to this value.</li>
    
    </ul>

    <p>Note that this cluster maker has been designed to operate in
    parallel/distributed manner using the Message Passing Interface
    (MPI) library.  This class includes functionality for both the
    Manager (MPI Rank == 0) and Worker (MPI Rank > 0) processes.
    Necessary functionality to distinguish and operate either as
    Manager or Worker is already built into the class.</p>
*/
class MergingClusterMaker : public MSTClusterMaker {
    friend class ClusterMakerFactory;
protected:
    /** A simple inner class to encapsulate cluster information.  This
        class is used by manager and worker to exchange information
        about clusters with closely matching reads.
    */
    class ClsInfo {
    public:
        /** A convenience constructor.

            A convenience constructor to initialize all the instance
            variables to a given value. By default all instance
            variables are initialized to an invalid value.

            \param[in] clusterID The ID of the cluster.
            \param[in] metric The distance/similarity metric.
            \param[in] clusterSize The size of the cluster.
         */
        ClsInfo(const int clusterID = -1, const float metric = -1,
                const int clusterSize = -1) :
            clusterID(clusterID), metric(metric), clusterSize(clusterSize) {}
        
        /** The ID of the matching cluster */
        int clusterID;

        /** The metric indicating similarity/distance between a
            reference read in this cluster and reads in the cluster to
            be merged
        */
        float metric;

        /** The size of the cluster indicated by clusterID.  This
            information is meaningful only on the manager process and
            is used to sort matching clusters based on their size to
            find the best matching cluster.
        */
        int clusterSize;
 
        /** Comparison operator for finding the best matching cluster.
            First, the cluster with lowest metric is preferred. If two
            clusters have the same lowest metric, then cluster with
            larger size is chosen.
        */
        bool operator<(const ClsInfo& other) const {
            ASSERT( analyzer != NULL );
            return (metric == other.metric) ?
                (clusterSize < other.clusterSize) :
                analyzer->compareMetrics(metric, other.metric);
        }

        /** Reference to the EST analyzer to be used to compare
            metrics.  Metric comparison is done this way because
            different analyzers have different ways to compare
            metrics.  This pointer is set by MergingClusterMaker in
            the makeClusters() method.
        */
        static ESTAnalyzer *analyzer;
    };

    /** Shortcut to refer to a list of cluster information objects.
        This shortcut is used by the helper methods in this class to
        streamline code */
    using ClsInfoList = std::vector<ClsInfo>;
    
public:
    /** The destructor.
        
        The destructor frees up all any dynamic memory allocated by
        this object for its operations.
    */
    virtual ~MergingClusterMaker();

    /** Add valid command line arguments for this analyzer.

        This method must be used to add all valid command line options
        that are supported by this analyzer.  This method is invoked
        when the clustering sub-system is initialized.  
        
        \note Note that this method first permits the base class to
        add its command-line options.
        
        \param[out] argParser The argument parser to which the command
        line arguments for this component are to be added.
    */
    virtual void addCommandLineArguments(ArgParser& argParser);

protected:
    /** Method to perform clustering.
        
        This method overrides the base class implementation to merge
        clusters.

        This method is invoked by the core framework to perform
        clustering.  This method first lets the base class
        MSTClusterMaker to form the initial MST-based clusters.  It
        then attempts to merge the clusters generated by the base
        class.
    */
    virtual int makeClusters() override;

    /** Helper method to perform manager tasks.

        This method has been introduced to streamline the operations
        of the MergingClusterMaker when it operates as the
        manager. The MPI process with Rank 0 (zero) acts as the
        manager and coordinates all the activities of merging
        clusters. This method is invoked from the makeClusters()
        method.

        \param[in] refESTs The list of reference reads in each cluster
        to be used to determine if 2 clusters are sufficiently similar.

        \param[in] startIndex The index (in refESTs) from where this
        process should perform comparisons.

        \param[in] endIndex The index (in refESTs) up to which this
        process should perform comparisons.

        \param[in] clsSizes The list of clusters and their sizes
        sorted in increasing size.
        
        \return This method returns 0 (zero) if clusters were created
        successfully.  Otherwise this method returns a non-zero value
        indicating an error.
    */
    virtual int mergeManager(const IntIntList& refESTs, const int startIndex,
                             const int endIndex);

    /** Helper method to perform worker tasks.

        This method has been introduced to streamline the operations
        of the MergingClusterMaker when it operates as a worker. All
        the MPI processes with non-zero rank act as a worker and
        collaborate with the manager to identify candidate clusters to
        be merged. This method is invoked from the makeClusters()
        method.

        \param[in] refESTs The list of reference reads in each cluster
        to be used to determine if 2 clusters are sufficiently similar.

        \param[in] startIndex The index (in refESTs) from where this
        process should perform comparisons.

        \param[in] endIndex The index (in refESTs) up to which this
        process should perform comparisons.
        
        \return This method returns 0 (zero) if clusters were created
        successfully.  Otherwise this method returns a non-zero value
        indicating an error.
    */
    virtual int mergeWorker(const IntIntList& refESTs, const int startIndex,
                            const int endIndex);

    /** Finds another cluster with reads closest to the given cluster.

        This method is meant to be called only on the manager process.
        This method collaborates with the worker processes to find
        another cluster that has matching reads.  The reference reads
        in the two clusters are used to determine matching reads.

        \param[in] refESTs The list of reference reads in each cluster
        to be used to determine if 2 clusters are sufficiently similar.

        \param[in] startIndex The index (in refESTs) from where this
        process should perform comparisons.

        \param[in] endIndex The index (in refESTs) up to which this
        process should perform comparisons.
        
        \param[in] clsId The cluster for which a matching cluster is
        to be determined.

        \return The best matching cluster ID or -1 if a good match was
        not found.
    */
    int findBestCluster(const int clsId, const IntIntList& refESTs,
                        const int startIndex, const int endIndex);

    /** Check a subset of reference reads and return closely matching
        clusters.

        This is a helper method that is used by both the manager and
        worker processes.  This method compares a given EST with
        reference reads in different clusters and returns matching
        cluster information.

        \param[in] estId The ID of the EST to be used for all
        comparisons.
        
        \param[in] refESTs The list of reference reads in each cluster
        to be used to determine if 2 clusters are sufficiently similar.

        \param[in] srcCluster The source cluster for the reference
        EST. Reads in this cluster are ignored for comparison by this
        method.
        
        \param[in] startIndex The index (in refESTs) from where this
        process should perform comparisons.

        \param[in] endIndex The index (in refESTs) up to which this
        process should perform comparisons.

        \return The list of matching clusters with metrics that are
        better than the specified threshold.
    */
    ClsInfoList findMatchingClusters(const int estId, const int srcCluster,
                                     const IntIntList& refESTs,
                                     const int startIndex, const int endIndex);
    
    /** Obtain a list of reference ESTs (for all clusters) to be used
        deterime if clusters can be merged.

        \note This method is meaningful only on the manager process.
        
        This method uses the list of clusters in
        MSTCluster::getGlobalClusterList() and the reads in each
        cluster to identify the reference clusters to be merged.  The
        IntInt::first is the ID of the EST.  IntInt::second is the ID
        of the cluster to which the strain has been currently
        assigned.

        \return The list of reference EST reads and corresponding
        cluster IDs.
    */
    IntIntList getRefESTs() const;

    /** Obtain a list of reference ESTs for a given cluster ID.

        \note This method is meaningful only on the manager process.
        
        This method uses the list of clusters in
        MSTCluster::getGlobalClusterList() and the reads in the given
        cluster to identify the reference reads for the given cluster.
        The reference reads serve as the samples to be used to test
        similarity of clusters.

        \param[in] clusterID The ID of the cluster for which the
        reference ESTs are to be returned by this method.
        
        \return The list of reference EST reads (in first) and corresponding
        cluster IDs (in second).
    */
    IntIntList getRefESTs(const int clusterID) const;
    
    /** Obtain the current cluster sizes sorted in ascending order.

        \note This method is meaningful only on the manager process.
        
        This is a convenience method that can be used to determine the
        current sizes of the clusters.  This method uses the list of
        clusters in MSTCluster::getGlobalClusterList() to determine
        cluster sizes.  The cluster sizes are sorted with the smallest
        cluster at the top.

        \return A list of pairs containing cluster ID (in first) and
        its size (in second) sorted based on cluster sizes.
    */
    IntIntList getClusterSizes() const;

    /** Convenience method to return the size of the cluster.

        \param[in] clsID The ID of the cluster

        \return The size of the cluster, if cluster ID is valid.
        Otherwise this method returns 0 (zero).
    */
    int getClusterSize(const int clsID) const;

    /** Helper method to obtain cluster info from each worker and
        merge them into given list.

        This a convenience method that is used only on the manager
        process.  This method obtains cluster information message from
        each worker.  It collects the lists into the supplied
        clsList. It updates the cluster sizes and sorts the lists.
    */
    void mergeFromWorkers(ClsInfoList& clsList);
    
private:
    /** The constructor.
        
        The default constructor for this class.  The constructor is
        made private so that this class cannot be directly
        instantiated.  However, since the ClusterMakerFactory is a
        friend of this class, an object can be instantiated via the
        ClusterMakerFactory::create() method.

        \param[in,out] analyzer The EST analyzer to be used for
        obtaining similarity metrics between two ESTs.  This parameter
        is simply passed onto the base class.
    */
    MergingClusterMaker(ESTAnalyzer *analyzer);
    
    /** Variable to indicate fractional size of a cluster below which
        the cluster is eligible for merging.

        Clusters that have a fraction of reads below this value are
        candidates for mering.  For example, if then value is 0.01
        then if a cluster is less than 1% of total number of reads,
        then it will be tagged as a candidate to be merged with
        another cluster.  Larger values cause more aggressive merging
        of clusters.  Use the \c --cls-merge-thresh command-line
        argument to set this value.
    */
    float mergeThresh;

    /** Variable to indicate percentage of reads to be compared in two
        clusters to determine if they are sufficiently similar.

        The percentage of reads to be compared to determine if a
        source and destination cluster are a match for merging. For
        example, if this value is 0.25, then 4 reads (about 25% apart)
        will be used to determine a matching cluster.  Smaller values
        make the checks more robust at the expense of increased
        compute time.  Use the \c --cls-merge-stride command-line
        argument to set this value.
    */
    float mergeStride;
    
    /** Variable to indicate the maxium number of iterations of
        cluster merging that should be attempted to merge clusters.

        This command-line argument limits the maximum number of times
        merging clusters should be attempted.  By default this cluster
        maker attempts to keep merging clusters until no clusters can
        be merged.  Setting this value limits the number of trials to
        this value.
    */
    int mergeReps;

    /** Variable to indicate the list of heuristics to be removed
        prior to checking for merged clusters.
        
        This command-line argument is used to remove heuristics that
        may negatively impact comparisons of ESTs.  Typically the
        primes heuristics is removed.  This value can be set via \c
        --cls-merge-rm-heur command-line argument.
    */
    ArgParser::StringList rmHeuristics;
    
    /** Set of cluster IDs that have been merged.

        This set tracks the clusters that have been merged into
        another cluster.  This information is used to ignore ESTs from
        the merged clusters when checking for matching reads.
    */
    std::unordered_set<int> mergedClusterIDs;
};

#endif
