#ifndef PRIMES_HELPER_H
#define PRIMES_HELPER_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@miamiOH.edu
//
//---------------------------------------------------------------------

#include <string>
#include <vector>
#include "HashMap.h"
#include "ESTList.h"

/** \typedef std::vector<long> LongVec;

    \brief A vector of long values to return n-dimensional features
    for a given sequence.

    This typedef provides a convenient short cut to refer to a
    vector-of-long values. The vector represents n-dimensional feature
    for a given sequence.  Each entry in the vector contains the
    feature value along a given dimension.  Each dimensional pseudo
    metric is computed based on a sub-sequence of fixed length.
*/
typedef std::vector<long> LongVec;

/** \typedef HashMap<int, LongVec> FeaturesMap;

    \brief A hash map to provide rapid access to the set of
    pre-computed, n-dimensional features.

    This typedef provides a convenient short cut to refer to a hash
    map that is used to cache pre-computed features generated by
    PrimesHelper class.  The zero-based index of the EST is used as
    the key into this hash map.  Each entry in the hash map contains a
    vector of n-dimensional features computed based on prime numbers.
*/
typedef HashMap<int, LongVec> FeaturesMap;


/** A helper class used to generate features using prime numbers to
    encode base pairs.

    This class is typically not meant to be directly instantiated and
    used.  Instead use one of the derived classes -- e.g.,
    PrimesHeuristic.

    \note Ensure that the setPrimes method is called prior to
    performing any feature extraction.
*/
class PrimesHelper {
public:
    /** A simple class to encapsulate a pair of values -- estIdx and
        distance.  This is an internal class that is used to
        conveniently generate, sort, and process a set of metrics.
     */
    class ESTMetric {
    public:
        /** A convenience constructor to initialize an object.

            \param[in] idx The index of the EST associated with this
            object.

            \param[in] dist The distance metric associated with this
            metric.
        */
        ESTMetric(int idx = -1, float dist = -1) :
            estIdx(idx), distance(dist) {}
        
        /** The index of the EST to which the metric is associated. */
        int estIdx;

        /** The distance (or similarity) metric associated with this
            entry
         */
        float distance;

        /** Comparison operator used for sorting ESTMetric objects
            based on distance.

            \param[in] other The other object to compare with.

            \return This method returns true if this object's distance
            is less than other object's distance.
        */
        bool operator<(const ESTMetric& other) const {
            return (distance < other.distance);
        }
    };
    
    /** The destructor.

        This class does not use any dynamic memory. Consequently, the
        destructor is present merely as a place holder.
    */
    virtual ~PrimesHelper() {}

    /** Convenience method to setup the prime numbers to be associated
        with different base pairs.

        \param[in] atPrime The prime number to be used for 'A' and 'T'
        nucleotides.

        \param[in] cgPrime The prime number to be used for 'C' and 'G'
        nucleotides.

        \param[in] others The prime number to be used for other codon
        characters -- 'r','y','s','w','k','m','b','d','h','v','n'
    */
    void setPrimes(const int atPrime = 71, const int cgPrime = 113,
                   const int others  = 0);

    /** Extract n-dimensional features for a given sequence.

        This method generates the n-dimensional feature vector for the
        given sequence.

        \note Ensure the setPrimes() method is calle prior to using
        this method.
        
        \param[in] sequence The nucleotide sequence for which the
        n-dimensional primes-based features are to be computed.

        \param[in] numFeatures The number of dimensions or features to
        be extracted.

        \return A vector containing exactly numFeatures entries, with
        each entry containing the feature value along that dimension.
    */
    LongVec extractFeatures(const std::string& sequence,
                            const int numFeatures) const;

    /** Convenience method to return cached features or compute
        features for a given EST.

        This is a convenience method that either returns features from
        the cache or computes the features and returns it.

        \param[in] est The EST for which the features is to be computed.

        \param[in] numFeatures The number of dimensions or features to
        be extracted.

        \return A vector containing exactly numFeatures entries, with
        each entry containing the feature value along that dimension.
    */
    LongVec extractFeatures(const EST& est, const int numFeatures) const;
    
    /** Pre-compute and cache the n-dimensional features for
        locally-owned ESTs.

        This method can be used to pre-compute and cache n-dimensional
        features for locally-owned ESTs. The locally-owned ESTs are
        determined call to getLocallOwnedESTs() method.  The values
        cached by this method can be obtained via call to
        getCachedFeature method in this class.

        \note Ensure the setPrimes() method is calle prior to using
        this method.
                
        \param[in] estList The list of ESTs for which distances are to
        be computed.  Each parallel process works on a subset of ESTs
        as determined by getLocallyOwnedESTs().

        \param[in] numFeatures The number of features or dimensions of
        features to beused for computing distances between ESTs.
    */
    void cacheFeatures(ESTList& estList, const int numFeatures);

    /** Get the cached, n-dimensional features for a given EST.

        \note Ensure the cacheFeatures() method is calle prior to
        using this method.
        
        \param[in] estIdx The index of the EST for which the
        n-dimensional features are to be returned.
    */
    LongVec getCachedFeature(const int estIdx) const;

    /** Computes the total average distance and standard deviation.

        This method operates in a parallel manner (across 1-or-more
        MPI processes) to compute the average euclidean distance
        between a reference EST and all other ESTs in a given list.

        \param[in] estList The list of ESTs for which distances are to
        be computed.  Each parallel process works on a subset of ESTs
        as determined by getLocallyOwnedESTs().

        \param[in] refESTidx The index of the reference EST based on
        which distances are to be computed.

        \param[in] numFeatures The number of features or dimensions of
        features to be used for computing distances between ESTs.
        
        \param[out] average The average distance computed by this
        method.

        \param[out] deviation The standard devication computed by this
        method.
    */
    void computeAvgDistance(ESTList& estList, const int refESTidx,
                            const int numFeatures,
                            float& average, float& devition) const;
    

    /** Compute the Euclidean distance between two n-dimensional
        features.

        This is a convenience method to compute the euclidean distance
        between two given n-dimensional features.

        \param[in] refFeatures The first vector of features.

        \param[in] otherFeatures The second vector of features to use.

        \return The Euclidean distance between the two n-dimensional
        features.
    */
    float getDistance(const LongVec& refFeatures,
                      const LongVec& otherFeatures) const;

protected:
    /** The default and only constructor for this class.

        This class is typically not meant to be directly instantiated and
        used.  Instead it is meant to be used in conjunction with other
        classes.  Consequently, the constructor has been made protected to
        enforce the intended design pattern.        
    */
    PrimesHelper() {}

    /** Helper method to compute the primes based score for a given
        sub-sequence.

        This method generates the feature for a given dimension.  This
        method iterates over each character in the given sequence to
        compute the primes-based pseudo metric.

        \note Ensure that the setPrimes method is called prior to
        using this method.
        
        \param[in] sequence The sub-sequence for which the
        primes-based pseudo metric is to be computed.

        \param[in] start The starting index position in the sequence
        from where the score is to be computed.

        \param[in] end The ending index position in the sequence up to
        where the score is to be computed.
        
        \return The primes-based pseudo metric for the given
        subsequence.
    */
    long scoreSequence(const std::string& sequence, const int start,
                       const int end) const;

    /** Helper method to generate a sorted list of metrics from a
        given list.

        \param[in] estList The list of EST's to be used to compute the
        metrics.

        \param[in] refIdx The index of the reference EST to be used
        for computing distance.

        \param[in] numFeatures The number of features or dimensions of
        features to be used for computing distances between ESTs.

        \param[in] distThresh Do not include reads whose distance is
        higher than this value.  The default value is set to LONG_MAX
        and hence all reads would be included.
    */
    std::vector<PrimesHelper::ESTMetric>
    computeMetrics(ESTList& estList, int refIdx, int numFeatures,
                   const long distThresh = 0x7FFFFFFFL) const;
                                                    
private:
    /** Vector with prime values set for each valid nucleotide/codon.
        This vector is exactly 256 characters in size -- one entry per
        character.  This appraoch eliminates the need to use any
        if/switch logic and keeps operations fast.  The values in this
        vector set set when the setPrimes method in this class is
        invoked.
    */
    std::vector<char> numericVector;

    /** A hash map to cache the n-dimensional features precomputed for
        locally-owned ESTs.
    */
    FeaturesMap featuresCache;
};

#endif
