#ifndef SAM_WRITER_H
#define SAM_WRITER_H

//--------------------------------------------------------------------
//
// This file is part of PEACE.
// 
// PEACE is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// PEACE is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with PEACE.  If not, see <http://www.gnu.org/licenses/>.
// 
// Miami University makes no representations or warranties about the
// suitability of the software, either express or implied, including
// but not limited to the implied warranties of merchantability,
// fitness for a particular purpose, or non-infringement.  Miami
// University shall not be liable for any damages suffered by licensee
// as a result of using, result of using, modifying or distributing
// this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of GNU General Public License (version 3).
//
// Authors:   Dhananjai M. Rao          raodm@muohio.edu
//
//---------------------------------------------------------------------

#include "Component.h"
#include "ContigListener.h"
#include "EST.h"

#include <fstream>

// Forward declarations to keep the compiler happy
class AlignmentInfo;
class ESTList;

/** An output sub-system component to write contigs generated by a
	genome-assembler in SAM (Sequence Alignment/Map) file format.

	This class is a component of the output sub-system. Its
	responsibility is to serialize contigs generated by a
	genome-assembler (a class that implements the Assembler interface)
	into SAM file format.  SAM is a text file format for storing
	genomic information.  The file format has been developed by the
	Broad institute.  Details on the SAM Format Specification is
	available at:  http://samtools.sourceforge.net/SAM1.pdf

	\note This class can only be instantiated by the
	OutputSubSystem. See OutputSubSystem::getSAMWriter() method.
*/
class SAMWriter : public Component, ContigListener {
    friend class OutputSubSystem;
public:
    /** The destructor.

        The destructor is merely present to adhere to coding
        conventions.  Currently, this does not have any special tasks
        to perform.
    */
    virtual ~SAMWriter();

    /** Add the set of command line parameters for this component.

        This method is typically invoked by the OutputSubSystem when
        it is being requested for command line arguments.  This method
        adds the \c --output-sam-file option to the set of command
        line arguments that can be used to further customize the
        operations of this component.
        
        \param[out] argParser The argument parser to which the command
        line arguments for this component are to be added.
    */
    void addCommandLineArguments(ArgParser& argParser);

    /** Initialize the operations of this component by creating a SAM
        file stream and a temporary per-cDNA alignment information
        stream.

        This method is invoked when the OutputSubSystem (that
        logically owns this component) is initialized.  This method
        initializes the estList pointer in this class.  Next, if a
        valid SAM file has been specified then this method creates the
        samFile output stream and the tmpContigFile output stream for
        use each time the contigFormed() method is called.
        
        \return This method returns \c true if initialization was
        successfully completed.  On errors (that is the samFile or the
        tmpConfigFile streams could not be opened) it returns \c
        false.
    */
    bool initialize();
    
    /** Finish write contig data to a given SAM file.

        <p>This method is invoked after all the contigs have been
        written. Recollect that since the SAMWriter class acts as a
        contig listener it periodically writes the information for
        each contig formed to samFile (headers are written here) and
        tmpContigFile (per-cDNA alignment information is written
        here).  To wrap up the SAM file creation, here we need to move
        the per-cDNA alignment data from tmpContigFile and append it
        to samFile. However, first we finish up SAM headers by adding
        program-information headers.</p>

		\note This method performs operations only on the manager
		process. No special operations are needed on worker processes
		as only the manager perform the actual file i/o.
		
		\param[in] context The runtime context from where the shared
		information can be obtained for generating the SAM file.  This
		pointer is used to obtain program information and command-line
		parameters for generating the program header in SAM file.
		
        \return If the contigs were written successfully, then this
        method returns \c true.  On errors it generates a suitable
        error message (on std::cerr) and returns \c false.
    */
    virtual bool write(RuntimeContext *context);
    
protected: 
    /** The constructor.

        This is the only constructor for this class. The
        constructor(s) are not public to ensure that this class is not
        instantiated directly but only by the friends of this
        component.  Currently, only the OutputSubSystem class can
        instantiate this component.  The constructor does not have any
        special tasks to perform and merely initializes instance
        variables to their default initial value.
    */
    SAMWriter();

    /** Method to intercept contig formation notifications and write
        contig data to file(s).

        This method is called on all parallel processes once a contig
        has been successfully formed by an assembler. The newly formed
        contig is passed in as the parameter. Note that not all
        genomic-assemblers collate all the information on all parallel
        processes.  Consequently, this method coordinates with all the
        parallel processes to obtain necessary contig information and
        write it to a temporary file. Once all the contigs have been
        formed the write() method merges the data into a single SAM
        file.

        \param[in] assembler The genomic-assembler that has formulated
        the contig. This object is not really used by this method.
        
        \param[in] contig The newly formed contig with partial
        information that is available on the process on which this
        method is invoked.

        \param[in] fullContig If this flag is \c true then the contig
        has full information.  If this flag is \c false then this
        contig has partial information and data from other
        parallel-processes must be fused together to obtain full
        contig information.
        
        \return This method is expected to return \c true if the
        contig has been processed successfully.  On errors this method
        must return \c false.
    */
    bool contigFormed(const Assembler& assembler,
                      const Contig& contig, const bool fullContig);

    /** Method to convert a given alignment information into a SAM
        alignment section entry.

        This method is a helper method that is used to convert a given
        alignment information (for a given cDNA fragment) into a
        suitable entry in a SAM file.  This method returns a string
        that contains the mandatory 11 fields that constitute an entry
        in the alignment section of a SAM file.

        \param[in] contig The contig whose alignment information is to
        be converted to a suitable SAM entry.
        
        \param[in] ai The alignment information to be converted into
        an entry in a SAM file.

        \param[in] contigID The unique identifier for the contig
        associated with this alignment.  This value is used as the \c
        RNAME field.
        
        \param[in] isFirst Flag to indicate if this is the first entry
        for the contig in a SAM file.

        \param[in] isLast Flag to indicate if this is the last entry
        for the contig.

        \param[in] isSingleton Flag to indicate if the contig being
        written is a singleton (contains only one cDNA fragment).
        
        \return A tab delimited string containing the 11 mandatory
        fields containing the information for creating an entry in the
        alignment section of a SAM file.
    */
    std::string getSAMAlignEntry(const Contig& contig, const AlignmentInfo& ai,
                                 const bool isFirst, const bool isLast,
                                 const bool isSingleton);
    
    /** Helper method to get the counts of number of per-cDNA
        alignments at each parallel process.

        This is a utility method that is called from the
        contigFormed() method.  It is used to determine the number of
        alignments objects in the contig at each parallel process.
        This operation is required in cases where the contigs do not
        have full information.

        \param[in] localCount The local count of number of per-cDNA
        alignments available at this process.
        
        \param[out] globalEntryCounts This vector has a count of
        number of per-cDNA alignments at each parallel process.  The
        MPI-rank of the processes serves as the index into this vector.

        \param[out] hasFirst This parameter is set to \c true if this
        process has the first entry for this contig. Otherwise this
        parameter is set to \c false.

        \param[out] hasLast This parameter is set to \c true if this
        process has the last entry for this contig. Otherwise this
        parameter is set to \c false.

        \param[out] isSingleton This parameter is set to \c true to
        indicate if the contig is a singleton (and contains only one
        cDNA fragment).
        
        \return This method returns the MPI-rank of the process on
        which this method is invoked.
    */
    int getGlobalContigCounts(const int localCount,
                              std::vector<int>& globalEntryCounts,
                              bool& isFirst, bool& isLast, bool& isSingleton);
private:
    /** The name of the SAM file to which the contig data is to be
        written.

        This instance variable contains the path (may it be relative
        or absolute) and name of the file to which the SAM data is to
        be written when the write() method in this class is invoked.
    */
    std::string samFileName;

    /** The output file stream to which the final aligned data is to
        be written.

        This member is the output SAM file to which the data is to be
        written.  It is opened (if samFileName is not an empty string)
        in the initialize() method and is closed in the write() method.
    */
    std::ofstream samFile;

    /** A temporary file to which contig information is written prior
        to merging into the samFile.

        The SAM file format requires all the contig headers to be
        written first and then the actual contig data. However, all
        the contig headers are not available until all the contigs
        have been formulated. On the other hand, holding contig
        information in memory is not very memory efficient.  Thefore,
        as a tradeoff, per-cDNA alignment information is written to
        this file each time the contigFormed() method is
        invoked. Finally, after all the contigs have been created and
        the write() method is invoked, the data from this file is
        appended to the samFile (that will have all the necessary
        headers already written).  Since we have to write and then
        read data from this file it is opened in read/write mode.
    */
    std::fstream tmpContigFile;

    /** A convenience reference to the shared list of cDNA fragments
        being processed.

        This member holds a convenient pointer to the shared list of
        cDNA fragments.  This list is used to create the necessary
        information for each per-cDNA alignment information in a SAM
        file.  This list is set by the initialize() method.
    */
    ESTList* estList;
};

#endif
